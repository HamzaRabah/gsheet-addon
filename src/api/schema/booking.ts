/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/booking/v1/blocks": {
    /** Returns a list of all blocks, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
    get: operations["BookingBlocksGet"];
    /** <br>You must have at least one of these scopes: 'blocks.create, reservations.manage'. */
    post: operations["BookingBlocksPost"];
  };
  "/booking/v1/blocks/$count": {
    /** Returns number of blocks matching the filter criteria<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
    get: operations["BookingBlocks$countGet"];
  };
  "/booking/v1/blocks/{id}": {
    /** Retrieves a block, specified by its ID.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
    get: operations["BookingBlocksByIdGet"];
    /**
     * Use this call to delete a block. This is only possible as long as no reservation was picked up yet even if all of
     * them are canceled<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
     */
    delete: operations["BookingBlocksByIdDelete"];
    /** Check if a block exists by id<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
    head: operations["BookingBlocksByIdHead"];
    /** This endpoint is obsolete. It will be removed 10.05.2022. Use `PUT /booking/v1/block-actions/{id}/amend` instead.<br/ >You can replace From, To, GrossDailyRate and BlockedUnits<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'. */
    patch: operations["BookingBlocksByIdPatch"];
  };
  "/booking/v1/block-actions/{id}/confirm": {
    /**
     * Confirm a specific block which is in status 'Tentative'.
     * This changes the status to 'Definite'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
     */
    put: operations["BookingBlock-actionsByIdConfirmPut"];
  };
  "/booking/v1/block-actions/{id}/release": {
    /**
     * Release a specific block which is in status 'Definite'.
     * This changes the status to 'Tentative'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
     */
    put: operations["BookingBlock-actionsByIdReleasePut"];
  };
  "/booking/v1/block-actions/{id}/cancel": {
    /**
     * Cancel a specific block which is in status 'Definite' or 'Tentative'.
     * This changes the status to 'Canceled'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
     */
    put: operations["BookingBlock-actionsByIdCancelPut"];
  };
  "/booking/v1/block-actions/{id}/wash": {
    /**
     * Wash a specific block which is in status 'Definite'.
     * This releases all unpicked units.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
     */
    put: operations["BookingBlock-actionsByIdWashPut"];
  };
  "/booking/v1/block-actions/{id}/amend": {
    /** Use this call to modify a block.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'. */
    put: operations["BookingBlock-actionsByIdAmendPut"];
  };
  "/booking/v1/bookings": {
    /** Returns a list of all bookings, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingBookingsGet"];
    /** Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'. */
    post: operations["BookingBookingsPost"];
  };
  "/booking/v1/bookings/$force": {
    /** Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'. */
    post: operations["BookingBookings$forcePost"];
  };
  "/booking/v1/bookings/{id}/reservations": {
    /** Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'. */
    post: operations["BookingBookingsByIdReservationsPost"];
  };
  "/booking/v1/bookings/{id}/reservations/$force": {
    /** Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'. */
    post: operations["BookingBookingsByIdReservations$forcePost"];
  };
  "/booking/v1/bookings/{id}": {
    /** Retrieves a booking with all its reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingBookingsByIdGet"];
    /**
     * Here is the list of operations that are currently allowed:
     * - Add, replace and remove PaymentAccount
     * - Add, replace and remove Comment
     * - Add, replace and remove BookerComment
     * - Copy PaymentAccount, Comment and BookerComment from the booking to any reservation, or the other way around
     * - Replace Booker<br>You must have this scope: 'reservations.manage'.
     */
    patch: operations["BookingBookingsByIdPatch"];
  };
  "/booking/v1/groups": {
    /**
     * Returns a list of all group bookings, filtered by the specified parameters.
     * If no parameters are set, returns the entire list<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.
     */
    get: operations["BookingGroupsGet"];
    /** <br>You must have at least one of these scopes: 'groups.create, reservations.manage'. */
    post: operations["BookingGroupsPost"];
  };
  "/booking/v1/groups/{id}": {
    /** Retrieves a specific group booking with all its related blocks<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
    get: operations["BookingGroupsByIdGet"];
    /**
     * Use this call to delete a group booking. This is only possible as long as no blocks exist that are linked to
     * this group booking<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.
     */
    delete: operations["BookingGroupsByIdDelete"];
    /** Check if a group booking exists by id<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
    head: operations["BookingGroupsByIdHead"];
    /**
     * Here is the list of operations that are currently allowed:
     * - Add and replace Name
     * - Add, replace and remove Comment
     * - Add, replace and remove BookerComment
     * - Add, replace and remove PaymentAccount
     * - Add, replace and remove PropertyIds
     * - Replace Booker<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.
     */
    patch: operations["BookingGroupsByIdPatch"];
  };
  "/booking/v1/groups/$count": {
    /** Returns number of group bookings matching the filter criteria<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
    get: operations["BookingGroups$countGet"];
  };
  "/booking/v1/groups/{id}/reservations": {
    /** Creates new reservations and adds them to an existing group booking taking a list of reservations as input<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'. */
    post: operations["BookingGroupsByIdReservationsPost"];
  };
  "/booking/v1/offers": {
    /** Calculates and returns available offers for a specific property, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
    get: operations["BookingOffersGet"];
  };
  "/booking/v1/rate-plan-offers": {
    /** Calculates and returns available offers for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
    get: operations["BookingRate-plan-offersGet"];
  };
  "/booking/v1/service-offers": {
    /** <br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
    get: operations["BookingService-offersGet"];
  };
  "/booking/v1/offer-index": {
    /** Calculates and returns offers per time slice for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offer-index.read, offers.read'. */
    get: operations["BookingOffer-indexGet"];
  };
  "/booking/v1/reservations": {
    /** Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingReservationsGet"];
  };
  "/booking/v1/reservations/$count": {
    /** If no parameters are set, returns the total count of reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingReservations$countGet"];
  };
  "/booking/v1/reservations/{id}": {
    /** Retrieves a reservation, specified by its ID.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingReservationsByIdGet"];
    /**
     * Here is the list of operations that are currently allowed:
     * - Add, replace and remove Comment
     * - Add, replace and remove GuestComment
     * - Add, replace and remove PaymentAccount
     * - Add, replace and remove TravelPurpose
     * - Add, replace and remove AdditionalGuests
     * - Add a company (using company/Id, and only if not already set)
     * - Add, replace and remove Commission
     * - Replace PrimaryGuest
     * - Remove ValidationMessages
     * - Add, replace and remove MarketSegment<br>You must have this scope: 'reservations.manage'.
     */
    patch: operations["BookingReservationsByIdPatch"];
  };
  "/booking/v1/reservations/{id}/offers": {
    /** Calculates and returns offers for amending a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
    get: operations["BookingReservationsByIdOffersGet"];
  };
  "/booking/v1/reservations/{id}/service-offers": {
    /** Calculates and returns service offers for a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
    get: operations["BookingReservationsByIdService-offersGet"];
  };
  "/booking/v1/reservations/{id}/services": {
    /** Returns the services booked for a specific reservation.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
    get: operations["BookingReservationsByIdServicesGet"];
    /** Removes a service from a reservation. The service will not be removed if it is mandatory, already posted or if the service date is in the past.<br>You must have this scope: 'reservations.manage'. */
    delete: operations["BookingReservationsByIdServicesDelete"];
  };
  "/booking/v1/reservation-actions/{id}/assign-unit": {
    /** Assigns one of the available units to a reservation which is in state 'Confirmed' or 'InHouse'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'. */
    put: operations["BookingReservation-actionsByIdAssign-unitPut"];
  };
  "/booking/v1/reservation-actions/{id}/assign-unit/{unitId}": {
    /** Assigns a specific unit to a reservation which is in state 'Confirmed' or 'InHouse'.<br />If the unit is not available, the call will return an error, and no unit will be assigned.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'. */
    put: operations["BookingReservation-actionsByIdAssign-unitByUnitIdPut"];
  };
  "/booking/v1/reservation-actions/{id}/unassign-units": {
    /**
     * Unassigns units for all time slices of the given reservation. If no units are assigned for the
     * reservation nothing will happen. It will fail for reservations in status 'CheckedOut'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdUnassign-unitsPut"];
  };
  "/booking/v1/reservation-actions/{id}/checkin": {
    /** Check in a specific reservation which is in status 'Confirmed', and has a unit assigned. This changes the status to 'InHouse', and sets the check-in date and time.<br>You must have this scope: 'reservations.manage'. */
    put: operations["BookingReservation-actionsByIdCheckinPut"];
  };
  "/booking/v1/reservation-actions/{id}/checkout": {
    /**
     * Check out a specific reservation which is in status 'InHouse'. This changes the status to 'CheckedOut', and sets the check-out date and time.
     * All open charges on the folio will be posted.
     * <br />
     * Check-out is only possible, if the departure date is not later than tomorrow. Otherwise, first amend the reservation and shorten the stay.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdCheckoutPut"];
  };
  "/booking/v1/reservation-actions/{id}/cancel": {
    /**
     * Cancel a specific reservation which is in status 'Confirmed' and where the arrival time is in the future.
     * This changes the status to 'Canceled', and sets the cancellation date and time.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdCancelPut"];
  };
  "/booking/v1/reservation-actions/{id}/noshow": {
    /**
     * Set a specific reservation to No-show which is in status 'Confirmed' and where the arrival date is in the past.
     * This changes the status to 'NoShow', and sets the no-show date and time.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdNoshowPut"];
  };
  "/booking/v1/reservation-actions/{id}/amend": {
    /**
     * Modifies the stay-related data of a reservation.<br />
     * If a reservation is 'Confirmed', you can change all fields.<br />
     * If a reservation is 'InHouse', only changes to future time slices are possible.<br />
     * Changes to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdAmendPut"];
  };
  "/booking/v1/reservation-actions/{id}/amend/$force": {
    /**
     * Modifies the stay-related data of a reservation.<br />
     * If a reservation is 'Confirmed', you can change all fields.<br />
     * If a reservation is 'InHouse', only changes to future time slices are possible.<br />
     * Changes to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.force-manage'.
     */
    put: operations["BookingReservation-actionsByIdAmend$forcePut"];
  };
  "/booking/v1/reservation-actions/{id}/book-service": {
    /**
     * Use this to book a service for a specific reservation.
     * Please note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdBook-servicePut"];
  };
  "/booking/v1/reservation-actions/{id}/book-service/$force": {
    /**
     * Use this to book a service for a specific reservation.
     * Please note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.
     */
    put: operations["BookingReservation-actionsByIdBook-service$forcePut"];
  };
  "/booking/v1/reservation-actions/{id}/remove-city-tax": {
    /** Use this is you want to remove the city tax from a reservation before the stay.<br>You must have this scope: 'reservations.manage'. */
    put: operations["BookingReservation-actionsByIdRemove-city-taxPut"];
  };
  "/booking/v1/reservation-actions/{id}/add-city-tax": {
    /** Use this if you want to add the city tax to a reservation.<br>You must have this scope: 'reservations.manage'. */
    put: operations["BookingReservation-actionsByIdAdd-city-taxPut"];
  };
  "/booking/v1/types/sources": {
    /** Returns a list of channels that could be used as a source to create bookings. */
    get: operations["BookingTypesSourcesGet"];
  };
}

export interface definitions {
  "ActionModel[BlockAction,NotAllowedBlockActionReason]": {
    action:
      | "Delete"
      | "Confirm"
      | "Release"
      | "Cancel"
      | "Pickup"
      | "Modify"
      | "Wash";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedBlockActionReason]"][];
  };
  "ActionModel[GroupAction,NotAllowedGroupActionReason]": {
    action: "Delete";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedGroupActionReason]"][];
  };
  "ActionModel[ReservationAction,NotAllowedReservationActionReason]": {
    action:
      | "CheckIn"
      | "CheckOut"
      | "Cancel"
      | "AmendTimeSlices"
      | "AmendArrival"
      | "AmendDeparture"
      | "NoShow"
      | "AssignUnit"
      | "UnassignUnit"
      | "RemoveCityTax"
      | "AddCityTax"
      | "RemoveService";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedReservationActionReason]"][];
  };
  "ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]": {
    action: "Amend";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedReservationTimeSliceActionReason]"][];
  };
  "ActionReasonModel[NotAllowedBlockActionReason]": {
    code:
      | "DeleteNotAllowedForBlockWithReservations"
      | "ReleaseNotAllowedForBlockWithReservations"
      | "ReleaseNotAllowedForBlockInThePast"
      | "ReleaseNotAllowedForBlockNotInStatusDefinite"
      | "ConfirmNotAllowedForBlockNotInStatusTentative"
      | "ConfirmNotAllowedForBlockInThePast"
      | "CancelNotAllowedForBlockWithNotCancelledReservations"
      | "CancelNotAllowedForBlockNotInStatusDefiniteOrTentative"
      | "PickupNotAllowedForBlockNotInStatusDefinite"
      | "PickupNotAllowedForBlockInThePast"
      | "PickupNotAllowedForFullyPickedBlock"
      | "ModifyNotAllowedForBlockInThePast"
      | "ModifyNotAllowedForBlockInStatusCanceled"
      | "WashNotAllowedForBlockNotInStatusDefinite"
      | "WashNotAllowedForBlockWithoutReservations";
    message: string;
  };
  "ActionReasonModel[NotAllowedGroupActionReason]": {
    code: "DeleteNotAllowedForGroupWithBlocks";
    message: string;
  };
  "ActionReasonModel[NotAllowedReservationActionReason]": {
    code:
      | "CheckInNotAllowedForReservationNotInStatusConfirmed"
      | "CheckInNotAllowedBeforeArrivalDate"
      | "CheckInNotAllowedAfterDepartureDateTime"
      | "CheckInNotAllowedWithoutUnitAssignedForWholeStay"
      | "CheckOutNotAllowedForReservationNotInStatusInHouse"
      | "CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse"
      | "CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture"
      | "CancelNotAllowedForReservationNotInStatusConfirmed"
      | "AmendNotAllowedForNotAmendableTimeSlices"
      | "AmendArrivalNotAllowedForNotAmendableTimeSlices"
      | "AmendArrivalNotAllowedForReservationNotInStatusConfirmed"
      | "AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse"
      | "AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast"
      | "NoShowNotAllowedForReservationNotInStatusConfirmed"
      | "NoShowNotAllowedBeforeArrivalDate"
      | "AssignUnitNotAllowedForReservationInThePast"
      | "AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse"
      | "UnassignUnitNotAllowedForReservationInThePast"
      | "UnassignUnitNotAllowedForReservationNotInStatusConfirmed"
      | "UnassignUnitNotAllowedForReservationWithoutUnit"
      | "RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse"
      | "RemoveCityTaxNotAllowedForReservationWithPostedCharges"
      | "RemoveCityTaxNotAllowedForReservationWithoutCityTax"
      | "AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse"
      | "AddCityTaxNotAllowedForReservationWithCityTax"
      | "AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax"
      | "AddCityTaxNotAllowedForReservationWithPostedCharges"
      | "RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse"
      | "RemoveServiceNotAllowedForReservationInThePast";
    message: string;
  };
  "ActionReasonModel[NotAllowedReservationTimeSliceActionReason]": {
    code:
      | "AmendNotAllowedWhenTimeSliceIsInThePast"
      | "AmendNotAllowedWhenTimeSliceIsAlreadyPosted"
      | "AmendNotAllowedForReservationInFinalStatus";
    message: string;
  };
  /**
   * @description With this request you can add reservations to an existing booking
   * @example {
   *   "reservations": [
   *     {
   *       "arrival": "2024-03-08",
   *       "departure": "2024-03-10",
   *       "adults": 1,
   *       "comment": "I need a wake up service",
   *       "externalCode": "812864414|381",
   *       "channelCode": "BookingCom",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "guaranteeType": "Prepayment",
   *       "timeSlices": [
   *         {
   *           "ratePlanId": "MUC-NONREF-DBL"
   *         },
   *         {
   *           "ratePlanId": "MUC-NONREF-DBL"
   *         }
   *       ],
   *       "services": [
   *         {
   *           "serviceId": "MUC-BRKF"
   *         },
   *         {
   *           "serviceId": "MUC-YOGA",
   *           "dates": [
   *             {
   *               "serviceDate": "2024-03-09",
   *               "amount": {
   *                 "amount": 35.0,
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         }
   *       ],
   *       "companyId": "UMBRELLA",
   *       "corporateCode": "UMBRELLA-MUC_NONREF_DBL"
   *     },
   *     {
   *       "arrival": "2024-03-09",
   *       "departure": "2024-03-11",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "channelCode": "Direct",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Eric",
   *         "middleInitial": "E",
   *         "lastName": "Steinmetz",
   *         "email": "eric.e@steinmetz.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "guaranteeType": "CreditCard",
   *       "timeSlices": [
   *         {
   *           "ratePlanId": "BER-FLEX-DBL"
   *         },
   *         {
   *           "ratePlanId": "BER-FLEX-DBL"
   *         }
   *       ],
   *       "commission": {
   *         "commissionAmount": {
   *           "amount": 20.0,
   *           "currency": "EUR"
   *         },
   *         "beforeCommissionAmount": {
   *           "amount": 100.0,
   *           "currency": "EUR"
   *         }
   *       }
   *     }
   *   ],
   *   "transactionReference": "RFEUFHEW"
   * }
   */
  AddReservationsModel: {
    /** @description List of reservations to add to the existing booking */
    reservations: definitions["CreateReservationModel"][];
    /**
     * @description The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation.
     * When set, the payment transaction completion is always triggered regardless of the reservation guarantee type and payment automation settings.
     */
    transactionReference?: string;
  };
  /**
   * @example {
   *   "grossAmount": 107.0,
   *   "netAmount": 100.0,
   *   "vatType": "Reduced",
   *   "vatPercent": 7.0,
   *   "currency": "USD"
   * }
   */
  AmountModel: {
    /** Format: double */
    grossAmount: number;
    /** Format: double */
    netAmount: number;
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** Format: double */
    vatPercent: number;
    currency: string;
  };
  /**
   * @example {
   *   "unit": {
   *     "id": "MUC-JQI",
   *     "name": "A.102",
   *     "description": "Double room",
   *     "unitGroupId": "MUC-DBL"
   *   }
   * }
   */
  AssignedUnitModel: {
    unit: definitions["EmbeddedUnitModel"];
  };
  AutoAssignedUnitItemModel: {
    unit: definitions["EmbeddedUnitModel"];
    /**
     * Format: date-time
     * @description The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
  };
  /**
   * @example {
   *   "timeSlices": [
   *     {
   *       "unit": {
   *         "id": "MUC-JQI",
   *         "name": "A.102",
   *         "description": "Double room",
   *         "unitGroupId": "MUC-DBL"
   *       },
   *       "from": "2024-03-06T17:00:00+01:00",
   *       "to": "2024-03-07T11:00:00+01:00"
   *     },
   *     {
   *       "unit": {
   *         "id": "MUC-MTA",
   *         "name": "A.101",
   *         "description": "Single room",
   *         "unitGroupId": "MUC-SGL"
   *       },
   *       "from": "2024-03-07T17:00:00+01:00",
   *       "to": "2024-03-08T11:00:00+01:00"
   *     }
   *   ]
   * }
   */
  AutoAssignedUnitListModel: {
    /** @description The list of time slices with the respective assigned unit */
    timeSlices: definitions["AutoAssignedUnitItemModel"][];
  };
  /**
   * @example {
   *   "id": "MUC-HSGTDG"
   * }
   */
  BlockCreatedModel: {
    /** @description Block id */
    id: string;
  };
  BlockItemModel: {
    /** @description Block id */
    id: string;
    group: definitions["EmbeddedGroupModel"];
    /** @description Status of the block */
    status: "Tentative" | "Definite" | "Canceled";
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    grossDailyRate: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: int32
     * @description Number of reservations already picked from this block
     */
    pickedReservations: number;
    /** @description The promo code associated with a certain special offer used to create the block */
    promoCode?: string;
    /** @description The corporate code associated with a certain special offer used to create the block */
    corporateCode?: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description The list of blocked units for each time slice */
    timeSlices?: definitions["BlockTimeSliceModel"][];
    /** @description The list of actions for this block */
    actions?: definitions["ActionModel[BlockAction,NotAllowedBlockActionReason]"][];
  };
  /**
   * @example {
   *   "blocks": [
   *     {
   *       "id": "MUC-HSGTDG",
   *       "group": {
   *         "id": "XPGMSXGF",
   *         "name": "apaleo Summer Festival 2025"
   *       },
   *       "status": "Tentative",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "grossDailyRate": {
   *         "amount": 160.0,
   *         "currency": "EUR"
   *       },
   *       "from": "2024-03-11T17:00:00+01:00",
   *       "to": "2024-03-12T11:00:00+01:00",
   *       "pickedReservations": 0,
   *       "created": "0001-01-01T00:00:00Z",
   *       "modified": "0001-01-01T00:00:00Z",
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-11T17:00:00+01:00",
   *           "to": "2024-03-12T11:00:00+01:00",
   *           "blockedUnits": 2,
   *           "pickedUnits": 0,
   *           "baseAmount": {
   *             "grossAmount": 115.0,
   *             "netAmount": 100.0,
   *             "vatType": "Special",
   *             "vatPercent": 15.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 120.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ]
   *     },
   *     {
   *       "id": "MUC-JAIULS",
   *       "group": {
   *         "id": "XPGMSXGF",
   *         "name": "apaleo Summer Festival 2025"
   *       },
   *       "status": "Definite",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_DBL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-DBL",
   *         "code": "DBL",
   *         "name": "Double",
   *         "description": "Double",
   *         "type": "BedRoom"
   *       },
   *       "grossDailyRate": {
   *         "amount": 190.0,
   *         "currency": "EUR"
   *       },
   *       "from": "2024-03-11T17:00:00+01:00",
   *       "to": "2024-03-13T11:00:00+01:00",
   *       "pickedReservations": 1,
   *       "created": "0001-01-01T00:00:00Z",
   *       "modified": "0001-01-01T00:00:00Z",
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-11T17:00:00+01:00",
   *           "to": "2024-03-12T11:00:00+01:00",
   *           "blockedUnits": 2,
   *           "pickedUnits": 1,
   *           "baseAmount": {
   *             "grossAmount": 115.0,
   *             "netAmount": 100.0,
   *             "vatType": "Special",
   *             "vatPercent": 15.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 120.0,
   *             "currency": "EUR"
   *           }
   *         },
   *         {
   *           "from": "2024-03-12T17:00:00+01:00",
   *           "to": "2024-03-13T11:00:00+01:00",
   *           "blockedUnits": 3,
   *           "pickedUnits": 1,
   *           "baseAmount": {
   *             "grossAmount": 115.0,
   *             "netAmount": 100.0,
   *             "vatType": "Special",
   *             "vatPercent": 15.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 120.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 2
   * }
   */
  BlockListModel: {
    /** @description List of blocks */
    blocks: definitions["BlockItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "MUC-HSGTDG",
   *   "group": {
   *     "id": "XPGMSXGF",
   *     "name": "apaleo Summer Festival 2025"
   *   },
   *   "status": "Tentative",
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "ratePlan": {
   *     "id": "MUC-NONREF_SGL",
   *     "code": "NONREF",
   *     "name": "Non Refundable",
   *     "description": "Non Refundable",
   *     "isSubjectToCityTax": false
   *   },
   *   "unitGroup": {
   *     "id": "MUC-SGL",
   *     "code": "SGL",
   *     "name": "Single",
   *     "description": "Single",
   *     "type": "BedRoom"
   *   },
   *   "grossDailyRate": {
   *     "amount": 160.0,
   *     "currency": "EUR"
   *   },
   *   "from": "2024-03-11T17:00:00+01:00",
   *   "to": "2024-03-13T11:00:00+01:00",
   *   "pickedReservations": 0,
   *   "created": "0001-01-01T00:00:00Z",
   *   "modified": "0001-01-01T00:00:00Z",
   *   "timeSlices": [
   *     {
   *       "from": "2024-03-11T17:00:00+01:00",
   *       "to": "2024-03-12T11:00:00+01:00",
   *       "blockedUnits": 2,
   *       "pickedUnits": 0,
   *       "baseAmount": {
   *         "grossAmount": 115.0,
   *         "netAmount": 100.0,
   *         "vatType": "Special",
   *         "vatPercent": 15.0,
   *         "currency": "EUR"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 120.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "from": "2024-03-12T17:00:00+01:00",
   *       "to": "2024-03-13T11:00:00+01:00",
   *       "blockedUnits": 3,
   *       "pickedUnits": 0,
   *       "baseAmount": {
   *         "grossAmount": 1071.0,
   *         "netAmount": 900.0,
   *         "vatType": "Special",
   *         "vatPercent": 19.0,
   *         "currency": "EUR"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 120.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ]
   * }
   */
  BlockModel: {
    /** @description Block id */
    id: string;
    group: definitions["EmbeddedGroupModel"];
    /**
     * @description Status of the block. Tentative will just mark inventory as requested, but still allows to sell it
     * through other channels. Definite will block the inventory for selling through other channels
     */
    status: "Tentative" | "Definite" | "Canceled";
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    grossDailyRate: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: int32
     * @description Number of reservations already picked from this block
     */
    pickedReservations: number;
    /** @description The promo code associated with a certain special offer used to create the block */
    promoCode?: string;
    /** @description The corporate code associated with a certain special offer used to create the block */
    corporateCode?: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description The list of time slices for this block */
    timeSlices?: definitions["BlockTimeSliceModel"][];
    /** @description The list of actions for this block */
    actions?: definitions["ActionModel[BlockAction,NotAllowedBlockActionReason]"][];
  };
  BlockTimeSliceModel: {
    /**
     * Format: date-time
     * @description Start date and time from which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description End date and time until which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: int32
     * @description Number of units blocked for this time slice
     */
    blockedUnits: number;
    /**
     * Format: int32
     * @description Number of units which have picked reservations for this time slice
     */
    pickedUnits: number;
    baseAmount: definitions["AmountModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
  };
  /**
   * @example {
   *   "serviceId": "MUC-SPA",
   *   "dates": [
   *     {
   *       "serviceDate": "2024-03-06",
   *       "amount": {
   *         "amount": 25.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "serviceDate": "2024-03-07"
   *     }
   *   ]
   * }
   */
  BookReservationServiceModel: {
    /** @description The id of the service you want to book */
    serviceId: string;
    /**
     * Format: int32
     * @description The number of services to book for each service date. It defaults to the service offer count when not specified.
     */
    count?: number;
    amount?: definitions["MonetaryValueModel"];
    /** @description The optional dates you want to book the service for; if not specified the default service pattern will be used (e.g. whole stay). */
    dates?: definitions["Date"][];
  };
  BookerModel: {
    /** @description Title of the booker */
    title?: "Mr" | "Ms" | "Dr" | "Prof" | "Mrs" | "Other";
    /** @description Gender of the booker */
    gender?: "Female" | "Male" | "Other";
    /** @description First name of the booker */
    firstName?: string;
    /** @description Middle initial of the booker */
    middleInitial?: string;
    /** @description Last name of the booker */
    lastName: string;
    /** @description Email address of the booker */
    email?: string;
    /** @description Phone number of the booker */
    phone?: string;
    address?: definitions["PersonAddressModel"];
    /** @description The booker's nationality, in ISO 3166-1 alpha-2 code */
    nationalityCountryCode?: string;
    /** @description The booker's identification number for the given identificationType. */
    identificationNumber?: string;
    /**
     * Format: date
     * @description The issue date of the booker's identification document.
     * @example 2020-10-10
     */
    identificationIssueDate?: string;
    /**
     * Format: date
     * @description The expiry date of the booker's identification document.
     * @example 2020-10-10
     */
    identificationExpiryDate?: string;
    /** @description The type of the identificationNumber */
    identificationType?:
      | "SocialInsuranceNumber"
      | "PassportNumber"
      | "IdNumber"
      | "DriverLicenseNumber";
    company?: definitions["PersonCompanyModel"];
    /** @description Preferred contact two-letter language code (ISO Alpha-2) */
    preferredLanguage?: string;
    /**
     * Format: date
     * @description Birth date
     * @example 2020-10-10
     */
    birthDate?: string;
    /** @description The place of birth */
    birthPlace?: string;
  };
  /**
   * @example {
   *   "id": "XPGMSXGF",
   *   "reservationIds": [
   *     {
   *       "id": "XPGMSXGF-1"
   *     },
   *     {
   *       "id": "XPGMSXGF-2"
   *     }
   *   ]
   * }
   */
  BookingCreatedModel: {
    /** @description Booking id */
    id: string;
    /** @description List of ids for newly created reservations */
    reservationIds: definitions["ReservationCreatedModel"][];
  };
  /** @description A booking holds all shared metadata for a set of reservations */
  BookingItemModel: {
    /** @description Booking id */
    id: string;
    /** @description Group id */
    groupId?: string;
    booker?: definitions["BookerModel"];
    paymentAccount?: definitions["PaymentAccountModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the booker */
    bookerComment?: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description Reservations within this booking */
    reservations?: definitions["BookingReservationModel"][];
  };
  /**
   * @example {
   *   "bookings": [
   *     {
   *       "id": "XPGMSXGF",
   *       "booker": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 5",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "paymentAccount": {
   *         "accountNumber": "1111",
   *         "accountHolder": "John Doe",
   *         "expiryMonth": "8",
   *         "expiryYear": "2018",
   *         "paymentMethod": "visa",
   *         "payerEmail": "s.hopper@test.com",
   *         "isVirtual": false,
   *         "isActive": false
   *       },
   *       "comment": "The comment from the front desk or reservation office",
   *       "bookerComment": "The comment from the booker provided via the booking channel",
   *       "created": "0001-01-01T00:00:00Z",
   *       "modified": "0001-01-01T00:00:00Z",
   *       "reservations": [
   *         {
   *           "id": "XPGMSXGF-1",
   *           "status": "Confirmed",
   *           "externalCode": "345343345|334",
   *           "channelCode": "BookingCom",
   *           "arrival": "2024-03-08T17:00:00+01:00",
   *           "departure": "2024-03-10T11:00:00+01:00",
   *           "adults": 1,
   *           "childrenAges": [
   *             6
   *           ],
   *           "totalGrossAmount": {
   *             "amount": 130.0,
   *             "currency": "EUR"
   *           },
   *           "property": {
   *             "id": "MUC",
   *             "code": "MUC",
   *             "name": "Demo Hotel Munich",
   *             "description": "This is the demo hotel Munich"
   *           },
   *           "ratePlan": {
   *             "id": "MUC-NONREF_SGL",
   *             "code": "NONREF",
   *             "name": "Non Refundable",
   *             "description": "Non Refundable",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-SGL",
   *             "code": "SGL",
   *             "name": "Single",
   *             "description": "Single",
   *             "type": "BedRoom"
   *           },
   *           "guestComment": "The comment from the guest provided via the booking channel",
   *           "cancellationFee": {
   *             "id": "MUC-FLE",
   *             "code": "FLE",
   *             "name": "Flexible",
   *             "description": "Free cancellation until 36 hours before arrival.",
   *             "dueDateTime": "2024-03-08T17:00:00+01:00",
   *             "fee": {
   *               "amount": 30.0,
   *               "currency": "EUR"
   *             }
   *           },
   *           "noShowFee": {
   *             "id": "MUC-NONREF",
   *             "code": "NONREF",
   *             "name": "Non Refundable",
   *             "description": "No free no-show",
   *             "fee": {
   *               "amount": 130.0,
   *               "currency": "EUR"
   *             }
   *           }
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 1
   * }
   */
  BookingListModel: {
    bookings: definitions["BookingItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @description A booking holds all shared metadata for a set of reservations
   * @example {
   *   "id": "XPGMSXGF",
   *   "booker": {
   *     "title": "Mr",
   *     "gender": "Male",
   *     "firstName": "Jon",
   *     "middleInitial": "D",
   *     "lastName": "Doe",
   *     "email": "john.d@doe.com",
   *     "phone": "+4989123343",
   *     "address": {
   *       "addressLine1": "My Street 5",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     }
   *   },
   *   "paymentAccount": {
   *     "accountNumber": "1111",
   *     "accountHolder": "John Doe",
   *     "expiryMonth": "8",
   *     "expiryYear": "2018",
   *     "paymentMethod": "visa",
   *     "payerEmail": "s.hopper@test.com",
   *     "isVirtual": false,
   *     "isActive": false
   *   },
   *   "comment": "The comment from the front desk or reservation office",
   *   "bookerComment": "The comment from the booker provided via the booking channel",
   *   "created": "0001-01-01T00:00:00Z",
   *   "modified": "0001-01-01T00:00:00Z",
   *   "reservations": [
   *     {
   *       "id": "XPGMSXGF-1",
   *       "status": "Confirmed",
   *       "externalCode": "345343345|334",
   *       "channelCode": "BookingCom",
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "totalGrossAmount": {
   *         "amount": 130.0,
   *         "currency": "EUR"
   *       },
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_DBL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-DBL",
   *         "code": "DBL",
   *         "name": "Double",
   *         "description": "Double",
   *         "type": "BedRoom"
   *       },
   *       "guestComment": "The comment from the guest provided via the booking channel",
   *       "cancellationFee": {
   *         "id": "MUC-FLE",
   *         "code": "FLE",
   *         "name": "Flexible",
   *         "description": "Free cancellation until 36 hours before arrival.",
   *         "dueDateTime": "2024-03-08T17:00:00+01:00",
   *         "fee": {
   *           "amount": 30.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "id": "MUC-NONREF",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 130.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "company": {
   *         "id": "MUC-UMBRELLA",
   *         "code": "UMBRELLA",
   *         "name": "Umbrella Corp.",
   *         "canCheckOutOnAr": true
   *       }
   *     }
   *   ]
   * }
   */
  BookingModel: {
    /** @description Booking id */
    id: string;
    /** @description Group id */
    groupId?: string;
    booker?: definitions["BookerModel"];
    paymentAccount?: definitions["PaymentAccountModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the booker */
    bookerComment?: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description Property specific values like total amount and balance */
    propertyValues?: definitions["PropertyValueModel"][];
    /** @description Reservations within this booking */
    reservations?: definitions["BookingReservationModel"][];
  };
  BookingReservationModel: {
    /** @description Reservation id */
    id: string;
    /** @description Status of the reservation */
    status: "Confirmed" | "InHouse" | "CheckedOut" | "Canceled" | "NoShow";
    /** @description Code in external system */
    externalCode?: string;
    /** @description Channel code */
    channelCode:
      | "Direct"
      | "BookingCom"
      | "Ibe"
      | "ChannelManager"
      | "Expedia"
      | "Homelike"
      | "Hrs"
      | "AltoVita"
      | "DesVu";
    /** @description Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
    source?: string;
    paymentAccount?: definitions["PaymentAccountModel"];
    /**
     * Format: date-time
     * @description Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    arrival: string;
    /**
     * Format: date-time
     * @description Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    departure: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description The ages of the children */
    childrenAges?: number[];
    totalGrossAmount: definitions["MonetaryValueModel"];
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    /** @description The list of additional services (extras, add-ons) reserved for the stay */
    services?: definitions["ReservationServiceItemModel"][];
    /** @description Additional information and comment by the guest */
    guestComment?: string;
    cancellationFee: definitions["ReservationCancellationFeeModel"];
    noShowFee: definitions["ReservationNoShowFeeModel"];
    company?: definitions["EmbeddedCompanyModel"];
  };
  CommissionModel: {
    commissionAmount: definitions["MonetaryValueModel"];
    beforeCommissionAmount?: definitions["MonetaryValueModel"];
  };
  /**
   * @example {
   *   "count": 50
   * }
   */
  CountModel: {
    /** Format: int64 */
    count: number;
  };
  /**
   * @example {
   *   "groupId": "XPGMSXGF",
   *   "ratePlanId": "MUC-NONREF-SGL",
   *   "from": "2024-03-11",
   *   "to": "2024-03-14",
   *   "grossDailyRate": {
   *     "amount": 160.0,
   *     "currency": "EUR"
   *   },
   *   "timeSlices": [
   *     {
   *       "blockedUnits": 3
   *     },
   *     {
   *       "blockedUnits": 0
   *     },
   *     {
   *       "blockedUnits": 7
   *     }
   *   ]
   * }
   */
  CreateBlockModel: {
    /** @description ID of the group that reserved the block */
    groupId: string;
    /** @description The rate plan */
    ratePlanId: string;
    /** @description Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    from: string;
    /** @description End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    to: string;
    grossDailyRate: definitions["MonetaryValueModel"];
    /** @description The list of blocked units for each time slice */
    timeSlices?: definitions["CreateBlockTimeSliceModel"][];
    /**
     * Format: int32
     * @description Number of units to block for the defined time period
     */
    blockedUnits?: number;
    /** @description The promo code associated with a certain special offer */
    promoCode?: string;
    /** @description The corporate code associated with a certain special offer */
    corporateCode?: string;
  };
  CreateBlockTimeSliceModel: {
    /**
     * Format: int32
     * @description Number of units blocked for the time slice
     */
    blockedUnits: number;
  };
  /**
   * @description With this request you can create a booking
   * @example {
   *   "paymentAccount": {
   *     "accountNumber": "1111",
   *     "accountHolder": "John Doe",
   *     "expiryMonth": "8",
   *     "expiryYear": "2018",
   *     "paymentMethod": "visa",
   *     "payerEmail": "s.hopper@test.com",
   *     "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
   *     "isVirtual": false
   *   },
   *   "booker": {
   *     "title": "Mr",
   *     "gender": "Male",
   *     "firstName": "Jon",
   *     "middleInitial": "D",
   *     "lastName": "Doe",
   *     "email": "john.d@doe.com",
   *     "phone": "+4989123343",
   *     "address": {
   *       "addressLine1": "My Street 1",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     }
   *   },
   *   "reservations": [
   *     {
   *       "arrival": "2024-03-08",
   *       "departure": "2024-03-10",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "guestComment": "I need a wake up service",
   *       "channelCode": "Direct",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "guaranteeType": "Prepayment",
   *       "travelPurpose": "Business",
   *       "timeSlices": [
   *         {
   *           "ratePlanId": "MUC-NONREF-FAMILY"
   *         },
   *         {
   *           "ratePlanId": "MUC-NONREF-FAMILY"
   *         }
   *       ],
   *       "services": [
   *         {
   *           "serviceId": "MUC-BRKF"
   *         },
   *         {
   *           "serviceId": "MUC-YOGA",
   *           "dates": [
   *             {
   *               "serviceDate": "2024-03-09",
   *               "amount": {
   *                 "amount": 35.0,
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         }
   *       ],
   *       "prePaymentAmount": {
   *         "amount": 50.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "arrival": "2024-03-09",
   *       "departure": "2024-03-11",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "channelCode": "Direct",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Eric",
   *         "middleInitial": "E",
   *         "lastName": "Steinmetz",
   *         "email": "eric.e@steinmetz.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "guaranteeType": "CreditCard",
   *       "timeSlices": [
   *         {
   *           "ratePlanId": "BER-FLEX-DBL",
   *           "totalAmount": {
   *             "amount": 120.0,
   *             "currency": "EUR"
   *           }
   *         },
   *         {
   *           "ratePlanId": "BER-FLEX-DBL",
   *           "totalAmount": {
   *             "amount": 125.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ],
   *       "companyId": "BER-UMBRELLA",
   *       "commission": {
   *         "commissionAmount": {
   *           "amount": 20.0,
   *           "currency": "EUR"
   *         },
   *         "beforeCommissionAmount": {
   *           "amount": 100.0,
   *           "currency": "EUR"
   *         }
   *       }
   *     }
   *   ],
   *   "transactionReference": "564578124534890J"
   * }
   */
  CreateBookingModel: {
    paymentAccount?: definitions["CreatePaymentAccountModel"];
    booker: definitions["BookerModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comments by the booker */
    bookerComment?: string;
    /** @description List of reservations to create */
    reservations: definitions["CreateReservationModel"][];
    /**
     * @description The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation.
     * When set, the payment transaction completion is always triggered regardless of the reservation guarantee type and payment automation settings.
     */
    transactionReference?: string;
  };
  /**
   * @description With this request you can create a group booking request
   * @example {
   *   "name": "apaleo Summer Festival 2025",
   *   "booker": {
   *     "title": "Mr",
   *     "gender": "Male",
   *     "firstName": "Jon",
   *     "middleInitial": "D",
   *     "lastName": "Doe",
   *     "email": "john.d@doe.com",
   *     "phone": "+4989123343",
   *     "address": {
   *       "addressLine1": "My Street 1",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     }
   *   },
   *   "paymentAccount": {
   *     "accountNumber": "1111",
   *     "accountHolder": "John Doe",
   *     "expiryMonth": "8",
   *     "expiryYear": "2018",
   *     "paymentMethod": "visa",
   *     "payerEmail": "s.hopper@test.com",
   *     "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
   *     "isVirtual": false
   *   },
   *   "propertyIds": [
   *     "MUC"
   *   ]
   * }
   */
  CreateGroupModel: {
    /** @description Name of the group */
    name: string;
    booker: definitions["BookerModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the booker */
    bookerComment?: string;
    paymentAccount?: definitions["CreatePaymentAccountModel"];
    /** @description List of property ids the group booking belongs to */
    propertyIds: string[];
  };
  CreatePaymentAccountModel: {
    /** @description The account number (e.g. masked credit card number or last 4 digits) */
    accountNumber?: string;
    /** @description The account holder (e.g. card holder) */
    accountHolder?: string;
    /** @description The credit card's expiration month */
    expiryMonth?: string;
    /** @description The credit card's expiration year */
    expiryYear?: string;
    /** @description The payment method (e.g. visa) */
    paymentMethod?: string;
    /** @description The email address of the shopper / customer */
    payerEmail?: string;
    /** @description The reference used to uniquely identify the shopper (e.g. user ID or account ID). Used for recurring payments */
    payerReference?: string;
    /** @description Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false' */
    isVirtual?: boolean;
    /** @description A reason why account is inactive when PayerReference was not provided */
    inactiveReason?: string;
  };
  /** @description With this request you can create a reservation */
  CreateReservationModel: {
    /** @description Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    arrival: string;
    /** @description Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    departure: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description Ages of the children */
    childrenAges?: number[];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comments by the guest */
    guestComment?: string;
    /** @description Code in some system */
    externalCode?: string;
    /** @description Channel code */
    channelCode:
      | "Direct"
      | "BookingCom"
      | "Ibe"
      | "ChannelManager"
      | "Expedia"
      | "Homelike"
      | "Hrs"
      | "AltoVita"
      | "DesVu";
    /** @description Source of the reservation */
    source?: string;
    primaryGuest?: definitions["GuestModel"];
    /** @description Additional guests of the reservation. */
    additionalGuests?: definitions["GuestModel"][];
    /**
     * @description The guarantee that has to be applied for this reservation. It has to be the same or stronger than
     * the minimum guarantee required by the selected rate plan
     */
    guaranteeType?: "PM6Hold" | "CreditCard" | "Prepayment" | "Company";
    /** @description Purpose of the trip, leisure or business */
    travelPurpose?: "Business" | "Leisure";
    /**
     * @description Gross prices including services and taxes for each time slice. They will be applied to the reservation timeslices
     * in the order specified from arrival to departure
     */
    timeSlices: definitions["CreateReservationTimeSliceModel"][];
    /** @description Additional services (extras, add-ons) that should be added to the reservation */
    services?: definitions["BookReservationServiceModel"][];
    /** @description Set this if this reservation belongs to a company */
    companyId?: string;
    /** @description Corporate code provided during creation. Used to find offers during amend. */
    corporateCode?: string;
    prePaymentAmount?: definitions["MonetaryValueModel"];
    commission?: definitions["CommissionModel"];
    /** @description The promo code associated with a certain special offer */
    promoCode?: string;
  };
  CreateReservationTimeSliceModel: {
    /** @description The rate plan id for this time slice */
    ratePlanId: string;
    totalAmount?: definitions["MonetaryValueModel"];
  };
  Date: {
    /**
     * Format: date
     * @description The date the service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: int32
     * @description The number of services to book for this date. It defaults to the service offer count when not specified.
     */
    count?: number;
    amount?: definitions["MonetaryValueModel"];
  };
  /**
   * @example {
   *   "arrival": "2024-03-08T17:00:00+01:00",
   *   "departure": "2024-03-10T11:00:00+01:00",
   *   "adults": 1,
   *   "childrenAges": [
   *     6
   *   ],
   *   "requote": false,
   *   "timeSlices": [
   *     {
   *       "ratePlanId": "MUC-NONREF-DBL",
   *       "totalGrossAmount": {
   *         "amount": 86.00,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "ratePlanId": "MUC-NONREF-DBL",
   *       "totalGrossAmount": {
   *         "amount": 101.00,
   *         "currency": "EUR"
   *       }
   *     }
   *   ]
   * }
   */
  DesiredStayDetailsModel: {
    /** @description Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    arrival: string;
    /** @description Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    departure: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description Ages of the children */
    childrenAges?: number[];
    /**
     * @description Whether the prices for time slices with no change to the rate plan should be re-quoted based on current prices, or if
     * only additions like change of number of adults should be calculated. Defaults to 'false'.
     */
    requote?: boolean;
    /** @description The list of time slices */
    timeSlices: definitions["DesiredTimeSliceModel"][];
  };
  DesiredTimeSliceModel: {
    /** @description The rate plan id for this time slice */
    ratePlanId: string;
    totalGrossAmount?: definitions["MonetaryValueModel"];
  };
  EmbeddedCompanyModel: {
    /** @description The company ID */
    id: string;
    /** @description The code of the company */
    code?: string;
    /** @description The name of the company */
    name?: string;
    /** @description Whether or not the company can check out on AR */
    canCheckOutOnAr?: boolean;
  };
  EmbeddedGroupModel: {
    /** @description Group booking id */
    id: string;
    /** @description Name of the group */
    name?: string;
  };
  EmbeddedMarketSegmentModel: {
    /** @description The market segment id */
    id: string;
    /** @description The market segment code */
    code: string;
    /** @description The market segment name */
    name: string;
  };
  EmbeddedPropertyModel: {
    /** @description The property id */
    id: string;
    /** @description The code for the property that can be shown in reports and table views */
    code?: string;
    /** @description The name for the property */
    name?: string;
    /** @description The description for the property */
    description?: string;
  };
  EmbeddedRatePlanModel: {
    /** @description The rate plan id */
    id: string;
    /** @description The code for the rate plan that can be shown in reports and table views */
    code?: string;
    /** @description The name for the rate plan */
    name?: string;
    /** @description The description for the rate plan */
    description?: string;
    /** @description Whether the rate plan is subject to city tax or not */
    isSubjectToCityTax: boolean;
  };
  EmbeddedServiceModel: {
    /** @description The service id */
    id: string;
    /** @description The code for the service */
    code?: string;
    /** @description The name for the service */
    name?: string;
    /** @description The description for the service */
    description?: string;
  };
  EmbeddedUnitGroupModel: {
    /** @description The unit group id */
    id: string;
    /** @description The code for the unit group that can be shown in reports and table views */
    code?: string;
    /** @description The name for the unit group */
    name?: string;
    /** @description The description for the unit group */
    description?: string;
    /** @description The unit group type */
    type?: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
  };
  EmbeddedUnitModel: {
    /** @description The unit id */
    id: string;
    /** @description The name for the unit */
    name?: string;
    /** @description The description for the unit */
    description?: string;
    /** @description The unit group id */
    unitGroupId?: string;
  };
  GroupBlockModel: {
    /** @description Block id */
    id: string;
    /** @description Status of the block */
    status: "Tentative" | "Definite" | "Canceled";
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    grossDailyRate: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: int32
     * @description Number of units blocked
     */
    blockedUnits: number;
    /**
     * Format: int32
     * @description Number of reservations already picked from this block
     */
    pickedReservations: number;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
  };
  /**
   * @example {
   *   "id": "XPGMSXGF"
   * }
   */
  GroupCreatedModel: {
    /** @description Id of newly created group booking */
    id: string;
  };
  GroupItemModel: {
    /** @description Group id */
    id: string;
    /**
     * Format: date-time
     * @description Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from?: string;
    /**
     * Format: date-time
     * @description End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to?: string;
    /** @description Name of the group */
    name: string;
    booker?: definitions["BookerModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the booker */
    bookerComment?: string;
    paymentAccount?: definitions["PaymentAccountModel"];
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description Blocks within this group */
    blocks?: definitions["GroupBlockModel"][];
    /** @description The list of actions for this group */
    actions?: definitions["ActionModel[GroupAction,NotAllowedGroupActionReason]"][];
    /** @description The list of property ids this group belongs to */
    propertyIds: string[];
  };
  /**
   * @example {
   *   "groups": [
   *     {
   *       "id": "XPGMSXGF",
   *       "name": "apaleo Summer Festival 2025",
   *       "booker": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 5",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "paymentAccount": {
   *         "accountNumber": "1111",
   *         "accountHolder": "John Doe",
   *         "expiryMonth": "8",
   *         "expiryYear": "2018",
   *         "paymentMethod": "visa",
   *         "payerEmail": "s.hopper@test.com",
   *         "isVirtual": false,
   *         "isActive": false
   *       },
   *       "created": "0001-01-01T00:00:00Z",
   *       "modified": "0001-01-01T00:00:00Z",
   *       "propertyIds": [
   *         "MUC"
   *       ]
   *     }
   *   ],
   *   "count": 1
   * }
   */
  GroupListModel: {
    groups: definitions["GroupItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "XPGMSXGF",
   *   "name": "apaleo Summer Festival 2025",
   *   "from": "2024-03-11T15:35:59.8074838+01:00",
   *   "to": "2024-03-18T15:35:59.8074838+01:00",
   *   "booker": {
   *     "title": "Mr",
   *     "gender": "Male",
   *     "firstName": "Jon",
   *     "middleInitial": "D",
   *     "lastName": "Doe",
   *     "email": "john.d@doe.com",
   *     "phone": "+4989123343",
   *     "address": {
   *       "addressLine1": "My Street 5",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     }
   *   },
   *   "paymentAccount": {
   *     "accountNumber": "1111",
   *     "accountHolder": "John Doe",
   *     "expiryMonth": "8",
   *     "expiryYear": "2018",
   *     "paymentMethod": "visa",
   *     "payerEmail": "s.hopper@test.com",
   *     "isVirtual": false,
   *     "isActive": false
   *   },
   *   "created": "0001-01-01T00:00:00Z",
   *   "modified": "0001-01-01T00:00:00Z",
   *   "blocks": [
   *     {
   *       "id": "MUC-HSGTDG",
   *       "status": "Tentative",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "grossDailyRate": {
   *         "amount": 160.0,
   *         "currency": "EUR"
   *       },
   *       "from": "2024-03-11T15:35:59.8074838+01:00",
   *       "to": "2024-03-16T15:35:59.8074838+01:00",
   *       "blockedUnits": 10,
   *       "pickedReservations": 0,
   *       "created": "2024-03-06T15:35:59.8074838+01:00",
   *       "modified": "2024-03-06T15:35:59.8074838+01:00"
   *     },
   *     {
   *       "id": "MUC-JAIULS",
   *       "status": "Definite",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_DBL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-DBL",
   *         "code": "DBL",
   *         "name": "Double",
   *         "description": "Double",
   *         "type": "BedRoom"
   *       },
   *       "grossDailyRate": {
   *         "amount": 190.0,
   *         "currency": "EUR"
   *       },
   *       "from": "2024-03-12T15:35:59.8074838+01:00",
   *       "to": "2024-03-18T15:35:59.8074838+01:00",
   *       "blockedUnits": 8,
   *       "pickedReservations": 3,
   *       "created": "2024-03-06T15:35:59.8074838+01:00",
   *       "modified": "2024-03-06T15:35:59.8074838+01:00"
   *     }
   *   ],
   *   "propertyIds": [
   *     "MUC"
   *   ]
   * }
   */
  GroupModel: {
    /** @description Group id */
    id: string;
    /** @description Name of the group */
    name: string;
    /**
     * Format: date-time
     * @description Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from?: string;
    /**
     * Format: date-time
     * @description End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to?: string;
    booker?: definitions["BookerModel"];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the booker */
    bookerComment?: string;
    paymentAccount?: definitions["PaymentAccountModel"];
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /** @description Blocks within this group */
    blocks?: definitions["GroupBlockModel"][];
    /** @description The list of actions for this group */
    actions?: definitions["ActionModel[GroupAction,NotAllowedGroupActionReason]"][];
    /** @description The list of property ids this group belongs to */
    propertyIds: string[];
  };
  GuestModel: {
    /** @description Title of the guest */
    title?: "Mr" | "Ms" | "Dr" | "Prof" | "Mrs" | "Other";
    /** @description Gender of the booker */
    gender?: "Female" | "Male" | "Other";
    /** @description First name of the guest */
    firstName?: string;
    /** @description Middle initial of the guest */
    middleInitial?: string;
    /** @description Last name of the guest */
    lastName: string;
    /** @description Email address of the guest */
    email?: string;
    /** @description Phone number of the guest */
    phone?: string;
    address?: definitions["PersonAddressModel"];
    /** @description The guest's nationality, in ISO 3166-1 alpha-2 code */
    nationalityCountryCode?: string;
    /** @description The guest's identification number for the given identificationType. */
    identificationNumber?: string;
    /**
     * Format: date
     * @description The issue date of the guest's identification document.
     * @example 2020-10-10
     */
    identificationIssueDate?: string;
    /**
     * Format: date
     * @description The expiry date of the guest's identification document.
     * @example 2020-10-10
     */
    identificationExpiryDate?: string;
    /** @description The type of the identificationNumber */
    identificationType?:
      | "SocialInsuranceNumber"
      | "PassportNumber"
      | "IdNumber"
      | "DriverLicenseNumber";
    company?: definitions["PersonCompanyModel"];
    /** @description Two-letter code (ISO Alpha-2) of a language preferred for contact */
    preferredLanguage?: string;
    /**
     * Format: date
     * @description Guest's birthdate
     * @example 2020-10-10
     */
    birthDate?: string;
    /** @description Guest's place of birth */
    birthPlace?: string;
  };
  MessageItemCollection: {
    messages?: string[];
  };
  MonetaryValueModel: {
    /** Format: double */
    amount: number;
    currency: string;
  };
  OfferCancellationFeeModel: {
    /** @description The code of the cancellation policy applied */
    code: string;
    /** @description The name of the cancellation policy applied */
    name: string;
    /** @description The description of the cancellation policy applied */
    description: string;
    /**
     * Format: date-time
     * @description The date and time the cancellation fee will be due. After that time this fee will
     * be charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    dueDateTime: string;
    fee: definitions["MonetaryValueModel"];
  };
  OfferCityTaxItemModel: {
    /**
     * Format: date
     * @description The date for this city tax
     * @example 2020-10-10
     */
    serviceDate: string;
    amount: definitions["AmountModel"];
  };
  OfferCityTaxModel: {
    /** @description The id of the city tax */
    id: string;
    /** @description The code of the city tax */
    code: string;
    /** @description The name for the city tax */
    name: string;
    totalGrossAmount: definitions["MonetaryValueModel"];
    /** @description Split per day for the city tax */
    dates: definitions["OfferCityTaxItemModel"][];
  };
  OfferFeeModel: {
    /** @description The fee id */
    id: string;
    /** @description The code for the fee */
    code: string;
    /** @description The name for the fee */
    name: string;
    totalAmount: definitions["AmountModel"];
  };
  OfferModel: {
    /**
     * Format: date-time
     * @description The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    arrival: string;
    /**
     * Format: date-time
     * @description The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    departure: string;
    unitGroup: definitions["OfferUnitGroupModel"];
    /** @description The minimum guarantee type for this offer */
    minGuaranteeType: "PM6Hold" | "CreditCard" | "Prepayment" | "Company";
    /**
     * Format: int32
     * @description The number of available units for that offer
     */
    availableUnits: number;
    ratePlan: definitions["EmbeddedRatePlanModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    cancellationFee: definitions["OfferCancellationFeeModel"];
    noShowFee: definitions["OfferNoShowFeeModel"];
    /** @description The breakdown for each time slice for this offer */
    timeSlices: definitions["OfferTimeSliceModel"][];
    /** @description The list of the mandatory services for this offer. Such services will be automatically booked when booking this offer */
    services?: definitions["ServiceOfferModel"][];
    /** @description The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.StayOffer.OfferModel.TotalGrossAmount when creating the booking */
    fees?: definitions["OfferFeeModel"][];
    /** @description Tax breakdown, displaying net and tax amount for each VAT type */
    taxDetails: definitions["TaxDetailModel"][];
    /** @description Validation rules that were applied to the offer and show the reason why the offer is not bookable */
    validationMessages?: definitions["OfferValidationMessageModel"][];
    /** @description ID of the company the offer is created for */
    companyId?: string;
    /** @description The corporate rate code the offer is created for */
    corporateCode?: string;
    /** @description Whether the offer is for a corporate rate plan */
    isCorporate: boolean;
    prePaymentAmount: definitions["MonetaryValueModel"];
    /** @description Details of city taxes for this offer, if any */
    cityTaxes?: definitions["OfferCityTaxModel"][];
  };
  OfferNoShowFeeModel: {
    /** @description The code of the no-show policy applied */
    code: string;
    /** @description The name of the no-show policy applied */
    name: string;
    /** @description The description of the no-show policy applied */
    description: string;
    fee: definitions["MonetaryValueModel"];
  };
  OfferServiceModel: {
    service: definitions["EmbeddedServiceModel"];
    /**
     * Format: date
     * @description The date this service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: int32
     * @description The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.
     */
    count: number;
    /**
     * Format: int32
     * @description If set - the number of services available (only for the limited service).
     * If not set - the service is unlimited.
     */
    availableCount?: number;
    amount: definitions["AmountModel"];
    /** @description Whether the service price is included in or added to the base rate */
    pricingMode: "Included" | "Additional";
  };
  OfferTimeSliceModel: {
    /**
     * Format: date-time
     * @description The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: int32
     * @description The number of available units for that time slice
     */
    availableUnits: number;
    baseAmount: definitions["AmountModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    /** @description The breakdown for services included in the offer */
    includedServices?: definitions["OfferServiceModel"][];
  };
  OfferUnitGroupModel: {
    /** @description The unit group id */
    id: string;
    /** @description The code for the unit group that can be shown in reports and table views */
    code: string;
    /** @description The name for the unit group */
    name: string;
    /** @description The description for the unit group */
    description: string;
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group
     */
    maxPersons: number;
    /**
     * Format: int32
     * @description The unit group rank
     */
    rank?: number;
    /** @description The unit group type */
    type: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
  };
  OfferValidationMessageModel: {
    /** @description The message Code */
    code:
      | "UnitGroupFullyBooked"
      | "UnitGroupCapacityExceeded"
      | "RatePlanRestrictionsViolated"
      | "RatePlanSurchargesNotSet"
      | "RateRestrictionsViolated"
      | "RatePlanChannelNotSet"
      | "RatesNotSet"
      | "BlockFullyBooked"
      | "IncludedServicesAmountExceededRateAmount"
      | "ServiceFullyBooked";
    /** @description The message description */
    message: string;
  };
  Operation: {
    value?: unknown;
    path?: string;
    op?: string;
    from?: string;
  };
  PayableAmountModel: {
    guest: definitions["MonetaryValueModel"];
  };
  PaymentAccountModel: {
    /** @description The account number (e.g. masked credit card number or last 4 digits) */
    accountNumber?: string;
    /** @description The account holder (e.g. card holder) */
    accountHolder?: string;
    /** @description The credit card's expiration month */
    expiryMonth?: string;
    /** @description The credit card's expiration year */
    expiryYear?: string;
    /** @description The payment method (e.g. visa) */
    paymentMethod?: string;
    /** @description The email address of the shopper / customer */
    payerEmail?: string;
    /**
     * @description The payer reference. It is used to make recurring captures and its usage is allowed only in the scope of the booking.
     * For the reason above this is a write-only field.
     */
    payerReference?: string;
    /** @description Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false' */
    isVirtual?: boolean;
    /** @description Indicates if the payment account can be used for capturing payments. A payment account is active, when it has a valid payer reference set */
    isActive: boolean;
    /** @description A reason why account is inactive */
    inactiveReason?: string;
  };
  PerOccupancyPriceItemModel: {
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    price: definitions["PriceModel"];
  };
  PeriodModel: {
    /**
     * Format: int64
     * @description The number of hours within the period
     */
    hours?: number;
    /**
     * Format: int32
     * @description The number of days within the period
     */
    days?: number;
    /**
     * Format: int32
     * @description The number of months within the period
     */
    months?: number;
  };
  PersonAddressModel: {
    addressLine1?: string;
    addressLine2?: string;
    postalCode?: string;
    city?: string;
    regionCode?: string;
    countryCode?: string;
  };
  PersonCompanyModel: {
    /** @description Name of the company */
    name?: string;
    /** @description Tax or Vat ID of the company */
    taxId?: string;
  };
  /** @description With this request you can pick up a reservation */
  PickUpReservationModel: {
    /** @description ID of the block */
    blockId: string;
    /** @description Additional services (extras, add-ons) that should be added to the reservation */
    services?: definitions["BookReservationServiceModel"][];
    /** @description Date of arrival and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    arrival: string;
    /** @description Date of departure and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    departure: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description The ages of the children */
    childrenAges?: number[];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the guest */
    guestComment?: string;
    primaryGuest?: definitions["GuestModel"];
    /** @description Additional guests of the reservation. */
    additionalGuests?: definitions["GuestModel"][];
    /** @description The purpose of the trip, leisure or business */
    travelPurpose?: "Business" | "Leisure";
  };
  /**
   * @description With this request you can pick up reservations to an existing group booking
   * @example {
   *   "reservations": [
   *     {
   *       "blockId": "MUC-QJNXJR",
   *       "arrival": "2024-03-08",
   *       "departure": "2024-03-10",
   *       "adults": 1,
   *       "comment": "I need a wake up service",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         },
   *         "company": {
   *           "name": "Company GmbH",
   *           "taxId": "1442"
   *         }
   *       }
   *     },
   *     {
   *       "blockId": "MUC-WKMCKT",
   *       "arrival": "2024-03-09",
   *       "departure": "2024-03-11",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Eric",
   *         "middleInitial": "E",
   *         "lastName": "Steinmetz",
   *         "email": "eric.e@steinmetz.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 1",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       }
   *     }
   *   ]
   * }
   */
  PickUpReservationsModel: {
    /** @description List of reservations to pick up to the existing group booking */
    reservations: definitions["PickUpReservationModel"][];
  };
  /**
   * @example {
   *   "grossAmount": 100.0,
   *   "beforeTax": 91.57,
   *   "afterTax": 101.71,
   *   "taxes": {
   *     "tax": 8.43,
   *     "cityTax": 1.71
   *   },
   *   "currency": "USD"
   * }
   */
  PriceModel: {
    /**
     * Format: double
     * @description Price including all included services and VAT - <b>DEPRECATED: This field will be removed soon, use BeforeTax + Taxes.Tax instead</b>
     */
    grossAmount: number;
    /**
     * Format: double
     * @description Price including all included services without VAT or any other taxes like city tax
     */
    beforeTax: number;
    /**
     * Format: double
     * @description Price including all included services, VAT and any other taxes like city tax
     */
    afterTax: number;
    taxes: definitions["TaxesModel"];
    /** @description The currency for all prices and tax details */
    currency: string;
  };
  PropertyValueModel: {
    property: definitions["EmbeddedPropertyModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    balance: definitions["MonetaryValueModel"];
  };
  RateRestrictionsModel: {
    /**
     * Format: int32
     * @description The minimum length of stay in order to book the rate. If at least this number
     * of time slices are covered by the stay duration the rate will be offered.
     */
    minLengthOfStay?: number;
    /**
     * Format: int32
     * @description The maximum length of stay in order to book the rate. If not more than this number
     * of time slices are covered by the stay duration the rate will be offered.
     */
    maxLengthOfStay?: number;
    /** @description Whether the rate can be booked for a stay-through reservation */
    closed: boolean;
    /** @description Whether the rate can be booked on the reservation's arrival date */
    closedOnArrival: boolean;
    /** @description Whether the rate can be booked on the reservation's departure date */
    closedOnDeparture: boolean;
  };
  /**
   * @example {
   *   "from": "2024-03-11",
   *   "to": "2024-03-14",
   *   "grossDailyRate": {
   *     "amount": 160.0,
   *     "currency": "EUR"
   *   },
   *   "timeSlices": [
   *     {
   *       "blockedUnits": 3
   *     },
   *     {
   *       "blockedUnits": 0
   *     },
   *     {
   *       "blockedUnits": 7
   *     }
   *   ]
   * }
   */
  ReplaceBlockModel: {
    /** @description Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    from: string;
    /** @description End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    to: string;
    grossDailyRate: definitions["MonetaryValueModel"];
    /** @description The list of time slices */
    timeSlices: definitions["CreateBlockTimeSliceModel"][];
  };
  ReservationAssignedUnitModel: {
    unit: definitions["EmbeddedUnitModel"];
    /** @description The time ranges for which the unit is assigned to the reservation */
    timeRanges: definitions["ReservationAssignedUnitTimeRangeModel"][];
  };
  ReservationAssignedUnitTimeRangeModel: {
    /**
     * Format: date-time
     * @description The start date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description The end date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
  };
  ReservationCancellationFeeModel: {
    /** @description The id of the cancellation policy applied */
    id: string;
    /** @description The code of the cancellation policy applied */
    code: string;
    /** @description The name of the cancellation policy applied */
    name: string;
    /** @description The description of the cancellation policy applied */
    description: string;
    /**
     * Format: date-time
     * @description The date and time the cancellation fee will be due. After that time this fee will
     * be charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    dueDateTime: string;
    fee: definitions["MonetaryValueModel"];
  };
  ReservationCreatedModel: {
    /** @description Id of the reservation */
    id: string;
  };
  ReservationItemModel: {
    /** @description Reservation id */
    id: string;
    /** @description Booking id */
    bookingId: string;
    /** @description Block id */
    blockId?: string;
    /** @description Name of the group */
    groupName?: string;
    /** @description Status of the reservation */
    status: "Confirmed" | "InHouse" | "CheckedOut" | "Canceled" | "NoShow";
    /**
     * Format: date-time
     * @description Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    checkInTime?: string;
    /**
     * Format: date-time
     * @description Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    checkOutTime?: string;
    /**
     * Format: date-time
     * @description Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    cancellationTime?: string;
    /**
     * Format: date-time
     * @description Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    noShowTime?: string;
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    unit?: definitions["EmbeddedUnitModel"];
    marketSegment?: definitions["EmbeddedMarketSegmentModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    arrival: string;
    /**
     * Format: date-time
     * @description Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    departure: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description The ages of the children */
    childrenAges?: number[];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the guest */
    guestComment?: string;
    /** @description Code in external system */
    externalCode?: string;
    /** @description Channel code */
    channelCode:
      | "Direct"
      | "BookingCom"
      | "Ibe"
      | "ChannelManager"
      | "Expedia"
      | "Homelike"
      | "Hrs"
      | "AltoVita"
      | "DesVu";
    /** @description Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
    source?: string;
    primaryGuest?: definitions["GuestModel"];
    /** @description Additional guests of the reservation. */
    additionalGuests?: definitions["GuestModel"][];
    booker?: definitions["BookerModel"];
    paymentAccount?: definitions["PaymentAccountModel"];
    /** @description The strongest guarantee for the rate plans booked in this reservation */
    guaranteeType: "PM6Hold" | "CreditCard" | "Prepayment" | "Company" | "Ota";
    cancellationFee: definitions["ReservationCancellationFeeModel"];
    noShowFee: definitions["ReservationNoShowFeeModel"];
    /** @description The purpose of the trip, leisure or business */
    travelPurpose?: "Business" | "Leisure";
    balance: definitions["MonetaryValueModel"];
    /** @description The list of units assigned to this reservation */
    assignedUnits?: definitions["ReservationAssignedUnitModel"][];
    /** @description The list of time slices with the reserved units / unit groups for the stay */
    timeSlices?: definitions["TimeSliceModel"][];
    /** @description The list of additional services (extras, add-ons) reserved for the stay */
    services?: definitions["ReservationServiceItemModel"][];
    /**
     * @description Validation rules are applied to reservations during their lifetime.
     * For example a reservation that was created while the house or unit group is already fully booked.
     * Whenever a rule was or is currently violated, a validation message will be added to this list.
     * They can be deleted whenever the hotel staff worked them off.
     */
    validationMessages?: definitions["ReservationValidationMessageModel"][];
    /** @description The list of actions for this reservation */
    actions?: definitions["ActionModel[ReservationAction,NotAllowedReservationActionReason]"][];
    company?: definitions["EmbeddedCompanyModel"];
    /** @description Corporate code provided during creation. Used to find offers during amend. */
    corporateCode?: string;
    /** @description Whether all folios of a reservation have an invoice */
    allFoliosHaveInvoice?: boolean;
    /** @description Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured */
    hasCityTax: boolean;
    commission?: definitions["CommissionModel"];
    /** @description The promo code associated with a certain special offer used to create the reservation */
    promoCode?: string;
  };
  /**
   * @example {
   *   "reservations": [
   *     {
   *       "id": "XPGMSXGF-1",
   *       "bookingId": "XPGMSXGF",
   *       "status": "Confirmed",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "unit": {
   *         "id": "MUC-MTA",
   *         "name": "A.101",
   *         "description": "Single room",
   *         "unitGroupId": "MUC-SGL"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 110.0,
   *         "currency": "EUR"
   *       },
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "created": "2024-03-06T15:35:59.8074838+01:00",
   *       "modified": "2024-03-06T15:35:59.8074838+01:00",
   *       "adults": 1,
   *       "channelCode": "Direct",
   *       "primaryGuest": {
   *         "title": "Mr",
   *         "gender": "Male",
   *         "firstName": "Jon",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "john.d@doe.com",
   *         "phone": "+4989123343",
   *         "address": {
   *           "addressLine1": "My Street 3",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "paymentAccount": {
   *         "accountNumber": "1111",
   *         "accountHolder": "John Doe",
   *         "expiryMonth": "8",
   *         "expiryYear": "2018",
   *         "paymentMethod": "visa",
   *         "payerEmail": "s.hopper@test.com",
   *         "isVirtual": false,
   *         "isActive": false
   *       },
   *       "guaranteeType": "CreditCard",
   *       "cancellationFee": {
   *         "id": "MUC-NONREF",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "100% of the accommodation.",
   *         "dueDateTime": "2024-03-06T15:35:59.8074838+01:00",
   *         "fee": {
   *           "amount": 110.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "id": "MUC-NOSHOW",
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 110.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "balance": {
   *         "amount": -110.0,
   *         "currency": "EUR"
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-08T17:00:00+01:00",
   *           "to": "2024-03-09T17:00:00+01:00",
   *           "serviceDate": "2024-03-08",
   *           "ratePlan": {
   *             "id": "MUC-NONREF_SGL",
   *             "code": "NONREF",
   *             "name": "Non Refundable",
   *             "description": "Non Refundable",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-SGL",
   *             "code": "SGL",
   *             "name": "Single",
   *             "description": "Single",
   *             "type": "BedRoom"
   *           },
   *           "unit": {
   *             "id": "MUC-MTA",
   *             "name": "A.101",
   *             "description": "Single room",
   *             "unitGroupId": "MUC-SGL"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 65.0,
   *             "netAmount": 60.75,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 86.0,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-BRKF",
   *                 "code": "BRKF",
   *                 "name": "Breakfast",
   *                 "description": "Best breakfast on this side of the Weißwurstäquator."
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 0,
   *               "amount": {
   *                 "grossAmount": 9.99,
   *                 "netAmount": 8.39,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false
   *             }
   *           ]
   *         }
   *       ],
   *       "company": {
   *         "id": "MUC-UMBRELLA",
   *         "code": "UMBRELLA",
   *         "name": "Umbrella Corp.",
   *         "canCheckOutOnAr": false
   *       },
   *       "corporateCode": "UMBRELLA-DBL",
   *       "allFoliosHaveInvoice": false,
   *       "hasCityTax": false
   *     },
   *     {
   *       "id": "APFDRQSX-1",
   *       "bookingId": "APFDRQSX",
   *       "status": "CheckedOut",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "ratePlan": {
   *         "id": "MUC-FLEX_DBL",
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Flexible",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-DBL",
   *         "code": "DBL",
   *         "name": "Double",
   *         "description": "Double",
   *         "type": "BedRoom"
   *       },
   *       "unit": {
   *         "id": "MUC-JQI",
   *         "name": "A.102",
   *         "description": "Double room",
   *         "unitGroupId": "MUC-DBL"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 120.0,
   *         "currency": "EUR"
   *       },
   *       "arrival": "2024-03-11T15:35:59.8074838+01:00",
   *       "departure": "2024-03-13T15:35:59.8074838+01:00",
   *       "created": "2024-03-06T15:35:59.8074838+01:00",
   *       "modified": "2024-03-06T15:35:59.8074838+01:00",
   *       "adults": 1,
   *       "childrenAges": [
   *         6
   *       ],
   *       "channelCode": "Direct",
   *       "primaryGuest": {
   *         "title": "Ms",
   *         "gender": "Female",
   *         "firstName": "Jane",
   *         "middleInitial": "D",
   *         "lastName": "Doe",
   *         "email": "jane.d@doe.com",
   *         "phone": "+4989123789",
   *         "address": {
   *           "addressLine1": "My Street 5",
   *           "postalCode": "12453",
   *           "city": "MyCity",
   *           "countryCode": "GB"
   *         }
   *       },
   *       "guaranteeType": "CreditCard",
   *       "cancellationFee": {
   *         "id": "MUC-FLEX",
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Free cancellation.",
   *         "dueDateTime": "2024-03-08T17:00:00+01:00",
   *         "fee": {
   *           "amount": 120.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "id": "MUC-NOSHOW",
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 120.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "balance": {
   *         "amount": -120.0,
   *         "currency": "EUR"
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-11T15:35:59.8074838+01:00",
   *           "to": "2024-03-12T15:35:59.8074838+01:00",
   *           "serviceDate": "2024-03-11",
   *           "ratePlan": {
   *             "id": "MUC-FLEX_DBL",
   *             "code": "FLEX",
   *             "name": "Flexible",
   *             "description": "Flexible",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-DBL",
   *             "code": "DBL",
   *             "name": "Double",
   *             "description": "Double",
   *             "type": "BedRoom"
   *           },
   *           "unit": {
   *             "id": "MUC-JQI",
   *             "name": "A.102",
   *             "description": "Double room",
   *             "unitGroupId": "MUC-DBL"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 65.0,
   *             "netAmount": 60.75,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 86.0,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-BRKF",
   *                 "code": "BRKF",
   *                 "name": "Breakfast",
   *                 "description": "Best breakfast on this side of the Weißwurstäquator."
   *               },
   *               "serviceDate": "2024-03-11",
   *               "count": 0,
   *               "amount": {
   *                 "grossAmount": 9.99,
   *                 "netAmount": 8.39,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false
   *             }
   *           ]
   *         },
   *         {
   *           "from": "2024-03-12T15:35:59.8074838+01:00",
   *           "to": "2024-03-13T15:35:59.8074838+01:00",
   *           "serviceDate": "2024-03-12",
   *           "ratePlan": {
   *             "id": "MUC-FLEX_DBL",
   *             "code": "FLEX",
   *             "name": "Flexible",
   *             "description": "Flexible",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-DBL",
   *             "code": "DBL",
   *             "name": "Double",
   *             "description": "Double",
   *             "type": "BedRoom"
   *           },
   *           "unit": {
   *             "id": "MUC-JQI",
   *             "name": "A.102",
   *             "description": "Double room",
   *             "unitGroupId": "MUC-DBL"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 65.0,
   *             "netAmount": 60.75,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 86.0,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-BRKF",
   *                 "code": "BRKF",
   *                 "name": "Breakfast",
   *                 "description": "Best breakfast on this side of the Weißwurstäquator."
   *               },
   *               "serviceDate": "2024-03-12",
   *               "count": 0,
   *               "amount": {
   *                 "grossAmount": 9.99,
   *                 "netAmount": 8.39,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false
   *             }
   *           ]
   *         }
   *       ],
   *       "validationMessages": [
   *         {
   *           "category": "OfferNotAvailable",
   *           "code": "RatePlanRestrictionsViolated",
   *           "message": "The restrictions of the rate plan are not considered"
   *         }
   *       ],
   *       "allFoliosHaveInvoice": false,
   *       "hasCityTax": true,
   *       "commission": {
   *         "commissionAmount": {
   *           "amount": 10.0,
   *           "currency": "EUR"
   *         },
   *         "beforeCommissionAmount": {
   *           "amount": 100.0,
   *           "currency": "EUR"
   *         }
   *       }
   *     }
   *   ],
   *   "count": 0
   * }
   */
  ReservationListModel: {
    /** @description List of reservations */
    reservations: definitions["ReservationItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "XPGMSXGF-1",
   *   "bookingId": "XPGMSXGF",
   *   "status": "Confirmed",
   *   "unit": {
   *     "id": "MUC-MTA",
   *     "name": "A.101",
   *     "description": "Single room",
   *     "unitGroupId": "MUC-SGL"
   *   },
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "ratePlan": {
   *     "id": "MUC-NONREF_SGL",
   *     "code": "NONREF",
   *     "name": "Non Refundable",
   *     "description": "Non Refundable",
   *     "isSubjectToCityTax": false
   *   },
   *   "unitGroup": {
   *     "id": "MUC-SGL",
   *     "code": "SGL",
   *     "name": "Single",
   *     "description": "Single",
   *     "type": "BedRoom"
   *   },
   *   "totalGrossAmount": {
   *     "amount": 222.0,
   *     "currency": "EUR"
   *   },
   *   "arrival": "2024-03-08T17:00:00+01:00",
   *   "departure": "2024-03-10T11:00:00+01:00",
   *   "created": "2024-03-06T15:35:59.8074838+01:00",
   *   "modified": "2024-03-06T15:35:59.8074838+01:00",
   *   "adults": 1,
   *   "childrenAges": [
   *     6
   *   ],
   *   "externalCode": "812864414|369",
   *   "channelCode": "BookingCom",
   *   "primaryGuest": {
   *     "title": "Mr",
   *     "gender": "Male",
   *     "firstName": "Jon",
   *     "middleInitial": "D",
   *     "lastName": "Doe",
   *     "email": "john.d@doe.com",
   *     "phone": "+4989123343",
   *     "address": {
   *       "addressLine1": "My Street 5",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     }
   *   },
   *   "paymentAccount": {
   *     "accountNumber": "1111",
   *     "accountHolder": "John Doe",
   *     "expiryMonth": "8",
   *     "expiryYear": "2018",
   *     "paymentMethod": "visa",
   *     "payerEmail": "s.hopper@test.com",
   *     "isVirtual": false,
   *     "isActive": false
   *   },
   *   "timeSlices": [
   *     {
   *       "from": "2024-03-08T17:00:00+01:00",
   *       "to": "2024-03-09T11:00:00+01:00",
   *       "serviceDate": "2024-03-08",
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "unit": {
   *         "id": "MUC-MTA",
   *         "name": "A.101",
   *         "description": "Single room",
   *         "unitGroupId": "MUC-SGL"
   *       },
   *       "baseAmount": {
   *         "grossAmount": 65.0,
   *         "netAmount": 60.75,
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "currency": "EUR"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 86.0,
   *         "currency": "EUR"
   *       },
   *       "includedServices": [
   *         {
   *           "service": {
   *             "id": "MUC-BRKF",
   *             "code": "BRKF",
   *             "name": "Breakfast",
   *             "description": "Best breakfast on this side of the Weißwurstäquator."
   *           },
   *           "serviceDate": "2024-03-09",
   *           "count": 0,
   *           "amount": {
   *             "grossAmount": 9.99,
   *             "netAmount": 8.39,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "bookedAsExtra": false
   *         }
   *       ]
   *     },
   *     {
   *       "from": "2024-03-09T17:00:00+01:00",
   *       "to": "2024-03-10T11:00:00+01:00",
   *       "serviceDate": "2024-03-09",
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "unit": {
   *         "id": "MUC-MTA",
   *         "name": "A.101",
   *         "description": "Single room",
   *         "unitGroupId": "MUC-SGL"
   *       },
   *       "baseAmount": {
   *         "grossAmount": 91.01,
   *         "netAmount": 85.06,
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "currency": "EUR"
   *       },
   *       "totalGrossAmount": {
   *         "amount": 101.0,
   *         "currency": "EUR"
   *       },
   *       "includedServices": [
   *         {
   *           "service": {
   *             "id": "MUC-BRKF",
   *             "code": "BRKF",
   *             "name": "Breakfast",
   *             "description": "Best breakfast on this side of the Weißwurstäquator."
   *           },
   *           "serviceDate": "2024-03-10",
   *           "count": 0,
   *           "amount": {
   *             "grossAmount": 9.99,
   *             "netAmount": 8.39,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "bookedAsExtra": false
   *         }
   *       ]
   *     }
   *   ],
   *   "guaranteeType": "CreditCard",
   *   "cancellationFee": {
   *     "id": "MUC-FLEX",
   *     "code": "FLEX",
   *     "name": "Flexible",
   *     "description": "Free cancellation.",
   *     "dueDateTime": "2024-03-08T17:00:00+01:00",
   *     "fee": {
   *       "amount": 202.0,
   *       "currency": "EUR"
   *     }
   *   },
   *   "noShowFee": {
   *     "id": "MUC-NOSHOW",
   *     "code": "NOSHOW",
   *     "name": "Non Refundable",
   *     "description": "No free no-show",
   *     "fee": {
   *       "amount": 202.0,
   *       "currency": "EUR"
   *     }
   *   },
   *   "balance": {
   *     "amount": -222.0,
   *     "currency": "EUR"
   *   },
   *   "validationMessages": [
   *     {
   *       "category": "OfferNotAvailable",
   *       "code": "RatePlanRestrictionsViolated",
   *       "message": "The restrictions of the rate plan are not considered"
   *     }
   *   ],
   *   "company": {
   *     "id": "MUC-UMBRELLA",
   *     "code": "UMBRELLA",
   *     "name": "Umbrella Corp.",
   *     "canCheckOutOnAr": false
   *   },
   *   "corporateCode": "UMBRELLA_DBL",
   *   "allFoliosHaveInvoice": false,
   *   "taxDetails": [
   *     {
   *       "vatType": "Null",
   *       "vatPercent": 0.0,
   *       "net": {
   *         "amount": 10.0,
   *         "currency": "EUR"
   *       },
   *       "tax": {
   *         "amount": 10.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "hasCityTax": true,
   *   "commission": {
   *     "commissionAmount": {
   *       "amount": 10.0,
   *       "currency": "EUR"
   *     },
   *     "beforeCommissionAmount": {
   *       "amount": 100.0,
   *       "currency": "EUR"
   *     }
   *   },
   *   "payableAmount": {
   *     "guest": {
   *       "amount": 10.0,
   *       "currency": "EUR"
   *     }
   *   }
   * }
   */
  ReservationModel: {
    /** @description Reservation id */
    id: string;
    /** @description Booking id */
    bookingId: string;
    /** @description Block id */
    blockId?: string;
    /** @description Name of the group */
    groupName?: string;
    /** @description Status of the reservation */
    status: "Confirmed" | "InHouse" | "CheckedOut" | "Canceled" | "NoShow";
    /**
     * Format: date-time
     * @description Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    checkInTime?: string;
    /**
     * Format: date-time
     * @description Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    checkOutTime?: string;
    /**
     * Format: date-time
     * @description Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    cancellationTime?: string;
    /**
     * Format: date-time
     * @description Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    noShowTime?: string;
    unit?: definitions["EmbeddedUnitModel"];
    property: definitions["EmbeddedPropertyModel"];
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    arrival: string;
    /**
     * Format: date-time
     * @description Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    departure: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    modified: string;
    /**
     * Format: int32
     * @description Number of adults
     */
    adults: number;
    /** @description The ages of the children */
    childrenAges?: number[];
    /** @description Additional information and comments */
    comment?: string;
    /** @description Additional information and comment by the guest */
    guestComment?: string;
    /** @description Code in external system */
    externalCode?: string;
    /** @description Channel code */
    channelCode:
      | "Direct"
      | "BookingCom"
      | "Ibe"
      | "ChannelManager"
      | "Expedia"
      | "Homelike"
      | "Hrs"
      | "AltoVita"
      | "DesVu";
    /** @description Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
    source?: string;
    primaryGuest?: definitions["GuestModel"];
    /** @description Additional guests of the reservation. */
    additionalGuests?: definitions["GuestModel"][];
    booker?: definitions["BookerModel"];
    paymentAccount?: definitions["PaymentAccountModel"];
    /** @description The list of time slices with the reserved units / unit groups for the stay */
    timeSlices?: definitions["TimeSliceModel"][];
    /** @description The list of additional services (extras, add-ons) reserved for the stay */
    services?: definitions["ReservationServiceItemModel"][];
    /** @description The strongest guarantee for the rate plans booked in this reservation */
    guaranteeType: "PM6Hold" | "CreditCard" | "Prepayment" | "Company" | "Ota";
    cancellationFee: definitions["ReservationCancellationFeeModel"];
    noShowFee: definitions["ReservationNoShowFeeModel"];
    /** @description The purpose of the trip, leisure or business */
    travelPurpose?: "Business" | "Leisure";
    balance: definitions["MonetaryValueModel"];
    /** @description The list of units assigned to this reservation */
    assignedUnits?: definitions["ReservationAssignedUnitModel"][];
    /**
     * @description Validation rules are applied to reservations during their lifetime.
     * For example a reservation that was created while the house or unit group is already fully booked.
     * Whenever a rule was or is currently violated, a validation message will be added to this list.
     * They can be deleted whenever the hotel staff worked them off.
     */
    validationMessages?: definitions["ReservationValidationMessageModel"][];
    /** @description The list of actions for this reservation */
    actions?: definitions["ActionModel[ReservationAction,NotAllowedReservationActionReason]"][];
    company?: definitions["EmbeddedCompanyModel"];
    /** @description Corporate code provided during creation. Used to find offers during amend. */
    corporateCode?: string;
    /** @description Whether all folios of a reservation have an invoice */
    allFoliosHaveInvoice?: boolean;
    /** @description Tax breakdown, displaying net and tax amount for each VAT type */
    taxDetails: definitions["TaxDetailModel"][];
    /** @description Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured */
    hasCityTax: boolean;
    commission?: definitions["CommissionModel"];
    /** @description The promo code associated with a certain special offer used to create the reservation */
    promoCode?: string;
    payableAmount: definitions["PayableAmountModel"];
    marketSegment?: definitions["EmbeddedMarketSegmentModel"];
  };
  ReservationNoShowFeeModel: {
    /** @description The id of the no-show policy applied */
    id: string;
    /** @description The code of the no-show policy applied */
    code: string;
    /** @description The name of the no-show policy applied */
    name: string;
    /** @description The description of the no-show policy applied */
    description: string;
    fee: definitions["MonetaryValueModel"];
  };
  ReservationServiceItemModel: {
    service: definitions["ServiceModel"];
    totalAmount: definitions["AmountModel"];
    /** @description The dates the service will be delivered with its price */
    dates: definitions["ServiceDateItemModel"][];
  };
  /**
   * @example {
   *   "services": [
   *     {
   *       "service": {
   *         "id": "MUC-YOGA",
   *         "code": "YOGA",
   *         "name": "Sun Salutation",
   *         "description": "Start the day with a private Yoga session with one of our certified trainers.",
   *         "pricingUnit": "Person",
   *         "defaultGrossPrice": {
   *           "amount": 35.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "totalAmount": {
   *         "grossAmount": 30.0,
   *         "netAmount": 25.0,
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "currency": "EUR"
   *       },
   *       "dates": [
   *         {
   *           "serviceDate": "2024-03-06",
   *           "count": 1,
   *           "amount": {
   *             "grossAmount": 30.0,
   *             "netAmount": 25.0,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "isMandatory": false
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 1
   * }
   */
  ReservationServiceListModel: {
    /** @description The list of services booked for the reservation */
    services: definitions["ReservationServiceItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  ReservationServiceModel: {
    service: definitions["EmbeddedServiceModel"];
    /**
     * Format: date
     * @description The date this service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: int32
     * @description The count of booked services
     */
    count: number;
    amount: definitions["AmountModel"];
    /** @description Whether this service is already booked as extra */
    bookedAsExtra: boolean;
  };
  ReservationStayOfferModel: {
    /**
     * Format: date-time
     * @description The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    arrival: string;
    /**
     * Format: date-time
     * @description The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    departure: string;
    /** @description The minimum guarantee type for this offer */
    minGuaranteeType: "PM6Hold" | "CreditCard" | "Prepayment" | "Company";
    /**
     * Format: int32
     * @description The number of available units for that offer
     */
    availableUnits: number;
    totalGrossAmount: definitions["MonetaryValueModel"];
    cancellationFee: definitions["OfferCancellationFeeModel"];
    noShowFee: definitions["OfferNoShowFeeModel"];
    /** @description The breakdown for each time slice for this offer */
    timeSlices: definitions["ReservationStayOfferTimeSliceModel"][];
    /** @description The breakdown for extra services reserved for this offer */
    services?: definitions["ServiceOfferModel"][];
    /** @description Tax breakdown, displaying net and tax amount for each VAT type */
    taxDetails: definitions["TaxDetailModel"][];
    /** @description Validation rules that were applied to the offer and show the reason why the offer is not bookable */
    validationMessages?: definitions["OfferValidationMessageModel"][];
    /** @description ID of the company the offer is created for */
    companyId?: string;
    /** @description The corporate rate code the offer is created for */
    corporateCode?: string;
    /** @description Whether the offer is for a corporate rate plan */
    isCorporate: boolean;
    /** @description Details of city taxes for this offer, if any */
    cityTaxes?: definitions["OfferCityTaxModel"][];
  };
  ReservationStayOfferServiceModel: {
    service: definitions["EmbeddedServiceModel"];
    /**
     * Format: date
     * @description The date this service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: int32
     * @description The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.
     */
    count: number;
    /**
     * Format: int32
     * @description If set - the number of services available (only for the limited service).
     * If not set - the service is unlimited.
     */
    availableCount?: number;
    amount: definitions["AmountModel"];
    /** @description Whether this service is already booked as extra */
    bookedAsExtra: boolean;
    /** @description Whether the service price is included in or added to the base rate */
    pricingMode: "Included" | "Additional";
  };
  ReservationStayOfferTimeSliceModel: {
    /**
     * Format: date-time
     * @description The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["OfferUnitGroupModel"];
    baseAmount: definitions["AmountModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    /** @description The breakdown for services included in the offer */
    includedServices?: definitions["ReservationStayOfferServiceModel"][];
  };
  /**
   * @example {
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "offers": [
   *     {
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "minGuaranteeType": "PM6Hold",
   *       "availableUnits": 4,
   *       "totalGrossAmount": {
   *         "amount": 214.0,
   *         "currency": "EUR"
   *       },
   *       "cancellationFee": {
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Free cancellation.",
   *         "dueDateTime": "2024-03-08T17:00:00+01:00",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-08T17:00:00+01:00",
   *           "to": "2024-03-09T11:00:00+01:00",
   *           "ratePlan": {
   *             "id": "MUC-FLEX_DBL",
   *             "code": "FLEX",
   *             "name": "Flexible",
   *             "description": "Flexible",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-DBL",
   *             "code": "DBL",
   *             "name": "Double",
   *             "description": "Double",
   *             "maxPersons": 2,
   *             "rank": 1,
   *             "type": "BedRoom"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 40.00,
   *             "netAmount": 37.38,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 50.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Included"
   *             }
   *           ]
   *         },
   *         {
   *           "from": "2024-03-09T11:00:00+01:00",
   *           "to": "2024-03-10T11:00:00+01:00",
   *           "ratePlan": {
   *             "id": "MUC-NONREF_SGL",
   *             "code": "NONREF",
   *             "name": "Non Refundable",
   *             "description": "Non Refundable",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-SGL",
   *             "code": "SGL",
   *             "name": "Standard",
   *             "description": "Standard",
   *             "maxPersons": 1,
   *             "rank": 2,
   *             "type": "BedRoom"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 59.00,
   *             "netAmount": 55.14,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 69.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Included"
   *             },
   *             {
   *               "service": {
   *                 "id": "MUC-CLEANING"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 2,
   *               "amount": {
   *                 "grossAmount": 25.0,
   *                 "netAmount": 21.0,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Additional"
   *             }
   *           ]
   *         }
   *       ],
   *       "services": [
   *         {
   *           "service": {
   *             "id": "MUC-BRKF",
   *             "code": "BRKF",
   *             "name": "Breakfast",
   *             "description": "Best breakfast on this side of the Weißwurstäquator.",
   *             "pricingUnit": "Person",
   *             "defaultGrossPrice": {
   *               "amount": 10.0,
   *               "currency": "EUR"
   *             }
   *           },
   *           "count": 1,
   *           "totalAmount": {
   *             "grossAmount": 11.9,
   *             "netAmount": 10.0,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "prePaymentAmount": {
   *             "amount": 27.0,
   *             "currency": "EUR"
   *           },
   *           "dates": [
   *             {
   *               "serviceDate": "2024-03-09",
   *               "amount": {
   *                 "grossAmount": 11.9,
   *                 "netAmount": 10.0,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "isDefaultDate": false,
   *               "isMandatory": false
   *             }
   *           ]
   *         }
   *       ],
   *       "taxDetails": [
   *         {
   *           "vatType": "Normal",
   *           "vatPercent": 14.0,
   *           "net": {
   *             "amount": 200.0,
   *             "currency": "EUR"
   *           },
   *           "tax": {
   *             "amount": 14.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ],
   *       "isCorporate": false,
   *       "cityTaxes": [
   *         {
   *           "id": "MUC",
   *           "code": "MUC",
   *           "name": "Munich City Tax",
   *           "totalGrossAmount": {
   *             "amount": 11.9,
   *             "currency": "EUR"
   *           },
   *           "dates": [
   *             {
   *               "serviceDate": "2024-03-09",
   *               "amount": {
   *                 "grossAmount": 11.9,
   *                 "netAmount": 10.0,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         }
   *       ]
   *     },
   *     {
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "minGuaranteeType": "PM6Hold",
   *       "availableUnits": 8,
   *       "totalGrossAmount": {
   *         "amount": 214.0,
   *         "currency": "EUR"
   *       },
   *       "cancellationFee": {
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Free cancellation.",
   *         "dueDateTime": "2024-03-08T17:00:00+01:00",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-08T17:00:00+01:00",
   *           "to": "2024-03-09T11:00:00+01:00",
   *           "ratePlan": {
   *             "id": "MUC-FLEX_DBL",
   *             "code": "FLEX",
   *             "name": "Flexible",
   *             "description": "Flexible",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-DBL",
   *             "code": "DBL",
   *             "name": "Double",
   *             "description": "Double",
   *             "maxPersons": 2,
   *             "rank": 1,
   *             "type": "BedRoom"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 90.00,
   *             "netAmount": 84.11,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 100.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Included"
   *             }
   *           ]
   *         },
   *         {
   *           "from": "2024-03-09T11:00:00+01:00",
   *           "to": "2024-03-10T11:00:00+01:00",
   *           "ratePlan": {
   *             "id": "MUC-NONREF_SGL",
   *             "code": "NONREF",
   *             "name": "Non Refundable",
   *             "description": "Non Refundable",
   *             "isSubjectToCityTax": false
   *           },
   *           "unitGroup": {
   *             "id": "MUC-SGL",
   *             "code": "SGL",
   *             "name": "Standard",
   *             "description": "Standard",
   *             "maxPersons": 1,
   *             "rank": 2,
   *             "type": "BedRoom"
   *           },
   *           "baseAmount": {
   *             "grossAmount": 124.00,
   *             "netAmount": 115.89,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 134.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Included"
   *             },
   *             {
   *               "service": {
   *                 "id": "MUC-CLEANING"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 2,
   *               "amount": {
   *                 "grossAmount": 25.0,
   *                 "netAmount": 21.0,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "bookedAsExtra": false,
   *               "pricingMode": "Additional"
   *             }
   *           ]
   *         }
   *       ],
   *       "taxDetails": [
   *         {
   *           "vatType": "Reduced",
   *           "vatPercent": 14.0,
   *           "net": {
   *             "amount": 100.0,
   *             "currency": "EUR"
   *           },
   *           "tax": {
   *             "amount": 14.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ],
   *       "isCorporate": false
   *     }
   *   ]
   * }
   */
  ReservationStayOffersModel: {
    property: definitions["EmbeddedPropertyModel"];
    /** @description List of offered unit groups with rates */
    offers: definitions["ReservationStayOfferModel"][];
  };
  ReservationValidationMessageModel: {
    /** @description The message category */
    category: "OfferNotAvailable" | "AutoUnitAssignment";
    /** @description The message Code */
    code:
      | "UnitGroupFullyBooked"
      | "UnitGroupCapacityExceeded"
      | "RatePlanRestrictionsViolated"
      | "RatePlanSurchargesNotSet"
      | "RateRestrictionsViolated"
      | "RatePlanChannelNotSet"
      | "RatesNotSet"
      | "BlockFullyBooked"
      | "UnitMoved"
      | "IncludedServicesAmountExceededRateAmount"
      | "RatePlanCompanyRestrictionsViolated"
      | "ServiceFullyBooked";
    /** @description The message description */
    message: string;
  };
  /**
   * @example {
   *   "reservationIds": [
   *     {
   *       "id": "XPGMSXGF-1"
   *     },
   *     {
   *       "id": "XPGMSXGF-2"
   *     }
   *   ]
   * }
   */
  ReservationsCreatedModel: {
    /** @description List of ids for newly created reservations */
    reservationIds: definitions["ReservationCreatedModel"][];
  };
  ServiceDateItemModel: {
    /**
     * Format: date
     * @description The date this service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: int32
     * @description The count of booked services
     */
    count: number;
    amount: definitions["AmountModel"];
    /**
     * @description Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.
     * They are marked as mandatory and they cannot be removed.
     */
    isMandatory: boolean;
  };
  ServiceModel: {
    /** @description The service id */
    id: string;
    /** @description The code for the service */
    code: string;
    /** @description The name for the service */
    name: string;
    /** @description The description for the service */
    description: string;
    /** @description Defines the granularity (room, person) for which this item is offered and priced */
    pricingUnit: "Room" | "Person";
    defaultGrossPrice: definitions["MonetaryValueModel"];
  };
  ServiceOfferItemModel: {
    /**
     * Format: date
     * @description The date this service is delivered
     * @example 2020-10-10
     */
    serviceDate: string;
    amount: definitions["AmountModel"];
    /**
     * @description Depending on the postNextDay setting of the service it will by default be posted before or after midnight.
     * Breakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day
     * are default dates and will have this flag set to true. Those are also the dates the service will be booked for if
     * you do not specify dates in the book-service call. Still, you can override this and also book the dates set to IsDefaultDate = false.
     */
    isDefaultDate: boolean;
    /**
     * @description Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.
     * They are marked as mandatory and they cannot be removed.
     */
    isMandatory: boolean;
    /**
     * Format: int32
     * @description The number of services available.
     */
    availableCount?: number;
  };
  ServiceOfferModel: {
    service: definitions["ServiceModel"];
    /**
     * Format: int32
     * @description The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.
     */
    count: number;
    /**
     * Format: int32
     * @description The number of services available.
     */
    availableCount?: number;
    totalAmount: definitions["AmountModel"];
    prePaymentAmount: definitions["MonetaryValueModel"];
    /** @description The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.ServiceOffer.ServiceOfferModel.TotalAmount when booking the service */
    fees?: definitions["OfferFeeModel"][];
    /** @description The dates the service will be delivered with its price */
    dates: definitions["ServiceOfferItemModel"][];
    /** @description Validation rules that were applied to the offer and show the reason why the offer is not bookable */
    validationMessages?: definitions["OfferValidationMessageModel"][];
  };
  /**
   * @example {
   *   "services": [
   *     {
   *       "service": {
   *         "id": "MUC-WLAN",
   *         "code": "WLAN",
   *         "name": "High-Speed WLAN",
   *         "description": "Upgrade the complimentary internet access to a high speed connection.",
   *         "pricingUnit": "Room",
   *         "defaultGrossPrice": {
   *           "amount": 5.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "count": 1,
   *       "availableCount": 2,
   *       "totalAmount": {
   *         "grossAmount": 20.0,
   *         "netAmount": 16.8,
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "currency": "EUR"
   *       },
   *       "prePaymentAmount": {
   *         "amount": 20.0,
   *         "currency": "EUR"
   *       },
   *       "dates": [
   *         {
   *           "serviceDate": "2024-03-06",
   *           "amount": {
   *             "grossAmount": 10.0,
   *             "netAmount": 8.4,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "isDefaultDate": false,
   *           "isMandatory": false,
   *           "availableCount": 5
   *         },
   *         {
   *           "serviceDate": "2024-03-07",
   *           "amount": {
   *             "grossAmount": 10.0,
   *             "netAmount": 8.4,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "isDefaultDate": false,
   *           "isMandatory": false,
   *           "availableCount": 2
   *         }
   *       ]
   *     },
   *     {
   *       "service": {
   *         "id": "MUC-YOGA",
   *         "code": "YOGA",
   *         "name": "Sun Salutation",
   *         "description": "Start the day with a private Yoga session with one of our certified trainers.",
   *         "pricingUnit": "Person",
   *         "defaultGrossPrice": {
   *           "amount": 35.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "count": 1,
   *       "totalAmount": {
   *         "grossAmount": 30.0,
   *         "netAmount": 25.2,
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "currency": "EUR"
   *       },
   *       "prePaymentAmount": {
   *         "amount": 30.0,
   *         "currency": "EUR"
   *       },
   *       "dates": [
   *         {
   *           "serviceDate": "2024-03-07",
   *           "amount": {
   *             "grossAmount": 30.0,
   *             "netAmount": 25.2,
   *             "vatType": "Normal",
   *             "vatPercent": 19.0,
   *             "currency": "EUR"
   *           },
   *           "isDefaultDate": false,
   *           "isMandatory": false
   *         }
   *       ]
   *     }
   *   ]
   * }
   */
  ServiceOffersModel: {
    services: definitions["ServiceOfferModel"][];
  };
  /**
   * @example {
   *   "sources": [
   *     "Booking.com",
   *     "Expedia"
   *   ]
   * }
   */
  SourceListModel: {
    /** @description List of sources. */
    sources: string[];
  };
  /**
   * @example {
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "offers": [
   *     {
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Standard",
   *         "description": "Standard",
   *         "maxPersons": 1,
   *         "rank": 2,
   *         "type": "BedRoom"
   *       },
   *       "minGuaranteeType": "PM6Hold",
   *       "availableUnits": 4,
   *       "ratePlan": {
   *         "id": "MUC-NONREF_SGL",
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Non Refundable",
   *         "isSubjectToCityTax": false
   *       },
   *       "totalGrossAmount": {
   *         "amount": 214.0,
   *         "currency": "EUR"
   *       },
   *       "cancellationFee": {
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Free cancellation.",
   *         "dueDateTime": "2024-03-08T17:00:00+01:00",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 214.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-08T17:00:00+01:00",
   *           "to": "2024-03-09T11:00:00+01:00",
   *           "availableUnits": 4,
   *           "baseAmount": {
   *             "grossAmount": 59.00,
   *             "netAmount": 55.14,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 50.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Included"
   *             }
   *           ]
   *         },
   *         {
   *           "from": "2024-03-09T11:00:00+01:00",
   *           "to": "2024-03-10T11:00:00+01:00",
   *           "availableUnits": 5,
   *           "baseAmount": {
   *             "grossAmount": 59.00,
   *             "netAmount": 55.14,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 50.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Included"
   *             },
   *             {
   *               "service": {
   *                 "id": "MUC-CLEANING"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 2,
   *               "amount": {
   *                 "grossAmount": 25.0,
   *                 "netAmount": 21.01,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Additional"
   *             }
   *           ]
   *         }
   *       ],
   *       "taxDetails": [
   *         {
   *           "vatType": "Reduced",
   *           "vatPercent": 14.0,
   *           "net": {
   *             "amount": 100.0,
   *             "currency": "EUR"
   *           },
   *           "tax": {
   *             "amount": 14.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ],
   *       "isCorporate": false,
   *       "prePaymentAmount": {
   *         "amount": 0.0,
   *         "currency": "EUR"
   *       },
   *       "cityTaxes": [
   *         {
   *           "id": "MUC-TAX",
   *           "code": "TAX",
   *           "name": "City tax",
   *           "totalGrossAmount": {
   *             "amount": 119.0,
   *             "currency": "EUR"
   *           },
   *           "dates": [
   *             {
   *               "serviceDate": "2021-08-27",
   *               "amount": {
   *                 "grossAmount": 119.0,
   *                 "netAmount": 100.0,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         }
   *       ]
   *     },
   *     {
   *       "arrival": "2024-03-08T17:00:00+01:00",
   *       "departure": "2024-03-10T11:00:00+01:00",
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Standard",
   *         "description": "Standard",
   *         "maxPersons": 1,
   *         "rank": 2,
   *         "type": "BedRoom"
   *       },
   *       "minGuaranteeType": "Prepayment",
   *       "availableUnits": 4,
   *       "ratePlan": {
   *         "id": "MUC-FLEX_SGL",
   *         "code": "FLEX",
   *         "name": "Flexible",
   *         "description": "Flexible",
   *         "isSubjectToCityTax": false
   *       },
   *       "totalGrossAmount": {
   *         "amount": 321.0,
   *         "currency": "EUR"
   *       },
   *       "cancellationFee": {
   *         "code": "NONREF",
   *         "name": "Non Refundable",
   *         "description": "Full stay amount due 24 hours after booking.",
   *         "dueDateTime": "2024-03-07T15:35:59.8074838+01:00",
   *         "fee": {
   *           "amount": 321.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "noShowFee": {
   *         "code": "NOSHOW",
   *         "name": "Non Refundable",
   *         "description": "No free no-show",
   *         "fee": {
   *           "amount": 107.0,
   *           "currency": "EUR"
   *         }
   *       },
   *       "timeSlices": [
   *         {
   *           "from": "2024-03-08T17:00:00+01:00",
   *           "to": "2024-03-09T11:00:00+01:00",
   *           "availableUnits": 4,
   *           "baseAmount": {
   *             "grossAmount": 124.00,
   *             "netAmount": 115.89,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 100.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Included"
   *             }
   *           ]
   *         },
   *         {
   *           "from": "2024-03-09T11:00:00+01:00",
   *           "to": "2024-03-10T11:00:00+01:00",
   *           "availableUnits": 5,
   *           "baseAmount": {
   *             "grossAmount": 124.00,
   *             "netAmount": 115.89,
   *             "vatType": "Reduced",
   *             "vatPercent": 7.0,
   *             "currency": "EUR"
   *           },
   *           "totalGrossAmount": {
   *             "amount": 100.00,
   *             "currency": "EUR"
   *           },
   *           "includedServices": [
   *             {
   *               "service": {
   *                 "id": "MUC-WLAN"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 5,
   *               "amount": {
   *                 "grossAmount": 10.0,
   *                 "netAmount": 8.4,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Included"
   *             },
   *             {
   *               "service": {
   *                 "id": "MUC-CLEANING"
   *               },
   *               "serviceDate": "2024-03-08",
   *               "count": 1,
   *               "availableCount": 2,
   *               "amount": {
   *                 "grossAmount": 25.0,
   *                 "netAmount": 21.01,
   *                 "vatType": "Normal",
   *                 "vatPercent": 19.0,
   *                 "currency": "EUR"
   *               },
   *               "pricingMode": "Additional"
   *             }
   *           ]
   *         }
   *       ],
   *       "taxDetails": [
   *         {
   *           "vatType": "Reduced",
   *           "vatPercent": 14.0,
   *           "net": {
   *             "amount": 100.0,
   *             "currency": "EUR"
   *           },
   *           "tax": {
   *             "amount": 14.0,
   *             "currency": "EUR"
   *           }
   *         },
   *         {
   *           "vatType": "Null",
   *           "vatPercent": 0.0,
   *           "net": {
   *             "amount": 100.0,
   *             "currency": "EUR"
   *           },
   *           "tax": {
   *             "amount": 0.0,
   *             "currency": "EUR"
   *           }
   *         }
   *       ],
   *       "isCorporate": false,
   *       "prePaymentAmount": {
   *         "amount": 321.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ]
   * }
   */
  StayOffersModel: {
    property: definitions["EmbeddedPropertyModel"];
    /** @description List of offered unit groups with rates */
    offers: definitions["OfferModel"][];
  };
  TaxDetailModel: {
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** Format: double */
    vatPercent: number;
    net: definitions["MonetaryValueModel"];
    tax: definitions["MonetaryValueModel"];
  };
  TaxesModel: {
    /**
     * Format: double
     * @description The amount of taxes, which are VAT or Sales Taxes depending on the country of the property
     */
    tax: number;
    /**
     * Format: double
     * @description The amount of City Tax including VAT
     */
    cityTax: number;
  };
  TimeSliceItemModel: {
    /**
     * Format: date-time
     * @description Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /** @description List of offers for this time slice */
    offers?: definitions["TimeSliceOfferItemModel"][];
  };
  /**
   * @example {
   *   "timeSlices": [
   *     {
   *       "from": "2024-03-06T17:00:00+01:00",
   *       "to": "2024-03-07T11:00:00+01:00",
   *       "offers": [
   *         {
   *           "unitGroup": {
   *             "id": "MUC-SGL",
   *             "code": "SGL",
   *             "name": "Single",
   *             "description": "Single",
   *             "type": "BedRoom"
   *           },
   *           "minGuaranteeType": "PM6Hold",
   *           "available": 4,
   *           "availableUnits": 0,
   *           "restrictions": {
   *             "minLengthOfStay": 2,
   *             "maxLengthOfStay": 30,
   *             "closed": false,
   *             "closedOnArrival": true,
   *             "closedOnDeparture": true
   *           },
   *           "prices": [
   *             {
   *               "adults": 1,
   *               "price": {
   *                 "grossAmount": 123.0,
   *                 "beforeTax": 111.81,
   *                 "afterTax": 133.0,
   *                 "taxes": {
   *                   "tax": 11.19,
   *                   "cityTax": 10.0
   *                 },
   *                 "currency": "EUR"
   *               }
   *             },
   *             {
   *               "adults": 2,
   *               "price": {
   *                 "grossAmount": 170.0,
   *                 "beforeTax": 154.54,
   *                 "afterTax": 180.0,
   *                 "taxes": {
   *                   "tax": 15.46,
   *                   "cityTax": 10.0
   *                 },
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         },
   *         {
   *           "unitGroup": {
   *             "id": "MUC-DBL",
   *             "code": "DBL",
   *             "name": "Double",
   *             "description": "Double",
   *             "type": "BedRoom"
   *           },
   *           "minGuaranteeType": "PM6Hold",
   *           "available": 2,
   *           "availableUnits": 0,
   *           "restrictions": {
   *             "minLengthOfStay": 2,
   *             "maxLengthOfStay": 30,
   *             "closed": false,
   *             "closedOnArrival": true,
   *             "closedOnDeparture": true
   *           },
   *           "prices": [
   *             {
   *               "adults": 1,
   *               "price": {
   *                 "grossAmount": 456.0,
   *                 "beforeTax": 414.54,
   *                 "afterTax": 466.0,
   *                 "taxes": {
   *                   "tax": 41.46,
   *                   "cityTax": 10.0
   *                 },
   *                 "currency": "EUR"
   *               }
   *             },
   *             {
   *               "adults": 2,
   *               "price": {
   *                 "grossAmount": 630.0,
   *                 "beforeTax": 572.72,
   *                 "afterTax": 610.0,
   *                 "taxes": {
   *                   "tax": 57.28,
   *                   "cityTax": 10.0
   *                 },
   *                 "currency": "EUR"
   *               }
   *             }
   *           ]
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 1
   * }
   */
  TimeSliceListModel: {
    /** @description List of time slices */
    timeSlices?: definitions["TimeSliceItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  TimeSliceModel: {
    /**
     * Format: date-time
     * @description The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * Format: date
     * @description The service date for this time slice
     * @example 2020-10-10
     */
    serviceDate: string;
    ratePlan: definitions["EmbeddedRatePlanModel"];
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    unit?: definitions["EmbeddedUnitModel"];
    baseAmount: definitions["AmountModel"];
    totalGrossAmount: definitions["MonetaryValueModel"];
    /** @description The list of services included in the rate plan (package elements) */
    includedServices?: definitions["ReservationServiceModel"][];
    /** @description The list of actions allowed for this time slice */
    actions?: definitions["ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]"][];
  };
  TimeSliceOfferItemModel: {
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    /** @description The minimum guarantee type for the offer */
    minGuaranteeType?:
      | "PM6Hold"
      | "CreditCard"
      | "Prepayment"
      | "Company"
      | "Ota";
    minAdvance?: definitions["PeriodModel"];
    maxAdvance?: definitions["PeriodModel"];
    /**
     * Format: int32
     * @description The number of available units for the offer
     */
    available: number;
    /**
     * Format: int32
     * @description The number of available units for the offer considering overbookings
     */
    availableUnits: number;
    restrictions?: definitions["RateRestrictionsModel"];
    /** @description The prices for this offer */
    prices?: definitions["PerOccupancyPriceItemModel"][];
  };
}

export interface operations {
  /** Returns a list of all blocks, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
  BookingBlocksGet: {
    parameters: {
      query: {
        /** Return blocks for the specific group */
        groupId?: string;
        /** Return blocks filtered by properties */
        propertyIds?: string[];
        /** Return blocks filtered by statuses */
        status?: ("Tentative" | "Definite" | "Canceled")[];
        /** Return blocks with any of the specified unit groups */
        unitGroupIds?: string[];
        /** Return blocks with any of the specified rate plans */
        ratePlanIds?: string[];
        /** Return blocks with any of the specified time slice definitions */
        timeSliceDefinitionIds?: string[];
        /** Return blocks with any of the specified unit group types */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** The time slice template, defaults to 'over night' */
        timeSliceTemplate?: "DayUse" | "OverNight";
        /**
         * The start of the time range. All blocks that are overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from?: string;
        /**
         * The end of the time range. All blocks that are overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored. */
        expand?: ("actions" | "timeSlices")[];
      };
    };
    responses: {
      200: {
        schema: definitions["BlockListModel"];
      };
      /** No blocks found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'blocks.create, reservations.manage'. */
  BookingBlocksPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The details for the block you want to create. */
        body: definitions["CreateBlockModel"];
      };
    };
    responses: {
      /** The block was created successfully. */
      201: {
        headers: {};
        schema: definitions["BlockCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns number of blocks matching the filter criteria<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
  BookingBlocks$countGet: {
    parameters: {
      query: {
        /** Return blocks for the specific group */
        groupId?: string;
        /** Return blocks filtered by properties */
        propertyIds?: string[];
        /** Return blocks filtered by statuses */
        status?: ("Tentative" | "Definite" | "Canceled")[];
        /** Return blocks with any of the specified unit groups */
        unitGroupIds?: string[];
        /** Return blocks with any of the specified rate plans */
        ratePlanIds?: string[];
        /** Return blocks with any of the specified time slice definitions */
        timeSliceDefinitionIds?: string[];
        /** Return blocks with any of the specified unit group types */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** The time slice template, defaults to 'over night' */
        timeSliceTemplate?: "DayUse" | "OverNight";
        /**
         * The start of the time range. All blocks that are overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from?: string;
        /**
         * The end of the time range. All blocks that are overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Retrieves a block, specified by its ID.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
  BookingBlocksByIdGet: {
    parameters: {
      path: {
        /** Id of the block to be retrieved. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored. */
        expand?: ("actions" | "timeSlices")[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["BlockModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this call to delete a block. This is only possible as long as no reservation was picked up yet even if all of
   * them are canceled<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
   */
  BookingBlocksByIdDelete: {
    parameters: {
      path: {
        /** The id of the block. */
        id: string;
      };
    };
    responses: {
      /** Deletion of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a block exists by id<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'. */
  BookingBlocksByIdHead: {
    parameters: {
      path: {
        /** The id of the block. */
        id: string;
      };
    };
    responses: {
      /** The block exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** This endpoint is obsolete. It will be removed 10.05.2022. Use `PUT /booking/v1/block-actions/{id}/amend` instead.<br/ >You can replace From, To, GrossDailyRate and BlockedUnits<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'. */
  BookingBlocksByIdPatch: {
    parameters: {
      path: {
        /** Id of the block to be modified. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Confirm a specific block which is in status 'Tentative'.
   * This changes the status to 'Definite'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
   */
  "BookingBlock-actionsByIdConfirmPut": {
    parameters: {
      path: {
        /** Id of the block that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Confirmation of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Release a specific block which is in status 'Definite'.
   * This changes the status to 'Tentative'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
   */
  "BookingBlock-actionsByIdReleasePut": {
    parameters: {
      path: {
        /** Id of the block that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Release of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Cancel a specific block which is in status 'Definite' or 'Tentative'.
   * This changes the status to 'Canceled'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
   */
  "BookingBlock-actionsByIdCancelPut": {
    parameters: {
      path: {
        /** Id of the block that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Cancellation of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Wash a specific block which is in status 'Definite'.
   * This releases all unpicked units.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
   */
  "BookingBlock-actionsByIdWashPut": {
    parameters: {
      path: {
        /** Id of the block that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Wash of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to modify a block.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'. */
  "BookingBlock-actionsByIdAmendPut": {
    parameters: {
      path: {
        /** Id of the block to be modified. */
        id: string;
      };
      body: {
        /** The definition of the block. */
        body: definitions["ReplaceBlockModel"];
      };
    };
    responses: {
      /** Replace of the block was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all bookings, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingBookingsGet: {
    parameters: {
      query: {
        /** Filter result by reservation id. The result set will contain all bookings having reservations with the specified id */
        reservationId?: string;
        /** Filter result by group id. The result set will contain all bookings having groups with the specified id */
        groupId?: string;
        /** Filter result by the channel code. The resul set will contain all bookings having reservations with the specified channel code */
        channelCode?: (
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu"
        )[];
        /** Filter result by the external code. The result set will contain all bookings having reservations with external code starting with provided value */
        externalCode?: string;
        /**
         * This will filter all bookings for the provided free text. Currently it only looks up if either the lastname, firstname, email or company name of the booker
         * contains one of the provided values
         */
        textSearch?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations. All other values will be silently ignored. */
        expand?: (
          | "property"
          | "unitGroup"
          | "ratePlan"
          | "services"
          | "reservations"
        )[];
      };
    };
    responses: {
      200: {
        schema: definitions["BookingListModel"];
      };
      /** No bookings found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'. */
  BookingBookingsPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The list of reservations you want to create. */
        body: definitions["CreateBookingModel"];
      };
    };
    responses: {
      /** All new reservations were created. */
      201: {
        headers: {};
        schema: definitions["BookingCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'. */
  BookingBookings$forcePost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The list of reservations you want to create. */
        body: definitions["CreateBookingModel"];
      };
    };
    responses: {
      /** All new reservations were created. */
      201: {
        headers: {};
        schema: definitions["BookingCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'. */
  BookingBookingsByIdReservationsPost: {
    parameters: {
      path: {
        /** Id of the booking the reservations should be attached to. */
        id: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The list of reservations you want to add. */
        body: definitions["AddReservationsModel"];
      };
    };
    responses: {
      /** All new reservations were created and added to the booking. */
      201: {
        headers: {};
        schema: definitions["ReservationsCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'. */
  BookingBookingsByIdReservations$forcePost: {
    parameters: {
      path: {
        /** Id of the booking the reservations should be attached to. */
        id: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The list of reservations you want to add. */
        body: definitions["AddReservationsModel"];
      };
    };
    responses: {
      /** All new reservations were created and added to the booking. */
      201: {
        headers: {};
        schema: definitions["ReservationsCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Retrieves a booking with all its reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingBookingsByIdGet: {
    parameters: {
      path: {
        /** Id of the booking to be retrieved. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations, propertyValues. All other values will be silently ignored. */
        expand?: (
          | "property"
          | "unitGroup"
          | "ratePlan"
          | "services"
          | "reservations"
          | "propertyValues"
        )[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["BookingModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here is the list of operations that are currently allowed:
   * - Add, replace and remove PaymentAccount
   * - Add, replace and remove Comment
   * - Add, replace and remove BookerComment
   * - Copy PaymentAccount, Comment and BookerComment from the booking to any reservation, or the other way around
   * - Replace Booker<br>You must have this scope: 'reservations.manage'.
   */
  BookingBookingsByIdPatch: {
    parameters: {
      path: {
        /** Id of the booking to be modified. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns a list of all group bookings, filtered by the specified parameters.
   * If no parameters are set, returns the entire list<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.
   */
  BookingGroupsGet: {
    parameters: {
      query: {
        /**
         * This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,
         * firstname, email or company name of the booker contains one of the provided values
         */
        textSearch?: string;
        /** Filter result by requested properties */
        propertyIds?: string[];
        /**
         * The start of the time range. All groups that have blocks overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from?: string;
        /**
         * The end of the time range. All groups that have blocks overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored. */
        expand?: ("blocks" | "actions")[];
      };
    };
    responses: {
      200: {
        schema: definitions["GroupListModel"];
      };
      /** No group bookings found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'groups.create, reservations.manage'. */
  BookingGroupsPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The details of the group that should be created. */
        body: definitions["CreateGroupModel"];
      };
    };
    responses: {
      /** A new group booking was created. */
      201: {
        headers: {};
        schema: definitions["GroupCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Retrieves a specific group booking with all its related blocks<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
  BookingGroupsByIdGet: {
    parameters: {
      path: {
        /** Id of the group booking to be retrieved. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored. */
        expand?: ("blocks" | "actions")[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["GroupModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this call to delete a group booking. This is only possible as long as no blocks exist that are linked to
   * this group booking<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.
   */
  BookingGroupsByIdDelete: {
    parameters: {
      path: {
        /** Id of the group booking to be deleted. */
        id: string;
      };
    };
    responses: {
      /** Deletion of the group was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a group booking exists by id<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
  BookingGroupsByIdHead: {
    parameters: {
      path: {
        /** Id of the group booking to be checked for existence. */
        id: string;
      };
    };
    responses: {
      /** The group booking exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here is the list of operations that are currently allowed:
   * - Add and replace Name
   * - Add, replace and remove Comment
   * - Add, replace and remove BookerComment
   * - Add, replace and remove PaymentAccount
   * - Add, replace and remove PropertyIds
   * - Replace Booker<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.
   */
  BookingGroupsByIdPatch: {
    parameters: {
      path: {
        /** Id of the group booking to be modified. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns number of group bookings matching the filter criteria<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'. */
  BookingGroups$countGet: {
    parameters: {
      query: {
        /**
         * This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,
         * firstname, email or company name of the booker contains one of the provided values
         */
        textSearch?: string;
        /** Filter result by requested properties */
        propertyIds?: string[];
        /**
         * The start of the time range. All groups that have blocks overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from?: string;
        /**
         * The end of the time range. All groups that have blocks overlapping with the interval specified by from and to
         * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Creates new reservations and adds them to an existing group booking taking a list of reservations as input<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'. */
  BookingGroupsByIdReservationsPost: {
    parameters: {
      path: {
        /** Id of the group booking the reservations should be attached to. */
        id: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The list of reservations you want to create. */
        body: definitions["PickUpReservationsModel"];
      };
    };
    responses: {
      /** All new reservations were created and added to the group booking. */
      201: {
        headers: {};
        schema: definitions["ReservationsCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Calculates and returns available offers for a specific property, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
  BookingOffersGet: {
    parameters: {
      query: {
        /** The property ID */
        propertyId: string;
        /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        arrival: string;
        /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        departure: string;
        /** The time slice template used to filter the rate plans, defaults to 'over night' */
        timeSliceTemplate?: "DayUse" | "OverNight";
        /** Time slice definition IDs, used to filter rate plans */
        timeSliceDefinitionIds?: string[];
        /** Unit group IDs, used to filter rate plans */
        unitGroupIds?: string[];
        /** Unit group types, used to filter rate plans */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** Channel code, used to filter the rate plans */
        channelCode?:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /** The promo code associated with a certain special offer */
        promoCode?: string;
        /** The code associated with a corporate rate */
        corporateCode?: string;
        /** The number of adults you want offers for */
        adults: number;
        /** The ages of the children you want offers for */
        childrenAges?: number[];
        /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
        includeUnavailable?: boolean;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["StayOffersModel"];
      };
      /** There are no available offers for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Calculates and returns available offers for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
  "BookingRate-plan-offersGet": {
    parameters: {
      query: {
        /** The rate plan ID */
        ratePlanId: string;
        /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        arrival: string;
        /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        departure: string;
        /** The channel code */
        channelCode?:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /** The number of adults you want offers for */
        adults: number;
        /** The ages of the children you want offers for */
        childrenAges?: number[];
        /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
        includeUnavailable?: boolean;
        /** Desired prices for each timeslice */
        overridePrices?: number[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["StayOffersModel"];
      };
      /** There are no available offers for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
  "BookingService-offersGet": {
    parameters: {
      query: {
        /** The rate plan ID */
        ratePlanId: string;
        /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        arrival: string;
        /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        departure: string;
        /** The channel code used to filter the services */
        channelCode?:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /** The number of adults you want offers for */
        adults: number;
        /** The ages of the children you want offers for */
        childrenAges?: number[];
        /**
         * Depending on the postNextDay setting of a service it will be posted before or after midnight.
         * Breakfast is usually delivered on the next morning, having 'postNextDay' set to true. Its 'default dates' are from the day after
         * arrival until the departure day. For services like dinner 'postNextDay' is false, and default dates are day of arrival until one
         * day before departure.
         * With this query parameter set to 'false', you can also ask for dates outside of those default dates. It defaults to true.
         */
        onlyDefaultDates?: boolean;
        /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
        includeUnavailable?: boolean;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ServiceOffersModel"];
      };
      /** There are no available offers for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Calculates and returns offers per time slice for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offer-index.read, offers.read'. */
  "BookingOffer-indexGet": {
    parameters: {
      query: {
        ratePlanId: string;
        /** <br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        from: string;
        /** <br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        to: string;
        channelCode:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["TimeSliceListModel"];
      };
      /** There are no rates for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingReservationsGet: {
    parameters: {
      query: {
        /** Filter result by booking id */
        bookingId?: string;
        /** Filter result by requested properties */
        propertyIds?: string[];
        /** Filter result by requested rate plans */
        ratePlanIds?: string[];
        /** Filter result by requested companies */
        companyIds?: string[];
        /** Filter result by assigned units */
        unitIds?: string[];
        /** Filter result by requested unit groups */
        unitGroupIds?: string[];
        /** Filter result by requested unit group types */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** Filter result by requested blocks */
        blockIds?: string[];
        /** Filter result by requested market segments */
        marketSegmentIds?: string[];
        /** Filter result by reservation status */
        status?: (
          | "Confirmed"
          | "InHouse"
          | "CheckedOut"
          | "Canceled"
          | "NoShow"
        )[];
        /**
         * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.
         * All filters will check if the date specified by the filter type is between from (included) and to (excluded).
         * The exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.
         */
        dateFilter?:
          | "Arrival"
          | "Departure"
          | "Stay"
          | "Creation"
          | "Modification"
          | "Cancellation";
        /** The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        from?: string;
        /** The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        to?: string;
        /** Filter result by the channel code */
        channelCode?: (
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu"
        )[];
        /** Filter result by source */
        sources?: string[];
        /** Filter result by validation message category */
        validationMessageCategory?: (
          | "OfferNotAvailable"
          | "AutoUnitAssignment"
        )[];
        /**
         * Filter result by the external code. The result set will contain all reservations that have an external code starting with the
         * provided value
         */
        externalCode?: string;
        /**
         * This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,
         * primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
         */
        textSearch?: string;
        /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        balanceFilter?: string[];
        /**
         * If set to `true`, returns only reservations, in which all folios are closed and have an invoice.
         * If set to `false`, returns only reservations, in which some of the folios are open or don't have an invoice
         */
        allFoliosHaveInvoice?: boolean;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all fields that can be used to sort the results. Possible values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc, created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc, firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other values will be silently ignored. */
        sort?: (
          | "arrival:asc"
          | "arrival:desc"
          | "departure:asc"
          | "departure:desc"
          | "created:asc"
          | "created:desc"
          | "updated:asc"
          | "updated:desc"
          | "id:asc"
          | "id:desc"
          | "firstname:asc"
          | "firstname:desc"
          | "lastname:asc"
          | "lastname:desc"
          | "unitname:asc"
          | "unitname:desc"
        )[];
        /** List of all embedded resources that should be expanded in the response. Possible values are: booker, actions, timeSlices, services, assignedUnits, company. All other values will be silently ignored. */
        expand?: (
          | "booker"
          | "actions"
          | "timeSlices"
          | "services"
          | "assignedUnits"
          | "company"
        )[];
      };
    };
    responses: {
      200: {
        schema: definitions["ReservationListModel"];
      };
      /** No reservations found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** If no parameters are set, returns the total count of reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingReservations$countGet: {
    parameters: {
      query: {
        /** Filter result by booking id */
        bookingId?: string;
        /** Filter result by requested properties */
        propertyIds?: string[];
        /** Filter result by requested rate plans */
        ratePlanIds?: string[];
        /** Filter result by requested companies */
        companyIds?: string[];
        /** Filter result by assigned units */
        unitIds?: string[];
        /** Filter result by requested unit groups */
        unitGroupIds?: string[];
        /** Filter result by requested unit group types */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** Filter result by requested blocks */
        blockIds?: string[];
        /** Filter result by requested market segments */
        marketSegmentIds?: string[];
        /** Filter result by reservation status */
        status?: (
          | "Confirmed"
          | "InHouse"
          | "CheckedOut"
          | "Canceled"
          | "NoShow"
        )[];
        /**
         * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.
         * All filters will check if the date specified by the filter type is between from (included) and to (excluded).
         * The exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.
         */
        dateFilter?:
          | "Arrival"
          | "Departure"
          | "Stay"
          | "Creation"
          | "Modification"
          | "Cancellation";
        /** The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        from?: string;
        /** The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        to?: string;
        /** Filter result by the channel code */
        channelCode?: (
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu"
        )[];
        /** Filter result by source */
        sources?: string[];
        /** Filter result by validation message category */
        validationMessageCategory?: (
          | "OfferNotAvailable"
          | "AutoUnitAssignment"
        )[];
        /**
         * Filter result by the external code. The result set will contain all reservations that have an external code starting with the
         * provided value
         */
        externalCode?: string;
        /**
         * This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,
         * primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
         */
        textSearch?: string;
        /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        balanceFilter?: string[];
        /**
         * If set to `true`, returns only reservations, in which all folios are closed and have an invoice.
         * If set to `false`, returns only reservations, in which some of the folios are open or don't have an invoice
         */
        allFoliosHaveInvoice?: boolean;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Retrieves a reservation, specified by its ID.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingReservationsByIdGet: {
    parameters: {
      path: {
        /** Id of the reservation to be retrieved. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: timeSlices, services, booker, actions, company, assignedUnits. All other values will be silently ignored. */
        expand?: (
          | "timeSlices"
          | "services"
          | "booker"
          | "actions"
          | "company"
          | "assignedUnits"
        )[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["ReservationModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here is the list of operations that are currently allowed:
   * - Add, replace and remove Comment
   * - Add, replace and remove GuestComment
   * - Add, replace and remove PaymentAccount
   * - Add, replace and remove TravelPurpose
   * - Add, replace and remove AdditionalGuests
   * - Add a company (using company/Id, and only if not already set)
   * - Add, replace and remove Commission
   * - Replace PrimaryGuest
   * - Remove ValidationMessages
   * - Add, replace and remove MarketSegment<br>You must have this scope: 'reservations.manage'.
   */
  BookingReservationsByIdPatch: {
    parameters: {
      path: {
        /** Id of the reservation to be modified. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Calculates and returns offers for amending a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
  BookingReservationsByIdOffersGet: {
    parameters: {
      path: {
        /** Id of the reservation to be amended. */
        id: string;
      };
      query: {
        /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        arrival?: string;
        /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        departure?: string;
        /** Number of adults */
        adults?: number;
        /** Ages of children */
        childrenAges?: number[];
        /** The channel code used to filter the rate plans */
        channelCode?:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /** The promo code associated with a certain special offer, like corporate rate */
        promoCode?: string;
        /**
         * Whether the offers should be re-quoted based on current prices, or only additions like change of number of adults should be calculated.
         * Defaults to 'false'
         */
        requote?: boolean;
        /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
        includeUnavailable?: boolean;
        /** The list of unit groups used to filter the offers. */
        unitGroupIds?: string[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["ReservationStayOffersModel"];
      };
      /** There are no available offers for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Calculates and returns service offers for a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'. */
  "BookingReservationsByIdService-offersGet": {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
      query: {
        /** The channel code used to filter the services */
        channelCode?:
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
          | "DesVu";
        /**
         * Depending on the postNextDay setting of a service it will by default be posted before or after midnight.
         * Breakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day
         * are default dates and will have this flag set to true. For services like a dinner it is the other way around.
         * With this query parameter, you can also ask for the dates, that usually the service will not be booked. It defaults to true.
         */
        onlyDefaultDates?: boolean;
        /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
        includeUnavailable?: boolean;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["ServiceOffersModel"];
      };
      /** There are no available offers for the specified parameters. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns the services booked for a specific reservation.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'. */
  BookingReservationsByIdServicesGet: {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["ReservationServiceListModel"];
      };
      /** There are no booked services for the specified reservation. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Removes a service from a reservation. The service will not be removed if it is mandatory, already posted or if the service date is in the past.<br>You must have this scope: 'reservations.manage'. */
  BookingReservationsByIdServicesDelete: {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
      query: {
        /** The id of the service to delete */
        serviceId: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Assigns one of the available units to a reservation which is in state 'Confirmed' or 'InHouse'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'. */
  "BookingReservation-actionsByIdAssign-unitPut": {
    parameters: {
      path: {
        /** Id of the reservation a unit should be assigned to. */
        id: string;
      };
      query: {
        /** The optional unit conditions for unit that you want to auto assign for. */
        unitConditions?: ("Clean" | "CleanToBeInspected" | "Dirty")[];
      };
    };
    responses: {
      /** Unit assignment was successful. */
      200: {
        schema: definitions["AutoAssignedUnitListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Assigns a specific unit to a reservation which is in state 'Confirmed' or 'InHouse'.<br />If the unit is not available, the call will return an error, and no unit will be assigned.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'. */
  "BookingReservation-actionsByIdAssign-unitByUnitIdPut": {
    parameters: {
      path: {
        /** Id of the reservation the unit should be assigned to. */
        id: string;
        /** The id of the unit to be assigned. */
        unitId: string;
      };
      query: {
        /** The start date and optional time for the unit assignment. If not specified, the reservation's arrival will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        from?: string;
        /** The end date and optional time for the unit assignment. If not specified, the reservation's departure will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        to?: string;
      };
    };
    responses: {
      /** Unit assignment was successful. */
      200: {
        schema: definitions["AssignedUnitModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Unassigns units for all time slices of the given reservation. If no units are assigned for the
   * reservation nothing will happen. It will fail for reservations in status 'CheckedOut'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.
   */
  "BookingReservation-actionsByIdUnassign-unitsPut": {
    parameters: {
      path: {
        /** Id of the reservation the unit should be unassigned for. */
        id: string;
      };
    };
    responses: {
      /** Unassigning the unit was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check in a specific reservation which is in status 'Confirmed', and has a unit assigned. This changes the status to 'InHouse', and sets the check-in date and time.<br>You must have this scope: 'reservations.manage'. */
  "BookingReservation-actionsByIdCheckinPut": {
    parameters: {
      path: {
        /** Id of the reservation that should be processed. */
        id: string;
      };
      query: {
        /** Define if city tax should be added for this reservation or not. The default is "true". */
        withCityTax?: boolean;
      };
    };
    responses: {
      /** Check-in of the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Check out a specific reservation which is in status 'InHouse'. This changes the status to 'CheckedOut', and sets the check-out date and time.
   * All open charges on the folio will be posted.
   * <br />
   * Check-out is only possible, if the departure date is not later than tomorrow. Otherwise, first amend the reservation and shorten the stay.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdCheckoutPut": {
    parameters: {
      path: {
        /** Id of the reservation that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Check-out of the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Cancel a specific reservation which is in status 'Confirmed' and where the arrival time is in the future.
   * This changes the status to 'Canceled', and sets the cancellation date and time.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdCancelPut": {
    parameters: {
      path: {
        /** Id of the reservation that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Cancellation of the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Set a specific reservation to No-show which is in status 'Confirmed' and where the arrival date is in the past.
   * This changes the status to 'NoShow', and sets the no-show date and time.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdNoshowPut": {
    parameters: {
      path: {
        /** Id of the reservation that should be processed. */
        id: string;
      };
    };
    responses: {
      /** Setting the reservation to No-show was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Modifies the stay-related data of a reservation.<br />
   * If a reservation is 'Confirmed', you can change all fields.<br />
   * If a reservation is 'InHouse', only changes to future time slices are possible.<br />
   * Changes to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdAmendPut": {
    parameters: {
      path: {
        /** Id of the reservation that should be modified */
        id: string;
      };
      body: {
        /** The new stay details that should be applied to the reservation. */
        body: definitions["DesiredStayDetailsModel"];
      };
    };
    responses: {
      /** The reservation has been changed. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Modifies the stay-related data of a reservation.<br />
   * If a reservation is 'Confirmed', you can change all fields.<br />
   * If a reservation is 'InHouse', only changes to future time slices are possible.<br />
   * Changes to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.force-manage'.
   */
  "BookingReservation-actionsByIdAmend$forcePut": {
    parameters: {
      path: {
        /** Id of the reservation that should be modified */
        id: string;
      };
      body: {
        /** The new stay details that should be applied to the reservation. */
        body: definitions["DesiredStayDetailsModel"];
      };
    };
    responses: {
      /** The reservation has been changed. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this to book a service for a specific reservation.
   * Please note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdBook-servicePut": {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
      body: {
        body: definitions["BookReservationServiceModel"];
      };
    };
    responses: {
      /** Booking of the service for the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this to book a service for a specific reservation.
   * Please note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.
   */
  "BookingReservation-actionsByIdBook-service$forcePut": {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
      body: {
        body: definitions["BookReservationServiceModel"];
      };
    };
    responses: {
      /** Booking of the service for the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this is you want to remove the city tax from a reservation before the stay.<br>You must have this scope: 'reservations.manage'. */
  "BookingReservation-actionsByIdRemove-city-taxPut": {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
    };
    responses: {
      /** Removal of the city tax for the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this if you want to add the city tax to a reservation.<br>You must have this scope: 'reservations.manage'. */
  "BookingReservation-actionsByIdAdd-city-taxPut": {
    parameters: {
      path: {
        /** Id of the reservation. */
        id: string;
      };
    };
    responses: {
      /** Addition of the city tax for the reservation was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of channels that could be used as a source to create bookings. */
  BookingTypesSourcesGet: {
    responses: {
      /** Success. */
      200: {
        schema: definitions["SourceListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
}

export interface external {}
