/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/inventory/v1/properties": {
    /** Get the list of properties.<br>You need to be authorized (no particular scope required) */
    get: operations["InventoryPropertiesGet"];
    /** Use this call to create a new property.<br>You must have at least one of these scopes: 'properties.create, setup.manage'. */
    post: operations["InventoryPropertiesPost"];
  };
  "/inventory/v1/properties/$count": {
    /** Return total count of properties<br>You need to be authorized (no particular scope required) */
    get: operations["InventoryProperties$countGet"];
  };
  "/inventory/v1/properties/{id}": {
    /** Get a property by id.<br>You need to be authorized (no particular scope required) */
    get: operations["InventoryPropertiesByIdGet"];
    /** Check if a property exists by id.<br>You need to be authorized (no particular scope required) */
    head: operations["InventoryPropertiesByIdHead"];
    /**
     * Here's a list of allowed operations:
     * - Replace Name
     * - Add, replace and remove Description
     * - Replace CompanyName
     * - Add, replace and remove ManagingDirectors
     * - Replace CommercialRegisterEntry
     * - Replace TaxId
     * - Replace Location
     * - Add, replace and remove BankAccount
     * - Replace PaymentTerms
     * - Set IsTemplate<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
     */
    patch: operations["InventoryPropertiesByIdPatch"];
  };
  "/inventory/v1/property-actions/{id}/clone": {
    /**
     * Use this call to clone a specific property.
     * This operation creates a new property with inventory and rate plans from the specified property.<br>You must have at least one of these scopes: 'properties.create, setup.manage'.
     */
    post: operations["InventoryProperty-actionsByIdClonePost"];
  };
  "/inventory/v1/property-actions/{id}/archive": {
    /**
     * Use this endpoint to archive an existing live property
     * This operation set the IsArchived flag to true<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
     */
    put: operations["InventoryProperty-actionsByIdArchivePut"];
  };
  "/inventory/v1/property-actions/{id}/set-live": {
    /**
     * Use this endpoint to move an existing test property to live
     * This operation changes the property status to 'Live'<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
     */
    put: operations["InventoryProperty-actionsByIdSet-livePut"];
  };
  "/inventory/v1/property-actions/{id}/reset": {
    /**
     * Use this endpoint to delete all transactional data related to some test property
     * This operation deletes all transactional data related to the specified property. The property must be in 'Test' status.<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
     */
    put: operations["InventoryProperty-actionsByIdResetPut"];
  };
  "/inventory/v1/types/countries": {
    /** Returns a list of ISO country codes that could be used to create properties.<br>You need to be authorized (no particular scope required) */
    get: operations["InventoryTypesCountriesGet"];
  };
  "/inventory/v1/units/{id}": {
    /** Get a unit by id.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
    get: operations["InventoryUnitsByIdGet"];
    /** Use this call to delete a unit.<br>You must have at least one of these scopes: 'units.delete, setup.manage'. */
    delete: operations["InventoryUnitsByIdDelete"];
    /** Check if a unit exists by id.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
    head: operations["InventoryUnitsByIdHead"];
    /**
     * Here's a list of allowed operations:
     * - Set unit condition
     * - Set unit description
     * - Set unit name
     * - Set unit unitGroupId
     * - Set unit maxPersons
     * - Add unit attribute
     * - Remove unit attribute<br>You must have at least one of these scopes: 'units.manage, setup.manage'.
     */
    patch: operations["InventoryUnitsByIdPatch"];
  };
  "/inventory/v1/units": {
    /** Get the list of units.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
    get: operations["InventoryUnitsGet"];
    /** Use this call to create a new unit.<br>You must have at least one of these scopes: 'units.create, setup.manage'. */
    post: operations["InventoryUnitsPost"];
    /**
     * Here's a list of allowed operations:
     * - Set unit condition
     * - Set unit description
     * - Set unit name
     * - Set unit unitGroupId
     * - Set unit maxPersons
     * - Add unit attribute
     * - Remove unit attribute<br>You must have at least one of these scopes: 'units.manage, setup.manage'.
     */
    patch: operations["InventoryUnitsPatch"];
  };
  "/inventory/v1/units/$count": {
    /** Returns number of units matching the filter criteria<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
    get: operations["InventoryUnits$countGet"];
  };
  "/inventory/v1/units/bulk": {
    /** Use this call to create multiple units, following a naming rule.<br>You must have at least one of these scopes: 'units.create, setup.manage'. */
    post: operations["InventoryUnitsBulkPost"];
  };
  "/inventory/v1/unit-attributes/{id}": {
    /** Get unit attribute by id<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
    get: operations["InventoryUnit-attributesByIdGet"];
    /** Deletes unit attribute<br>You must have at least one of these scopes: 'unitattributes.delete, setup.manage'. */
    delete: operations["InventoryUnit-attributesByIdDelete"];
    /** Check if a unit attribute exists<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
    head: operations["InventoryUnit-attributesByIdHead"];
    /**
     * Here's a list of allowed operations:
     * - Replace / Remove Description<br>You must have at least one of these scopes: 'unitattributes.manage, setup.manage'.
     */
    patch: operations["InventoryUnit-attributesByIdPatch"];
  };
  "/inventory/v1/unit-attributes": {
    /** Get unit attribute list<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
    get: operations["InventoryUnit-attributesGet"];
    /** Use this call to create a new unit attribute.<br>You must have at least one of these scopes: 'unitattributes.create, setup.manage'. */
    post: operations["InventoryUnit-attributesPost"];
  };
  "/inventory/v1/unit-groups": {
    /** Get the list of unit groups.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
    get: operations["InventoryUnit-groupsGet"];
    /** Use this call to create a new unit group.<br>You must have at least one of these scopes: 'unitgroups.create, setup.manage'. */
    post: operations["InventoryUnit-groupsPost"];
  };
  "/inventory/v1/unit-groups/$count": {
    /** Returns number of unit groups matching the filter criteria<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
    get: operations["InventoryUnit-groups$countGet"];
  };
  "/inventory/v1/unit-groups/{id}": {
    /** Get a unit group by id.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
    get: operations["InventoryUnit-groupsByIdGet"];
    /** Use this call to modify a unit group.<br>You must have at least one of these scopes: 'unitgroups.manage, setup.manage'. */
    put: operations["InventoryUnit-groupsByIdPut"];
    /** Use this call to delete a unit group.<br>You must have at least one of these scopes: 'unitgroups.delete, setup.manage'. */
    delete: operations["InventoryUnit-groupsByIdDelete"];
    /** Check if a unit group exists by id.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
    head: operations["InventoryUnit-groupsByIdHead"];
  };
}

export interface definitions {
  "ActionModel[PropertyAction,NotAllowedPropertyActionReason]": {
    action: "Delete" | "Archive" | "SetLive" | "Reset";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedPropertyActionReason]"][];
  };
  "ActionReasonModel[NotAllowedPropertyActionReason]": {
    code:
      | "DeleteNotAllowedForPropertyNotInStatusTest"
      | "ArchiveNotAllowedForPropertyNotInStatusLive"
      | "ArchiveNotAllowedForPropertyWhichIsAlreadyArchived"
      | "SetToLiveNotAllowedForPropertyNotInStatusTest"
      | "SetToLiveNotAllowedForPropertyInNonLiveAccount"
      | "ResetNotAllowedForPropertyNotInStatusTest";
    message: string;
  };
  AddressModel: {
    addressLine1: string;
    addressLine2?: string;
    postalCode: string;
    city: string;
    regionCode?: string;
    countryCode: string;
  };
  BankAccountModel: {
    iban?: string;
    bic?: string;
    bank?: string;
  };
  /**
   * @example {
   *   "units": [
   *     {
   *       "propertyId": "MUC",
   *       "name": "A.201",
   *       "description": {
   *         "en": "Single room",
   *         "de": "Einzelzimmer"
   *       },
   *       "unitGroupId": "MUC-SGL",
   *       "maxPersons": 1,
   *       "condition": "Clean",
   *       "attributes": [],
   *       "connectedUnits": []
   *     },
   *     {
   *       "propertyId": "MUC",
   *       "name": "A.103",
   *       "description": {
   *         "en": "Double room",
   *         "de": "Doppelzimmer"
   *       },
   *       "unitGroupId": "MUC-DBL",
   *       "maxPersons": 2,
   *       "condition": "Clean",
   *       "attributes": [],
   *       "connectedUnits": []
   *     },
   *     {
   *       "propertyId": "MUC",
   *       "name": "S.102",
   *       "description": {
   *         "en": "Suite room",
   *         "de": "Suite Zimmer"
   *       },
   *       "unitGroupId": "MUC-SUI",
   *       "maxPersons": 3,
   *       "condition": "Clean",
   *       "attributes": [],
   *       "connectedUnits": [
   *         {
   *           "unitId": "MUC-MTA"
   *         },
   *         {
   *           "unitId": "MUC-JQI"
   *         }
   *       ]
   *     }
   *   ]
   * }
   */
  BulkCreateUnitsModel: {
    units: definitions["CreateUnitModel"][];
  };
  /**
   * @example {
   *   "ids": [
   *     "MUC-CFP",
   *     "MUC-XTA",
   *     "MUC-CPZ"
   *   ]
   * }
   */
  BulkUnitsCreatedModel: {
    /** @description The unit ids */
    ids: string[];
  };
  ConnectedUnitGroupModel: {
    /** @description The unit group id */
    id: string;
    /** @description The name for the unit group */
    name: string;
    /** @description The description for the unit group */
    description: string;
    /**
     * Format: int32
     * @description The number of units taken from this connected unit group
     */
    memberCount: number;
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group
     */
    maxPersons?: number;
  };
  ConnectedUnitModel: {
    /** @description The unit id */
    id: string;
    /** @description The name for the unit */
    name: string;
    /** @description The description for the unit */
    description: string;
    /** @description The unit group id */
    unitGroupId: string;
    /** @description The current status of the unit */
    condition: "Clean" | "CleanToBeInspected" | "Dirty";
    /**
     * Format: int32
     * @description Maximum number of persons for the unit
     */
    maxPersons: number;
  };
  /**
   * @example {
   *   "count": 50
   * }
   */
  CountModel: {
    /** Format: int64 */
    count: number;
  };
  /**
   * @example {
   *   "countryCodes": [
   *     "DE",
   *     "US"
   *   ]
   * }
   */
  CountryListModel: {
    /** @description List of ISO country codes. */
    countryCodes: string[];
  };
  CreateAddressModel: {
    addressLine1: string;
    addressLine2?: string;
    postalCode: string;
    city: string;
    /** @description The ISO 3166-2 code */
    regionCode?: string;
    /** @description The country code, in ISO 3166-1 alpha-2 code */
    countryCode: string;
  };
  CreateConnectedUnitGroupModel: {
    /** @description The connected unit group id */
    unitGroupId: string;
    /**
     * Format: int32
     * @description The number of units for this connected unit group
     */
    memberCount: number;
  };
  CreateConnectedUnitModel: {
    /** @description The connected unit id */
    unitId: string;
  };
  /**
   * @example {
   *   "code": "MUC",
   *   "name": {
   *     "en": "Demo Hotel Munich",
   *     "de": "Demo Hotel München"
   *   },
   *   "companyName": "Hotel Münchner GmbH",
   *   "managingDirectors": "Franz-Josef Gruber",
   *   "commercialRegisterEntry": "Amtsgericht München, HRB 279336",
   *   "taxId": "DE311053702",
   *   "description": {
   *     "en": "This is the demo hotel Munich",
   *     "de": "Dies ist das Demo Hotel München"
   *   },
   *   "location": {
   *     "addressLine1": "Marienplatz 1",
   *     "postalCode": "80331",
   *     "city": "München",
   *     "countryCode": "DE"
   *   },
   *   "bankAccount": {
   *     "iban": "DE44 5001 0517 5407 3249 31",
   *     "bic": "SSKMDEMMXXX",
   *     "bank": "Stadtsparkasse München"
   *   },
   *   "paymentTerms": {
   *     "en": "Pay on checkout",
   *     "de": "Zahlung bei Checkout"
   *   },
   *   "timeZone": "Europe/Berlin",
   *   "defaultCheckInTime": "17:00:00",
   *   "defaultCheckOutTime": "11:00:00",
   *   "currencyCode": "EUR"
   * }
   */
  CreatePropertyModel: {
    /** @description The code for the property that can be shown in reports and table views */
    code: string;
    /** @description The name for the property */
    name: { [key: string]: string };
    /** @description The legal name of the company running the property. */
    companyName: string;
    /** @description The managing director(s) of the company, as they should appear on invoices */
    managingDirectors?: string;
    /** @description The entry in the Commercial Reigster of the company running the property, as it should appear on invoices */
    commercialRegisterEntry: string;
    /** @description The Tax-ID of the company running the property, as it should appear on invoices */
    taxId: string;
    /** @description The description for the property */
    description?: { [key: string]: string };
    location: definitions["CreateAddressModel"];
    bankAccount?: definitions["BankAccountModel"];
    /** @description The payment terms used for all rate plans */
    paymentTerms: { [key: string]: string };
    /**
     * @description The time zone name of the property from the IANA Time Zone Database.
     * (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timeZone: string;
    /** @description The default check-in time<br />A time (without fractional second part) as defined in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    defaultCheckInTime: string;
    /** @description The default check-out time<br />A time (without fractional second part) as defined in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    defaultCheckOutTime: string;
    /** @description The currency a property works with. */
    currencyCode: string;
  };
  /**
   * @example {
   *   "name": "Floor 1",
   *   "description": "Floor number"
   * }
   */
  CreateUnitAttributeDefinitionModel: {
    /** @description The name of the unit attribute */
    name: string;
    /** @description The description of the unit attribute */
    description?: string;
  };
  CreateUnitAttributeModel: {
    /** @description Id of unit attribute */
    id: string;
  };
  /**
   * @example {
   *   "code": "DBL",
   *   "propertyId": "MUC",
   *   "name": {
   *     "en": "Double Room",
   *     "de": "Doppelzimmer"
   *   },
   *   "description": {
   *     "en": "This is a nice room with as kingsize bed and flat screen",
   *     "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm"
   *   },
   *   "maxPersons": 4,
   *   "rank": 1,
   *   "type": "BedRoom"
   * }
   */
  CreateUnitGroupModel: {
    /** @description The code for the unit group that can be shown in reports and table views */
    code: string;
    /** @description The id of the property where unit group will be created */
    propertyId: string;
    /** @description The name for the unit group */
    name: { [key: string]: string };
    /** @description The description for the unit group */
    description: { [key: string]: string };
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group
     */
    maxPersons: number;
    /**
     * Format: int32
     * @description The unit group rank
     * Restrictions:
     * - Should be greater or equal to one
     */
    rank?: number;
    /** @description The unit group type */
    type?: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot";
    /** @description The list of connected unit groups this unit group is composed of */
    connectedUnitGroups?: definitions["CreateConnectedUnitGroupModel"][];
  };
  /**
   * @example {
   *   "propertyId": "MUC",
   *   "name": "S.102",
   *   "description": {
   *     "en": "Suite room",
   *     "de": "Suite Zimmer"
   *   },
   *   "unitGroupId": "MUC-SUI",
   *   "maxPersons": 3,
   *   "condition": "Clean",
   *   "attributes": [],
   *   "connectedUnits": [
   *     {
   *       "unitId": "MUC-MTA"
   *     },
   *     {
   *       "unitId": "MUC-JQI"
   *     }
   *   ]
   * }
   */
  CreateUnitModel: {
    /** @description The id of the property where the unit will be created */
    propertyId: string;
    /** @description The name for the unit */
    name: string;
    /** @description The description for the unit */
    description: { [key: string]: string };
    /** @description The id of the unit group */
    unitGroupId?: string;
    /**
     * Format: int32
     * @description Maximum number of persons for the unit
     */
    maxPersons: number;
    /** @description Condition of the unit */
    condition?: "Clean" | "CleanToBeInspected" | "Dirty";
    /** @description Collection of user defined attributes of unit */
    attributes?: definitions["CreateUnitAttributeModel"][];
    /** @description The list of units this unit is composed of */
    connectedUnits?: definitions["CreateConnectedUnitModel"][];
  };
  EmbeddedPropertyModel: {
    /** @description The property id */
    id: string;
    /** @description The code for the property that can be shown in reports and table views */
    code?: string;
    /** @description The name for the property */
    name?: string;
    /** @description The description for the property */
    description?: string;
  };
  EmbeddedUnitGroupModel: {
    /** @description The unit group id */
    id: string;
    /** @description The code for the unit group that can be shown in reports and table views */
    code?: string;
    /** @description The name for the unit group */
    name?: string;
    /** @description The description for the unit group */
    description?: string;
    /** @description The unit group type */
    type?: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
  };
  EmbeddedUnitModel: {
    /** @description The unit id */
    id: string;
    /** @description The name for the unit */
    name?: string;
    /** @description The description for the unit */
    description?: string;
    /** @description The unit group id */
    unitGroupId?: string;
  };
  MessageItemCollection: {
    messages?: string[];
  };
  Operation: {
    value?: unknown;
    path?: string;
    op?: string;
    from?: string;
  };
  /**
   * @example {
   *   "id": "MUC"
   * }
   */
  PropertyCreatedModel: {
    /** @description The property id */
    id: string;
  };
  PropertyItemModel: {
    /** @description The property id */
    id: string;
    /** @description The code for the property that can be shown in reports and table views */
    code: string;
    /** @description The id of the property used as a template while creating the property */
    propertyTemplateId?: string;
    /** @description Whether the property can be used as a template for other properties */
    isTemplate: boolean;
    /** @description The name for the property */
    name: string;
    /** @description The description for the property */
    description?: string;
    /** @description The legal name of the company running the property. */
    companyName: string;
    /** @description The managing director(s) of the company, as they should appear on invoices */
    managingDirectors?: string;
    /** @description The entry in the Commercial Register of the company running the property, as it should appear on invoices */
    commercialRegisterEntry: string;
    /** @description The Tax-ID of the company running the property, as it should appear on invoices */
    taxId: string;
    location: definitions["AddressModel"];
    bankAccount?: definitions["BankAccountModel"];
    /** @description The payment terms used for all rate plans */
    paymentTerms: { [key: string]: string };
    /**
     * @description The time zone name of the property from the IANA Time Zone Database.
     * (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timeZone: string;
    /** @description The currency a property works with. */
    currencyCode: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description The status of the property */
    status: "Test" | "Live";
    /** @description Is the property archived */
    isArchived: boolean;
    /** @description The list of actions for this property */
    actions?: definitions["ActionModel[PropertyAction,NotAllowedPropertyActionReason]"][];
  };
  /**
   * @example {
   *   "properties": [
   *     {
   *       "id": "MUC",
   *       "code": "MUC",
   *       "isTemplate": true,
   *       "name": "Demo Hotel Munich",
   *       "description": "This is the demo hotel Munich",
   *       "companyName": "Company",
   *       "commercialRegisterEntry": "CRE",
   *       "taxId": "Tax",
   *       "location": {
   *         "addressLine1": "Marienplatz 1",
   *         "postalCode": "80331",
   *         "city": "München",
   *         "countryCode": "DE"
   *       },
   *       "paymentTerms": {
   *         "de": "Zahlbar bei Check In",
   *         "en": "Payment on check-in"
   *       },
   *       "timeZone": "Europe/Berlin",
   *       "currencyCode": "EUR",
   *       "created": "0001-01-01T00:00:00Z",
   *       "status": "Test",
   *       "isArchived": false
   *     },
   *     {
   *       "id": "BER",
   *       "code": "BER",
   *       "propertyTemplateId": "MUC",
   *       "isTemplate": false,
   *       "name": "Demo Hotel Berlin",
   *       "description": "This is the demo hotel Berlin",
   *       "companyName": "Company",
   *       "commercialRegisterEntry": "CRE",
   *       "taxId": "Tax",
   *       "location": {
   *         "addressLine1": "Mohrenstraße 30",
   *         "postalCode": "10117",
   *         "city": "Berlin",
   *         "countryCode": "DE"
   *       },
   *       "paymentTerms": {
   *         "de": "Zahlbar bei Check In",
   *         "en": "Payment on check-in"
   *       },
   *       "timeZone": "Europe/Berlin",
   *       "currencyCode": "EUR",
   *       "created": "0001-01-01T00:00:00Z",
   *       "status": "Test",
   *       "isArchived": false
   *     }
   *   ],
   *   "count": 0
   * }
   */
  PropertyListModel: {
    /** @description List of properties */
    properties: definitions["PropertyItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @description With this request you can create a new property
   * @example {
   *   "id": "MUC",
   *   "code": "MUC",
   *   "propertyTemplateId": "BER",
   *   "isTemplate": false,
   *   "name": {
   *     "en": "Demo Hotel Munich",
   *     "de": "Demo Hotel München"
   *   },
   *   "description": {
   *     "en": "This is the demo hotel Munich",
   *     "de": "Dies ist das Demo Hotel München"
   *   },
   *   "companyName": "Hotel Münchner GmbH",
   *   "managingDirectors": "Franz-Josef Gruber",
   *   "commercialRegisterEntry": "Amtsgericht München, HRB 279336",
   *   "taxId": "DE311053702",
   *   "location": {
   *     "addressLine1": "Marienplatz 1",
   *     "postalCode": "80331",
   *     "city": "München",
   *     "countryCode": "DE"
   *   },
   *   "bankAccount": {
   *     "iban": "DE44 5001 0517 5407 3249 31",
   *     "bic": "SSKMDEMMXXX",
   *     "bank": "Stadtsparkasse München"
   *   },
   *   "paymentTerms": {
   *     "en": "Pay on checkout",
   *     "de": "Zahlung bei Checkout"
   *   },
   *   "timeZone": "Europe/Berlin",
   *   "currencyCode": "EUR",
   *   "created": "0001-01-01T00:00:00Z",
   *   "status": "Test",
   *   "isArchived": false
   * }
   */
  PropertyModel: {
    /** @description The property id */
    id: string;
    /** @description The code for the property that can be shown in reports and table views */
    code: string;
    /** @description The id of the property used as a template while creating the property */
    propertyTemplateId?: string;
    /** @description Whether the property can be used as a template for other properties */
    isTemplate: boolean;
    /** @description The name for the property */
    name: { [key: string]: string };
    /** @description The description for the property */
    description?: { [key: string]: string };
    /** @description The legal name of the company running the property. */
    companyName: string;
    /** @description The managing director(s) of the company, as they should appear on invoices */
    managingDirectors?: string;
    /** @description The entry in the Commercial Register of the company running the property, as it should appear on invoices */
    commercialRegisterEntry: string;
    /** @description The Tax-ID of the company running the property, as it should appear on invoices */
    taxId: string;
    location: definitions["AddressModel"];
    bankAccount?: definitions["BankAccountModel"];
    /** @description The payment terms used for all rate plans */
    paymentTerms: { [key: string]: string };
    /**
     * @description The time zone name of the property from the IANA Time Zone Database.
     * (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timeZone: string;
    /** @description The currency a property works with. */
    currencyCode: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description The status of the property */
    status: "Test" | "Live";
    /** @description Is the property archived */
    isArchived: boolean;
    /** @description The list of actions for this property */
    actions?: definitions["ActionModel[PropertyAction,NotAllowedPropertyActionReason]"][];
  };
  ReplaceConnectedUnitGroupModel: {
    /** @description The connected unit group id */
    unitGroupId: string;
    /**
     * Format: int32
     * @description The number of units for this connected unit group
     */
    memberCount: number;
  };
  /**
   * @example {
   *   "name": {
   *     "en": "Double Room",
   *     "de": "Doppelzimmer"
   *   },
   *   "description": {
   *     "en": "This is a nice room with as kingsize bed and flat screen",
   *     "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm"
   *   },
   *   "maxPersons": 4,
   *   "rank": 2
   * }
   */
  ReplaceUnitGroupModel: {
    /** @description The name for the unit group */
    name: { [key: string]: string };
    /** @description The description for the unit group */
    description: { [key: string]: string };
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group.
     * If this value is increased, the surcharges for the related rate plans must be specified in order for the rate plans to be sellable for the new possible occupancies.
     */
    maxPersons?: number;
    /**
     * Format: int32
     * @description The unit group rank
     * Restrictions:
     * - Should be greater or equal to one
     */
    rank?: number;
    /** @description The list of connected unit groups this unit group is composed of */
    connectedUnitGroups?: definitions["ReplaceConnectedUnitGroupModel"][];
  };
  /**
   * @example {
   *   "id": "FLOOR"
   * }
   */
  UnitAttributeDefinitionCreatedModel: {
    /** @description The unit attribute id */
    id: string;
  };
  /**
   * @example {
   *   "unitAttributes": [
   *     {
   *       "id": "KQOSXHLS",
   *       "name": "Floor 1",
   *       "description": "Floor number"
   *     },
   *     {
   *       "id": "ADVFSSUL",
   *       "name": "Street view",
   *       "description": "View from the room"
   *     }
   *   ],
   *   "count": 2
   * }
   */
  UnitAttributeDefinitionListModel: {
    /** @description List of unit attributes */
    unitAttributes: definitions["UnitAttributeDefinitionModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "KQOSXHLS",
   *   "name": "Floor 1",
   *   "description": "Floor number"
   * }
   */
  UnitAttributeDefinitionModel: {
    /** @description The id of the unit attribute */
    id: string;
    /** @description The name of the unit attribute */
    name: string;
    /** @description The description of the unit attribute */
    description?: string;
  };
  UnitAttributeModel: {
    /** @description Id of unit attribute */
    id: string;
    /** @description The name of the unit attribute */
    name: string;
    /** @description Description of unit attribute */
    description?: string;
  };
  /**
   * @example {
   *   "id": "MUC-CFP"
   * }
   */
  UnitCreatedModel: {
    /** @description The unit id */
    id: string;
  };
  /**
   * @example {
   *   "id": "MUC-DBL"
   * }
   */
  UnitGroupCreatedModel: {
    /** @description The unit group id */
    id: string;
  };
  UnitGroupItemModel: {
    /** @description The unit group id */
    id: string;
    /** @description The code for the unit group that can be shown in reports and table views */
    code: string;
    /** @description The name for the unit group */
    name: string;
    /** @description The description for the unit group */
    description: string;
    /**
     * Format: int32
     * @description Number of units in this group
     */
    memberCount: number;
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group
     */
    maxPersons?: number;
    /**
     * Format: int32
     * @description The unit group rank
     */
    rank?: number;
    /** @description The unit group type */
    type: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
    property: definitions["EmbeddedPropertyModel"];
    /** @description The list of connected unit groups this unit group is composed of */
    connectedUnitGroups?: definitions["ConnectedUnitGroupModel"][];
  };
  /**
   * @example {
   *   "unitGroups": [
   *     {
   *       "id": "MUC-DBL",
   *       "code": "DBL",
   *       "name": "Double Room",
   *       "description": "This is a nice room with as kingsize bed and flat screen",
   *       "memberCount": 2,
   *       "maxPersons": 4,
   *       "rank": 2,
   *       "type": "BedRoom",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       }
   *     },
   *     {
   *       "id": "BER-SUIT",
   *       "code": "SUIT",
   *       "name": "Suite Room",
   *       "description": "This is a nice suite with two rooms combined",
   *       "memberCount": 1,
   *       "maxPersons": 3,
   *       "rank": 1,
   *       "type": "BedRoom",
   *       "property": {
   *         "id": "BER",
   *         "code": "BER",
   *         "name": "Demo Hotel Berlin",
   *         "description": "This is the demo hotel Berlin"
   *       },
   *       "connectedUnitGroups": [
   *         {
   *           "id": "BER-SGL",
   *           "name": "Single room",
   *           "description": "This is a nice room with a single bed",
   *           "memberCount": 2,
   *           "maxPersons": 1
   *         },
   *         {
   *           "id": "BER-DBL",
   *           "name": "Double room",
   *           "description": "This is a nice room with as kingsize bed and flat screen",
   *           "memberCount": 1,
   *           "maxPersons": 2
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 0
   * }
   */
  UnitGroupListModel: {
    /** @description List of unit groups */
    unitGroups: definitions["UnitGroupItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "MUC-DBL",
   *   "code": "DBL",
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "name": {
   *     "en": "Double Room",
   *     "de": "Doppelzimmer"
   *   },
   *   "memberCount": 0,
   *   "description": {
   *     "en": "This is a nice room with as kingsize bed and flat screen",
   *     "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm"
   *   },
   *   "maxPersons": 4,
   *   "rank": 2,
   *   "type": "BedRoom"
   * }
   */
  UnitGroupModel: {
    /** @description The unit group id */
    id: string;
    /** @description The code for the unit group that can be shown in reports and table views */
    code: string;
    property: definitions["EmbeddedPropertyModel"];
    /** @description The name for the unit group */
    name: { [key: string]: string };
    /**
     * Format: int32
     * @description Number of units in this group
     */
    memberCount: number;
    /** @description The description for the unit group */
    description: { [key: string]: string };
    /**
     * Format: int32
     * @description Maximum number of persons for the unit group
     */
    maxPersons: number;
    /**
     * Format: int32
     * @description The unit group rank
     */
    rank?: number;
    /** @description The unit group type */
    type: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
    /** @description The list of connected unit groups this unit group is composed of */
    connectedUnitGroups?: definitions["ConnectedUnitGroupModel"][];
  };
  UnitItemMaintenanceModel: {
    /** @description The id for the scheduled maintenance */
    id: string;
    /**
     * @description The type of maintenance that is planned for the unit. A small repair (OutOfService),
     * a bigger disfunction that does not allow to sell the unit (OutOfOrder) or is it
     * even under construction and should reduce the house count (OutOfInventory)
     */
    type: "OutOfService" | "OutOfOrder" | "OutOfInventory";
  };
  UnitItemModel: {
    /** @description The unit id */
    id: string;
    /** @description The name for the unit */
    name: string;
    /** @description The description for the unit */
    description: string;
    property: definitions["EmbeddedPropertyModel"];
    unitGroup?: definitions["EmbeddedUnitGroupModel"];
    connectingUnit?: definitions["EmbeddedUnitModel"];
    status: definitions["UnitItemStatusModel"];
    /**
     * Format: int32
     * @description Maximum number of persons for the unit
     */
    maxPersons: number;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description Collection of user defined attributes of unit */
    attributes?: definitions["UnitAttributeModel"][];
    /** @description Collection of connected units */
    connectedUnits?: definitions["ConnectedUnitModel"][];
  };
  UnitItemStatusModel: {
    isOccupied: boolean;
    condition: "Clean" | "CleanToBeInspected" | "Dirty";
    maintenance?: definitions["UnitItemMaintenanceModel"];
  };
  /**
   * @example {
   *   "units": [
   *     {
   *       "id": "MUC-MTA",
   *       "name": "A.101",
   *       "description": "Single room",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SGL",
   *         "code": "SGL",
   *         "name": "Single",
   *         "description": "Single",
   *         "type": "BedRoom"
   *       },
   *       "connectingUnit": {
   *         "id": "MUC-QKY",
   *         "name": "S.101",
   *         "description": "Suite room",
   *         "unitGroupId": "MUC-SUI"
   *       },
   *       "status": {
   *         "isOccupied": true,
   *         "condition": "Dirty",
   *         "maintenance": {
   *           "id": "MUC-MTA-SGHZD",
   *           "type": "OutOfService"
   *         }
   *       },
   *       "maxPersons": 1,
   *       "created": "0001-01-01T00:00:00Z",
   *       "attributes": [
   *         {
   *           "id": "GRTDTLDD",
   *           "name": "Floor 2",
   *           "description": "Floor number"
   *         },
   *         {
   *           "id": "KQOSXHLS",
   *           "name": "Street view",
   *           "description": "View from the room"
   *         }
   *       ],
   *       "connectedUnits": []
   *     },
   *     {
   *       "id": "MUC-JQI",
   *       "name": "A.102",
   *       "description": "Double room",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "unitGroup": {
   *         "id": "MUC-DBL",
   *         "code": "DBL",
   *         "name": "Double",
   *         "description": "Double",
   *         "type": "BedRoom"
   *       },
   *       "connectingUnit": {
   *         "id": "MUC-QKY",
   *         "name": "S.101",
   *         "description": "Suite room",
   *         "unitGroupId": "MUC-SUI"
   *       },
   *       "status": {
   *         "isOccupied": false,
   *         "condition": "Clean",
   *         "maintenance": {
   *           "id": "MUC-JQI-GSZGK",
   *           "type": "OutOfOrder"
   *         }
   *       },
   *       "maxPersons": 2,
   *       "created": "0001-01-01T00:00:00Z",
   *       "attributes": [
   *         {
   *           "id": "GRTDTLDD",
   *           "name": "Floor 2",
   *           "description": "Floor number"
   *         }
   *       ],
   *       "connectedUnits": []
   *     },
   *     {
   *       "id": "MUC-QKY",
   *       "name": "S.101",
   *       "description": "Suite room",
   *       "property": {
   *         "id": "MUC",
   *         "code": "MUC",
   *         "name": "Demo Hotel Munich",
   *         "description": "This is the demo hotel Munich"
   *       },
   *       "unitGroup": {
   *         "id": "MUC-SUI",
   *         "code": "SUI",
   *         "name": "Suite",
   *         "description": "Suite",
   *         "type": "BedRoom"
   *       },
   *       "status": {
   *         "isOccupied": false,
   *         "condition": "Clean",
   *         "maintenance": {
   *           "id": "MUC-JQI-GSZGK",
   *           "type": "OutOfOrder"
   *         }
   *       },
   *       "maxPersons": 3,
   *       "created": "0001-01-01T00:00:00Z",
   *       "attributes": [
   *         {
   *           "id": "GRTDTLDD",
   *           "name": "Floor 2",
   *           "description": "Floor number"
   *         }
   *       ],
   *       "connectedUnits": [
   *         {
   *           "id": "MUC-MTA",
   *           "name": "A.101",
   *           "description": "Single room",
   *           "unitGroupId": "MUC-SGL",
   *           "condition": "Clean",
   *           "maxPersons": 1
   *         },
   *         {
   *           "id": "MUC-JQI",
   *           "name": "A.102",
   *           "description": "Double room",
   *           "unitGroupId": "MUC-DBL",
   *           "condition": "Clean",
   *           "maxPersons": 2
   *         }
   *       ]
   *     }
   *   ],
   *   "count": 3
   * }
   */
  UnitListModel: {
    /** @description List of units */
    units: definitions["UnitItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  UnitMaintenanceModel: {
    /** @description The id for the scheduled maintenance */
    id: string;
    /**
     * Format: date-time
     * @description Date and time the scheduled maintenance window starts<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    from: string;
    /**
     * Format: date-time
     * @description Date and time the scheduled maintenance window ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    to: string;
    /**
     * @description The type of maintenance that is planned for the unit. A small repair (OutOfService),
     * a bigger disfunction that does not allow to sell the unit (OutOfOrder) or is it
     * even under construction and should reduce the house count (OutOfInventory)
     */
    type: "OutOfService" | "OutOfOrder" | "OutOfInventory";
    /** @description The description text for the maintenance */
    description?: string;
  };
  /**
   * @example {
   *   "id": "MUC-MTA",
   *   "name": "A.101",
   *   "description": {
   *     "en": "First Floor Room 1",
   *     "de": "1.OG Zimmer 1"
   *   },
   *   "property": {
   *     "id": "MUC",
   *     "code": "MUC",
   *     "name": "Demo Hotel Munich",
   *     "description": "This is the demo hotel Munich"
   *   },
   *   "unitGroup": {
   *     "id": "MUC-DBL",
   *     "code": "DBL",
   *     "name": "Double",
   *     "description": "Double",
   *     "type": "BedRoom"
   *   },
   *   "connectingUnit": {
   *     "id": "MUC-QKY",
   *     "name": "S.101",
   *     "description": "Suite room",
   *     "unitGroupId": "MUC-SUI"
   *   },
   *   "status": {
   *     "isOccupied": false,
   *     "condition": "Clean",
   *     "maintenance": {
   *       "id": "MUC-MTA-SGHZD",
   *       "from": "2024-03-06T15:24:59.2921259+01:00",
   *       "to": "2024-03-08T15:24:59.2921259+01:00",
   *       "type": "OutOfService",
   *       "description": "The remote control for the TV needs to be replaced."
   *     }
   *   },
   *   "maxPersons": 2,
   *   "created": "0001-01-01T00:00:00Z",
   *   "attributes": [
   *     {
   *       "id": "KQOSXHLS",
   *       "name": "Floor 3",
   *       "description": "Floor number"
   *     },
   *     {
   *       "id": "ADVFSSUL",
   *       "name": "Street view",
   *       "description": "View from the room"
   *     }
   *   ],
   *   "connectedUnits": []
   * }
   */
  UnitModel: {
    /** @description The unit id */
    id: string;
    /** @description The name for the unit */
    name: string;
    /** @description The description for the unit */
    description: { [key: string]: string };
    property: definitions["EmbeddedPropertyModel"];
    unitGroup?: definitions["EmbeddedUnitGroupModel"];
    connectingUnit?: definitions["EmbeddedUnitModel"];
    status: definitions["UnitStatusModel"];
    /**
     * Format: int32
     * @description Maximum number of persons for the unit
     */
    maxPersons: number;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description Collection of user defined attributes of unit */
    attributes?: definitions["UnitAttributeModel"][];
    /** @description Collection of connected units */
    connectedUnits?: definitions["ConnectedUnitModel"][];
  };
  UnitStatusModel: {
    isOccupied: boolean;
    condition: "Clean" | "CleanToBeInspected" | "Dirty";
    maintenance?: definitions["UnitMaintenanceModel"];
  };
}

export interface operations {
  /** Get the list of properties.<br>You need to be authorized (no particular scope required) */
  InventoryPropertiesGet: {
    parameters: {
      query: {
        /** Filter result by property status */
        status?: ("Test" | "Live")[];
        /** Include archived properties in the result. If not set, or set to false, it only returns non-archived properties */
        includeArchived?: boolean;
        /** Filter result by country code */
        countryCode?: string[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
        expand?: "actions"[];
      };
    };
    responses: {
      /** Return all properties. */
      200: {
        schema: definitions["PropertyListModel"];
      };
      /** There are no properties found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create a new property.<br>You must have at least one of these scopes: 'properties.create, setup.manage'. */
  InventoryPropertiesPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the property. */
        body: definitions["CreatePropertyModel"];
      };
    };
    responses: {
      /** Creation of the new property was successful. */
      201: {
        headers: {};
        schema: definitions["PropertyCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Return total count of properties<br>You need to be authorized (no particular scope required) */
  InventoryProperties$countGet: {
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a property by id.<br>You need to be authorized (no particular scope required) */
  InventoryPropertiesByIdGet: {
    parameters: {
      path: {
        /** The id of the property. */
        id: string;
      };
      query: {
        /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
        languages?: string[];
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
        expand?: "actions"[];
      };
    };
    responses: {
      /** Return all the property data. */
      200: {
        schema: definitions["PropertyModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a property exists by id.<br>You need to be authorized (no particular scope required) */
  InventoryPropertiesByIdHead: {
    parameters: {
      path: {
        /** The id of the property. */
        id: string;
      };
    };
    responses: {
      /** The property exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here's a list of allowed operations:
   * - Replace Name
   * - Add, replace and remove Description
   * - Replace CompanyName
   * - Add, replace and remove ManagingDirectors
   * - Replace CommercialRegisterEntry
   * - Replace TaxId
   * - Replace Location
   * - Add, replace and remove BankAccount
   * - Replace PaymentTerms
   * - Set IsTemplate<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
   */
  InventoryPropertiesByIdPatch: {
    parameters: {
      path: {
        /** The id of the property. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this call to clone a specific property.
   * This operation creates a new property with inventory and rate plans from the specified property.<br>You must have at least one of these scopes: 'properties.create, setup.manage'.
   */
  "InventoryProperty-actionsByIdClonePost": {
    parameters: {
      path: {
        /** The id of the property. */
        id: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the property. */
        body: definitions["CreatePropertyModel"];
      };
    };
    responses: {
      /** Cloning of the existing property was successful. */
      201: {
        headers: {};
        schema: definitions["PropertyCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this endpoint to archive an existing live property
   * This operation set the IsArchived flag to true<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
   */
  "InventoryProperty-actionsByIdArchivePut": {
    parameters: {
      path: {
        /** The id of the property */
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this endpoint to move an existing test property to live
   * This operation changes the property status to 'Live'<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
   */
  "InventoryProperty-actionsByIdSet-livePut": {
    parameters: {
      path: {
        /** The id of the property */
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this endpoint to delete all transactional data related to some test property
   * This operation deletes all transactional data related to the specified property. The property must be in 'Test' status.<br>You must have at least one of these scopes: 'properties.manage, setup.manage'.
   */
  "InventoryProperty-actionsByIdResetPut": {
    parameters: {
      path: {
        /** The id of the property */
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of ISO country codes that could be used to create properties.<br>You need to be authorized (no particular scope required) */
  InventoryTypesCountriesGet: {
    responses: {
      /** Success. */
      200: {
        schema: definitions["CountryListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a unit by id.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
  InventoryUnitsByIdGet: {
    parameters: {
      path: {
        /** The id of the unit. */
        id: string;
      };
      query: {
        /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
        languages?: string[];
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, connectedUnits. All other values will be silently ignored. */
        expand?: ("property" | "unitGroup" | "connectedUnits")[];
      };
    };
    responses: {
      /** Return all the unit data. */
      200: {
        schema: definitions["UnitModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to delete a unit.<br>You must have at least one of these scopes: 'units.delete, setup.manage'. */
  InventoryUnitsByIdDelete: {
    parameters: {
      path: {
        /** The id of the unit. */
        id: string;
      };
    };
    responses: {
      /** Deletion of the unit was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a unit exists by id.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
  InventoryUnitsByIdHead: {
    parameters: {
      path: {
        /** The id of the unit. */
        id: string;
      };
    };
    responses: {
      /** The unit exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here's a list of allowed operations:
   * - Set unit condition
   * - Set unit description
   * - Set unit name
   * - Set unit unitGroupId
   * - Set unit maxPersons
   * - Add unit attribute
   * - Remove unit attribute<br>You must have at least one of these scopes: 'units.manage, setup.manage'.
   */
  InventoryUnitsByIdPatch: {
    parameters: {
      path: {
        /** The id of the unit. */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** The unit was successfully modified. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get the list of units.<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
  InventoryUnitsGet: {
    parameters: {
      query: {
        /** Return units for specific property */
        propertyId?: string;
        /** Return units for the specific unit group - <b>DEPRECATED: This property will be removed 20.04.2022. Use `UnitGroupIds` instead</b> */
        unitGroupId?: string;
        /** Return units with the specific unit groups */
        unitGroupIds?: string[];
        /** Return units with the specific unit attributes */
        unitAttributeIds?: string[];
        /** Return only occupied or vacant units */
        isOccupied?: boolean;
        /** Return units with the specific maintenance type */
        maintenanceType?: "OutOfService" | "OutOfOrder" | "OutOfInventory";
        /** Return units with a specific condition */
        condition?: "Clean" | "CleanToBeInspected" | "Dirty";
        /** This will filter all units where the provided text is contained in the unit name. The search is case insensitive. */
        textSearch?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, connectedUnits. All other values will be silently ignored. */
        expand?: ("property" | "unitGroup" | "connectedUnits")[];
      };
    };
    responses: {
      /** Return all units. */
      200: {
        schema: definitions["UnitListModel"];
      };
      /** No units were found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create a new unit.<br>You must have at least one of these scopes: 'units.create, setup.manage'. */
  InventoryUnitsPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the unit. */
        body: definitions["CreateUnitModel"];
      };
    };
    responses: {
      /** Creation of the new unit was successful. */
      201: {
        headers: {};
        schema: definitions["UnitCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here's a list of allowed operations:
   * - Set unit condition
   * - Set unit description
   * - Set unit name
   * - Set unit unitGroupId
   * - Set unit maxPersons
   * - Add unit attribute
   * - Remove unit attribute<br>You must have at least one of these scopes: 'units.manage, setup.manage'.
   */
  InventoryUnitsPatch: {
    parameters: {
      query: {
        unitIds: string[];
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** Units were successfully modified. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns number of units matching the filter criteria<br>You must have at least one of these scopes: 'units.read, setup.read, setup.manage'. */
  InventoryUnits$countGet: {
    parameters: {
      query: {
        /** Return units for specific property */
        propertyId?: string;
        /** Return units for the specific unit group - <b>DEPRECATED: This property will be removed 20.04.2022. Use `UnitGroupIds` instead</b> */
        unitGroupId?: string;
        /** Return units with the specific unit groups */
        unitGroupIds?: string[];
        /** Return units with the specific unit attributes */
        unitAttributeIds?: string[];
        /** Return only occupied or vacant units */
        isOccupied?: boolean;
        /** Return units with the specific maintenance type */
        maintenanceType?: "OutOfService" | "OutOfOrder" | "OutOfInventory";
        /** Return units with a specific condition */
        condition?: "Clean" | "CleanToBeInspected" | "Dirty";
        /** This will filter all units where the provided text is contained in the unit name. The search is case insensitive. */
        textSearch?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create multiple units, following a naming rule.<br>You must have at least one of these scopes: 'units.create, setup.manage'. */
  InventoryUnitsBulkPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the units. */
        body: definitions["BulkCreateUnitsModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["BulkUnitsCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get unit attribute by id<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
  "InventoryUnit-attributesByIdGet": {
    parameters: {
      path: {
        /** The id of the unit attribute */
        id: string;
      };
    };
    responses: {
      /** Returns unit attribute with specified id */
      200: {
        schema: definitions["UnitAttributeDefinitionModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Deletes unit attribute<br>You must have at least one of these scopes: 'unitattributes.delete, setup.manage'. */
  "InventoryUnit-attributesByIdDelete": {
    parameters: {
      path: {
        /** Id of unit attribute */
        id: string;
      };
    };
    responses: {
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a unit attribute exists<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
  "InventoryUnit-attributesByIdHead": {
    parameters: {
      path: {
        /** The id of the unit attribute. */
        id: string;
      };
    };
    responses: {
      /** The unit attribute exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here's a list of allowed operations:
   * - Replace / Remove Description<br>You must have at least one of these scopes: 'unitattributes.manage, setup.manage'.
   */
  "InventoryUnit-attributesByIdPatch": {
    parameters: {
      path: {
        /** Id of unit attribute */
        id: string;
      };
      body: {
        /** Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/. */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get unit attribute list<br>You must have at least one of these scopes: 'unitattributes.read, setup.read, setup.manage'. */
  "InventoryUnit-attributesGet": {
    parameters: {
      query: {
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Returns unit attribute list for given account */
      200: {
        schema: definitions["UnitAttributeDefinitionListModel"];
      };
      /** No unit attributes present for given account */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create a new unit attribute.<br>You must have at least one of these scopes: 'unitattributes.create, setup.manage'. */
  "InventoryUnit-attributesPost": {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The unit attribute. */
        body: definitions["CreateUnitAttributeDefinitionModel"];
      };
    };
    responses: {
      /** Creation of the new unit attribute was successful. */
      201: {
        headers: {};
        schema: definitions["UnitAttributeDefinitionCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get the list of unit groups.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
  "InventoryUnit-groupsGet": {
    parameters: {
      query: {
        /** Return unit groups for specific property */
        propertyId?: string;
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, connectedUnitGroups. All other values will be silently ignored. */
        expand?: ("property" | "connectedUnitGroups")[];
      };
    };
    responses: {
      /** Return all unit groups. */
      200: {
        schema: definitions["UnitGroupListModel"];
      };
      /** There are no unit groups found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create a new unit group.<br>You must have at least one of these scopes: 'unitgroups.create, setup.manage'. */
  "InventoryUnit-groupsPost": {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the unit group. */
        body: definitions["CreateUnitGroupModel"];
      };
    };
    responses: {
      /** Creation of the new unit group was successful. */
      201: {
        headers: {};
        schema: definitions["UnitGroupCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns number of unit groups matching the filter criteria<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
  "InventoryUnit-groups$countGet": {
    parameters: {
      query: {
        /** Return unit groups for specific property */
        propertyId?: string;
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a unit group by id.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
  "InventoryUnit-groupsByIdGet": {
    parameters: {
      path: {
        /** The id of the unit group. */
        id: string;
      };
      query: {
        /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
        languages?: string[];
        /** List of all embedded resources that should be expanded in the response. Possible values are: property, connectedUnitGroups. All other values will be silently ignored. */
        expand?: ("property" | "connectedUnitGroups")[];
      };
    };
    responses: {
      /** Return all the unit group data. */
      200: {
        schema: definitions["UnitGroupModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to modify a unit group.<br>You must have at least one of these scopes: 'unitgroups.manage, setup.manage'. */
  "InventoryUnit-groupsByIdPut": {
    parameters: {
      path: {
        /** The id of the unit group. */
        id: string;
      };
      body: {
        /** The definition of the unit group. */
        body: definitions["ReplaceUnitGroupModel"];
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** Replace of the unit group was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to delete a unit group.<br>You must have at least one of these scopes: 'unitgroups.delete, setup.manage'. */
  "InventoryUnit-groupsByIdDelete": {
    parameters: {
      path: {
        /** The id of the unit group. */
        id: string;
      };
    };
    responses: {
      /** Deletion of the unit group was successful. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if a unit group exists by id.<br>You must have at least one of these scopes: 'unitgroups.read, setup.read, setup.manage'. */
  "InventoryUnit-groupsByIdHead": {
    parameters: {
      path: {
        /** The id of the unit group. */
        id: string;
      };
    };
    responses: {
      /** The unit group exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
}

export interface external {}
