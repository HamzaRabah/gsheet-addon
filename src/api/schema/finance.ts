/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/finance/v1/folios": {
    /** Allowed actions are only returned, when the list is filtered by reservation ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosGet"];
    /** Use this call to create a new folio.<br>You must have at least one of these scopes: 'reservations.create, reservations.manage, folios.manage'. */
    post: operations["FinanceFoliosPost"];
  };
  "/finance/v1/folios/$count": {
    /** Returns number of folios matching the filter criteria.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFolios$countGet"];
  };
  "/finance/v1/folios/{id}": {
    /** Get a folio by ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosByIdGet"];
    /**
     * Deletes a folio. This cannot be undone.
     * You can delete a folio only if it's not a main folio,
     * and the folio is empty (it has no charges, allowance, payments or pending payments).
     * <br />
     * Requires 'allowed action': Delete.<br>You must have this scope: 'folios.manage'.
     */
    delete: operations["FinanceFoliosByIdDelete"];
    /** Check if the folio exists.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    head: operations["FinanceFoliosByIdHead"];
    /**
     * Here is the list of operations that are currently allowed:
     * - Replace debitor (for guest folios only)
     * - Add a company (not for house folios)
     * - Replace/remove a company (not for house folios)<br>You must have this scope: 'folios.manage'.
     */
    patch: operations["FinanceFoliosByIdPatch"];
  };
  "/finance/v1/folio-actions/{folioId}/charges": {
    /**
     * Adds a charge for any good or service, and directly posts it. Can be used to charge items that are not part of the reservation,
     * but should appear on the invoice.
     * <br />
     * Requires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
     */
    post: operations["FinanceFolio-actionsByFolioIdChargesPost"];
  };
  "/finance/v1/folio-actions/{folioId}/transitory-charges": {
    /**
     * Adds a transitory item for any good or service, and directly posts it. To be used for sales that are not revenue of the property,
     * but should appear on te guest's invoice.
     * <br />
     * Requires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
     */
    post: operations["FinanceFolio-actionsByFolioIdTransitory-chargesPost"];
  };
  "/finance/v1/folio-actions/{folioId}/cancellation-fee": {
    /**
     * Adds a cancellation fee, and directly posts it. Cancellation fees can only be posted on guest folios.
     * <br />
     * Requires 'allowed action': AddCancellationFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
     */
    post: operations["FinanceFolio-actionsByFolioIdCancellation-feePost"];
  };
  "/finance/v1/folio-actions/{folioId}/no-show-fee": {
    /**
     * Adds a no-show fee, and directly posts it. No-show fees can only be posted on guest folios.
     * <br />
     * Requires 'allowed action': AddNoShowFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
     */
    post: operations["FinanceFolio-actionsByFolioIdNo-show-feePost"];
  };
  "/finance/v1/folio-actions/{folioId}/close": {
    /**
     * Mark a folio as closed to prevent adding charges and payments. This action cannot be undone,
     * and is only possible if the balance is 0.
     * <br />
     * Requires 'allowed action': Close.<br>You must have this scope: 'folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdClosePut"];
  };
  "/finance/v1/folio-actions/{folioId}/reopen": {
    /**
     * Reopens a closed folio.
     * You can only reopen a folio if no invoice has been created for the folio.
     * Otherwise, use `invoice-actions/{invoiceId}/cancel` endpoint to cancel an invoice and reopen the folio.
     * <br />
     * Requires 'allowed action': Reopen.<br>You must have this scope: 'folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdReopenPut"];
  };
  "/finance/v1/folio-actions/{folioId}/move-charges": {
    /**
     * If one of the folios is closed, this action cannot be performed.<br /><br />
     * If any of the specified charges does not exist, this action cannot be performed.<br /><br />
     * Moving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdMove-chargesPut"];
  };
  "/finance/v1/folio-actions/bulk-move": {
    /**
     * If one of the folios is closed, this action cannot be performed.<br /><br />
     * If any of the specified charges does not exist, this action cannot be performed.<br /><br />
     * Moving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have this scope: 'folios.manage'.
     */
    put: operations["FinanceFolio-actionsBulk-movePut"];
  };
  "/finance/v1/folio-actions/{folioId}/move-all-charges": {
    /**
     * If one of the folios is closed, this action cannot be performed.<br /><br />
     * Only charges that can be moved will be moved.<br /><br /><br>You must have at least one of these scopes: 'charges.move, folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdMove-all-chargesPut"];
  };
  "/finance/v1/folio-actions/{folioId}/charges/{chargeId}/allowances": {
    /** Allowance value posted must not exceed source charge minus allowances posted for this charge<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdChargesByChargeIdAllowancesPost"];
  };
  "/finance/v1/folio-actions/{folioId}/allowances": {
    /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdAllowancesPost"];
  };
  "/finance/v1/folio-actions/{folioId}/bulk-allowances": {
    /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdBulk-allowancesPost"];
  };
  "/finance/v1/folio-actions/{folioId}/post-charges": {
    /**
     * Use this call for cases when the folio should be closed early. For example, when a guest wants to get the invoice right after the check-in
     * As posting charges before the service is delivered is potentially risky, this operation will fail if there are any unposted charges
     * further in the future than 7 days.
     * Posting open charges is only possible for fully prepaid folios.
     * <br />
     * Requires 'allowed action': PostOpenCharges.<br>You must have this scope: 'folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdPost-chargesPut"];
  };
  "/finance/v1/folio-actions/{folioId}/move-payments": {
    /**
     * Move payments from one guest/booking folio to another - moving between different bookings is not supported,
     * and will lead to an error. If one of the folios is closed, this action cannot be performed.<br />
     * The PSP reference, if present, will be removed when moving and only be persisted on the original payment.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.
     */
    put: operations["FinanceFolio-actionsByFolioIdMove-paymentsPut"];
  };
  "/finance/v1/folio-actions/{folioId}/correct": {
    /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have this scope: 'folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdCorrectPost"];
  };
  "/finance/v1/folio-actions/{folioId}/charges/{chargeId}/split": {
    /** <br>You must have at least one of these scopes: 'allowances.post, charges.create, folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdChargesByChargeIdSplitPost"];
  };
  "/finance/v1/folio-actions/{folioId}/payments/{paymentId}/split": {
    /** <br>You must have at least one of these scopes: 'payments.create, refunds.create, folios.manage'. */
    post: operations["FinanceFolio-actionsByFolioIdPaymentsByPaymentIdSplitPost"];
  };
  "/finance/v1/folios/{folioId}/payments": {
    /** Returns a list of all payments for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosByFolioIdPaymentsGet"];
    /**
     * A custom payment will not involve any automatic processing. This is best to be used for cash, cheque or voucher payments or payments that have
     * been processed by an external system and it should just be recorded in apaleo for accounting purposes.<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsPost"];
  };
  "/finance/v1/folios/{folioId}/payments/{paymentId}": {
    /** Get a payment by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosByFolioIdPaymentsByPaymentIdGet"];
  };
  "/finance/v1/folios/{folioId}/payments/by-terminal": {
    /**
     * Trigger a terminal payment for the folio. The payment will be processed asynchronously. Use the location header to poll for the status of the payment.
     * As long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsBy-terminalPost"];
  };
  "/finance/v1/folios/{folioId}/payments/by-authorization": {
    /**
     * Captures a specific amount from a pre-authorization and posts it to the folio. For the pre-authorization please ensure to set the respective metadata in the original payment
     * transaction. The flow type has to be set to <i>CaptureOnly</i>. For more information please refer to the documentation of <a href="https://apaleo.dev/guides/business-cases/ibe/get-the-money" target="_blank">how to do a pre-authorization on a booking engine</a>.
     * The payment will be processed asynchronously. Use the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount of allowed
     * payments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsBy-authorizationPost"];
  };
  "/finance/v1/folios/{folioId}/payments/by-payment-account": {
    /**
     * Trigger a payment for the folio using the payment account stored on the reservation. The payment will be processed asynchronously. Use the location header to poll
     * for the status of the payment. As long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes
     * automatically<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsBy-payment-accountPost"];
  };
  "/finance/v1/folios/{folioId}/payments/by-link": {
    /**
     * Creates a link to a payment form where guests can pay. To enable open invoice payment methods you need to provide at
     * least the paid charges with the request. For some open invoice payment methods you also need to ensure that the full
     * billing address of the folio is set, before you create the payment link. The payment will be processed asynchronously.
     * Use the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount
     * of allowed payments for the folio.<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsBy-linkPost"];
  };
  "/finance/v1/folios/{folioId}/payments/{paymentId}/cancel": {
    /** Sets a payment to cancelled and triggers the cancellation.<br>You must have this scope: 'folios.manage'. */
    put: operations["FinanceFoliosByFolioIdPaymentsByPaymentIdCancelPut"];
  };
  "/finance/v1/folios/{folioId}/refunds": {
    /** Returns a list of all refunds for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosByFolioIdRefundsGet"];
    /**
     * Trigger a generic refund for the folio. The refund will be processed asynchronously. Use the location header to poll for the status of the refund.
     * As long as a refund is pending it reduces the amount of allowed refunds for the folio. The refund times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdRefundsPost"];
  };
  "/finance/v1/folios/{folioId}/refunds/{refundId}": {
    /** Get a refund by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
    get: operations["FinanceFoliosByFolioIdRefundsByRefundIdGet"];
  };
  "/finance/v1/folios/{folioId}/payments/{paymentId}/refunds": {
    /**
     * Trigger a refund for a specific payment on this folio. The refund will be processed asynchronously. Use the location header to poll for
     * the status of the refund. As long as a refund is pending the allowed refund amount for this payment will be reduced by the amount. The refund
     * times out after 10 minutes automatically<br>You must have this scope: 'folios.manage'.
     */
    post: operations["FinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPost"];
  };
  "/finance/v1/invoices/preview-pdf": {
    /** Gets a preview invoice PDF for one specific folio.<br>You must have this scope: 'invoices.read'. */
    get: operations["FinanceInvoicesPreview-pdfGet"];
  };
  "/finance/v1/invoices/preview": {
    /** To see if the invoice creation would be successful, check the warnings.<br>You must have this scope: 'invoices.read'. */
    get: operations["FinanceInvoicesPreviewGet"];
  };
  "/finance/v1/invoices": {
    /** Gets the list of all invoices (the metadata only, not the files).<br>You must have this scope: 'invoices.read'. */
    get: operations["FinanceInvoicesGet"];
    /**
     * Creates an invoice for one specific folio. The invoice can only be created once.
     * The debitor needs to have name, city, postal code and country code, as these are required for invoices.
     * If the folio is not fully paid, this will check out the reservation on AR and create an invoice with outstanding payments.<br>You must have at least one of these scopes: 'invoices.create, invoices.manage'.
     */
    post: operations["FinanceInvoicesPost"];
  };
  "/finance/v1/invoices/{id}/pdf": {
    /** Gets an invoice PDF file by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'. */
    get: operations["FinanceInvoicesByIdPdfGet"];
  };
  "/finance/v1/invoices/{id}": {
    /** Gets invoice data by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'. */
    get: operations["FinanceInvoicesByIdGet"];
  };
  "/finance/v1/invoice-actions/{id}/pay": {
    /** Settles the invoice, if the invoice has an amount to be paid (total != 0).<br>You must have this scope: 'invoices.manage'. */
    put: operations["FinanceInvoice-actionsByIdPayPut"];
  };
  "/finance/v1/invoice-actions/{id}/cancel": {
    /**
     * For regular invoices and AR invoices that haven't been paid yet, creates a new cancellation invoice and opens the folio again.
     * For advance invoices, creates a new cancellation invoice.<br>You must have this scope: 'invoices.manage'.
     */
    put: operations["FinanceInvoice-actionsByIdCancelPut"];
  };
  "/finance/v1/accounts/aggregate-pairs-daily": {
    /** Returns total amount credited from one account to another<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    post: operations["FinanceAccountsAggregate-pairs-dailyPost"];
  };
  "/finance/v1/accounts/aggregate-daily": {
    /**
     * Returns credited and debited amounts aggregated by transactions' date (business day) for all accounts and a given period.
     * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.
     */
    post: operations["FinanceAccountsAggregate-dailyPost"];
  };
  "/finance/v1/accounts/aggregate": {
    /**
     * Returns credited and debited amounts aggregated by transactions' timestamp for all accounts and a given period.
     * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.
     */
    post: operations["FinanceAccountsAggregatePost"];
  };
  "/finance/v1/accounts/export": {
    /**
     * Returns the raw transaction data for a given property and time period.
     * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
     */
    post: operations["FinanceAccountsExportPost"];
  };
  "/finance/v1/accounts/export-daily": {
    /**
     * Returns the raw transaction data for a given property and time period.
     * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
     */
    post: operations["FinanceAccountsExport-dailyPost"];
  };
  "/finance/v1/accounts/export-gross-daily": {
    /**
     * Returns the raw transaction data for a given property and time period.
     * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
     */
    post: operations["FinanceAccountsExport-gross-dailyPost"];
  };
  "/finance/v1/accounts/schema": {
    /** Returns the schema of subledger, split into global and guest ledger.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceAccountsSchemaGet"];
  };
  "/finance/v1/global-accounts": {
    /** Returns a list of accounts in one property, having the same global account as parent.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceGlobal-accountsGet"];
  };
  "/finance/v1/guest-accounts": {
    /** Returns a list of accounts in one property for a reservation.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceGuest-accountsGet"];
  };
  "/finance/v1/external-accounts": {
    /** Returns a list of accounts in one property for a folio.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceExternal-accountsGet"];
  };
  "/finance/v1/accounts/{number}": {
    /** Returns one account, as specified by its number and the property.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceAccountsByNumberGet"];
  };
  "/finance/v1/accounts/child-accounts": {
    /** <br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
    get: operations["FinanceAccountsChild-accountsGet"];
  };
  "/finance/v1/types/currencies": {
    /** Returns a list of all currencies. */
    get: operations["FinanceTypesCurrenciesGet"];
  };
  "/finance/v1/types/payment-methods": {
    /** Returns a list of all supported payment methods. */
    get: operations["FinanceTypesPayment-methodsGet"];
  };
  "/finance/v1/types/service-types": {
    /** Returns a list of all supported service types. */
    get: operations["FinanceTypesService-typesGet"];
  };
  "/finance/v1/types/vat": {
    /**
     * Returns a list of all VAT types and percents for a country. Supported:<br />
     * - Albania (AL)<br />
     * - Austria (AT)<br />
     * - Azerbaijan (AZ)<br />
     * - Belgium (BE)<br />
     * - Bulgaria (BG)<br />
     * - Cape Verde (CV)<br />
     * - Croatia (HR)<br />
     * - Czech Republic (CZ)<br />
     * - Denmark (DK)<br />
     * - Finland (FI)<br />
     * - France (FR) - without the super-reduced 2.1% VAT<br />
     * - French Polynesia (PF)<br />
     * - Germany (DE)<br />
     * - Greece (GR)<br />
     * - Hungary (HU)<br />
     * - Indonesia (ID)<br />
     * - Ireland (IE)<br />
     * - Italy (IT)<br />
     * - Iceland (IS)<br />
     * - Japan (JP)<br />
     * - Malaysia (MY)<br />
     * - Mexico (MX)<br />
     * - Netherlands (NL)<br />
     * - New Zealand (NZ)<br />
     * - Norway (NO) - without the VAT for raw fish supplies<br />
     * - Portugal (PT)<br />
     * - Reunion (RE)<br />
     * - Saudi Arabia (SA)<br />
     * - Slovenia (SI)<br />
     * - South Africa (ZA)<br />
     * - Spain (ES)<br />
     * - Sweden (SE)<br />
     * - Switzerland (CH)<br />
     * - Taiwan (TW)<br />
     * - United Kingdom (GB)
     */
    get: operations["FinanceTypesVatGet"];
  };
}

export interface definitions {
  /**
   * @example {
   *   "transactions": [
   *     {
   *       "timestamp": "2024-03-12T09:20:23.1455803Z",
   *       "date": "2024-03-12",
   *       "debitedAccount": {
   *         "name": "Receivables for Reservation KFEMSDED-1",
   *         "number": "KFEMSDED-1_Receivables",
   *         "parentNumber": "1200",
   *         "type": "Receivables"
   *       },
   *       "creditedAccount": {
   *         "name": "Revenue Accommodation Other",
   *         "number": "RevenueAccommodation_Other:19",
   *         "parentNumber": "5000",
   *         "type": "Revenues"
   *       },
   *       "command": "PostCharge",
   *       "amount": {
   *         "amount": 1234.56,
   *         "currency": "EUR"
   *       },
   *       "receipt": {
   *         "type": "Custom",
   *         "number": "custom receipt"
   *       },
   *       "entryNumber": "00000321",
   *       "reference": "IDDQD-EXT-1",
   *       "referenceType": "House",
   *       "entryGroupNumber": "0000321"
   *     }
   *   ]
   * }
   */
  AccountingTransactionListModel: {
    /** @description The list of transactions */
    transactions: definitions["AccountingTransactionModel"][];
  };
  AccountingTransactionModel: {
    /**
     * Format: date-time
     * @description Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    timestamp: string;
    /**
     * Format: date
     * @description The business date when the booking was done
     * @example 2020-10-10
     */
    date: string;
    debitedAccount: definitions["ExportAccountModel"];
    creditedAccount: definitions["ExportAccountModel"];
    /** @description The type of business transaction which triggered the booking */
    command:
      | "PostCharge"
      | "PostPayment"
      | "MoveLineItem"
      | "PostPrepayment"
      | "PostToAccountsReceivables"
      | "PostPrepaymentVat"
      | "PostToLossOfAccountsReceivables"
      | "System";
    amount: definitions["PreciseMonetaryValueModel"];
    receipt?: definitions["ReceiptModel"];
    /** @description All transactions having the same number form one booking */
    entryNumber: string;
    /** @description The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio */
    reference: string;
    /** @description Does this transaction belong to a reservation, a house or an external folio */
    referenceType: "House" | "Guest" | "External" | "Booking";
    /** @description All transactions triggered by the same business transaction share one group number */
    entryGroupNumber: string;
  };
  /**
   * @example {
   *   "accountTransactionPairs": [
   *     {
   *       "debitedAccount": {
   *         "name": "Liabilities",
   *         "number": "3000",
   *         "type": "Liabilities"
   *       },
   *       "creditedAccount": {
   *         "name": "Receivables",
   *         "number": "1200",
   *         "type": "Receivables"
   *       },
   *       "amount": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ]
   * }
   */
  AccountingTransactionPairListModel: {
    /** @description The list of aggregated transaction pairs */
    accountTransactionPairs: definitions["AccountingTransactionPairModel"][];
  };
  AccountingTransactionPairModel: {
    debitedAccount: definitions["ExportAccountModel"];
    creditedAccount: definitions["ExportAccountModel"];
    amount: definitions["PreciseMonetaryValueModel"];
  };
  "ActionModel[PaymentAction,NotAllowedPaymentActionReason]": {
    action: "Cancel" | "OnlineRefund" | "ManualRefund";
    isAllowed: boolean;
    reasons?: definitions["ActionReasonModel[NotAllowedPaymentActionReason]"][];
  };
  "ActionReasonModel[NotAllowedPaymentActionReason]": {
    code:
      | "CancelNotAllowedForPaymentNotInStatusPending"
      | "CancelNotAllowedForPaymentNotOfPaymentLinkType"
      | "OnlineRefundNotAllowedForRestrictedPaymentMethodOrAcquirer"
      | "ManualRefundNotAllowedWhenOnlineRefundIsPossible";
    message: string;
  };
  /**
   * @example {
   *   "id": "XT347518-1-1",
   *   "feeChargeIds": [
   *     "XT347518-1-SERVICE-1"
   *   ]
   * }
   */
  AddedChargeModel: {
    /** @description The id of the added charge */
    id: string;
    /** @description The fee charges ids */
    feeChargeIds?: string[];
  };
  AddressModel: {
    addressLine1: string;
    addressLine2?: string;
    postalCode: string;
    city: string;
    regionCode?: string;
    countryCode: string;
  };
  AggregateTransactionItemModel: {
    account: definitions["ExportAccountModel"];
    creditedAmount: definitions["PreciseMonetaryValueModel"];
    debitedAmount: definitions["PreciseMonetaryValueModel"];
    balance: definitions["PreciseMonetaryValueModel"];
  };
  /**
   * @example {
   *   "aggregations": [
   *     {
   *       "account": {
   *         "name": "Payments",
   *         "number": "1000",
   *         "type": "Payments"
   *       },
   *       "creditedAmount": {
   *         "amount": 202.0,
   *         "currency": "EUR"
   *       },
   *       "debitedAmount": {
   *         "amount": 170.0,
   *         "currency": "EUR"
   *       },
   *       "balance": {
   *         "amount": -32.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "account": {
   *         "name": "Revenues",
   *         "number": "5000",
   *         "type": "Revenues"
   *       },
   *       "creditedAmount": {
   *         "amount": 233.0,
   *         "currency": "EUR"
   *       },
   *       "debitedAmount": {
   *         "amount": 265.0,
   *         "currency": "EUR"
   *       },
   *       "balance": {
   *         "amount": 32.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "total": {
   *     "creditedAmount": {
   *       "amount": 435.0,
   *       "currency": "EUR"
   *     },
   *     "debitedAmount": {
   *       "amount": 435.0,
   *       "currency": "EUR"
   *     },
   *     "balance": {
   *       "amount": 0.0,
   *       "currency": "EUR"
   *     }
   *   }
   * }
   */
  AggregateTransactionListModel: {
    /** @description Aggregated data for the main accounts. */
    aggregations: definitions["AggregateTransactionItemModel"][];
    total: definitions["AggregatesTotalModel"];
  };
  AggregatesTotalModel: {
    creditedAmount: definitions["PreciseMonetaryValueModel"];
    debitedAmount: definitions["PreciseMonetaryValueModel"];
    balance: definitions["PreciseMonetaryValueModel"];
  };
  AllowanceModel: {
    /** @description ID for allowances. This is unique within one folio. */
    id: string;
    amount: definitions["AmountModel"];
    /** @description Reason why this allowance was posted */
    reason: string;
    serviceType:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CancellationFees"
      | "NoShow"
      | "CityTax"
      | "SecondCityTax";
    /**
     * Format: date
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why move operation was performed */
    movedReason?: string;
    /** @description ID of a charge allowance posted for. `Null` if posted for folio */
    sourceChargeId?: string;
    /** @description ID of the custom sub-account the allowance has been posted to */
    subAccountId?: string;
  };
  /**
   * @example {
   *   "grossAmount": 107.0,
   *   "netAmount": 100.0,
   *   "vatType": "Reduced",
   *   "vatPercent": 7.0,
   *   "currency": "USD"
   * }
   */
  AmountModel: {
    /** Format: double */
    grossAmount: number;
    /** Format: double */
    netAmount: number;
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** Format: double */
    vatPercent: number;
    currency: string;
  };
  BankAccountModel: {
    iban?: string;
    bic?: string;
    bank?: string;
  };
  BulkAllowanceCreatedItemModel: {
    /** @description The id of the created allowance */
    id: string;
    /** @description The id of the charge the allowance has been added to */
    sourceChargeId: string;
  };
  /**
   * @example {
   *   "items": [
   *     {
   *       "id": "IDFKA-1-1-A-1",
   *       "sourceChargeId": "IDKFA-1-1-TS-1"
   *     },
   *     {
   *       "id": "IDFKA-1-1-A-2",
   *       "sourceChargeId": "IDKFA-1-1-ES-2"
   *     }
   *   ]
   * }
   */
  BulkAllowanceCreatedModel: {
    /** @description Allowances that have been created */
    items: definitions["BulkAllowanceCreatedItemModel"][];
  };
  BulkMoveItemRequest: {
    /** @description ID of the source folio */
    sourceFolioId: string;
    /** @description ID of the target folio */
    targetFolioId: string;
    /** @description The IDs of the charges that should be moved */
    chargeIds?: string[];
  };
  /**
   * @example {
   *   "items": [
   *     {
   *       "sourceFolioId": "SPRJDQNU-1",
   *       "targetFolioId": "KFCSQUID-1",
   *       "chargeIds": [
   *         "SPRJDQNU-1-C-1",
   *         "SPRJDQNU-1-C-5"
   *       ]
   *     },
   *     {
   *       "sourceFolioId": "TTDKOWNC-1",
   *       "targetFolioId": "YXPZMQAS-1",
   *       "chargeIds": [
   *         "TTDKOWNC-1-C-2",
   *         "TTDKOWNC-1-C-3"
   *       ]
   *     }
   *   ],
   *   "reason": "Test"
   * }
   */
  BulkMoveRequest: {
    /** @description The list of actions to perform */
    items: definitions["BulkMoveItemRequest"][];
    /** @description Description of why the move is performed */
    reason: string;
  };
  ChargeModel: {
    /** @description ID for charges. This is unique within one folio. */
    id: string;
    /** @description The type of the service or good */
    serviceType:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CancellationFees"
      | "NoShow"
      | "CityTax"
      | "SecondCityTax";
    /** @description The name, article number, or other description of this charge */
    name: string;
    /**
     * @description The name, article number, or other description of this charge
     * translated in different languages
     */
    translatedNames?: { [key: string]: string };
    /** @description Status: is this already posted? */
    isPosted: boolean;
    /**
     * Format: date
     * @description The day when the line item is (or was) due to be charged.
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why move operation was performed */
    movedReason?: string;
    routedFrom?: definitions["EmbeddedFolioModel"];
    routedTo?: definitions["EmbeddedFolioModel"];
    amount: definitions["AmountModel"];
    /** @description Receipt for this transaction */
    receipt?: string;
    /** @description Identifier used for grouping related charges together */
    groupId?: string;
    /** @description ID of the custom sub-account the charge has been posted to */
    subAccountId?: string;
    /**
     * Format: int32
     * @description The count of services provided
     */
    quantity: number;
    /** @description The type of the charge */
    type:
      | "Direct"
      | "TimeSlice"
      | "IncludedService"
      | "ExtraService"
      | "CityTax"
      | "NoShowFee"
      | "CancellationFee"
      | "ServiceFee"
      | "Tax"
      | "SecondCityTax";
  };
  /**
   * @example {
   *   "globalAccounts": [
   *     {
   *       "accountNumber": "9000",
   *       "name": "House",
   *       "type": "House",
   *       "hasChildren": false,
   *       "isArchived": true
   *     },
   *     {
   *       "accountNumber": "1000",
   *       "name": "Payments",
   *       "type": "Payments",
   *       "hasChildren": true,
   *       "isArchived": false
   *     },
   *     {
   *       "accountNumber": "5000",
   *       "name": "Revenues",
   *       "type": "Revenues",
   *       "hasChildren": true,
   *       "isArchived": false
   *     }
   *   ],
   *   "guestAccounts": [
   *     {
   *       "accountNumber": "3000",
   *       "name": "Guest Liabilities",
   *       "type": "Liabilities",
   *       "hasChildren": true,
   *       "isArchived": false
   *     },
   *     {
   *       "accountNumber": "1200",
   *       "name": "Guest Receivables",
   *       "type": "Receivables",
   *       "hasChildren": true,
   *       "isArchived": false
   *     }
   *   ],
   *   "externalAccounts": [
   *     {
   *       "accountNumber": "1200",
   *       "name": "External Receivables",
   *       "type": "Receivables",
   *       "hasChildren": true,
   *       "isArchived": false
   *     }
   *   ],
   *   "bookingAccounts": [
   *     {
   *       "accountNumber": "1200",
   *       "name": "Liabilities",
   *       "type": "Liabilities",
   *       "hasChildren": true,
   *       "isArchived": false
   *     }
   *   ]
   * }
   */
  ChartOfAccountsModel: {
    /** @description The predefined list of global accounts of a property's subledger */
    globalAccounts: definitions["SlimFinanceAccountModel"][];
    /** @description The predefined list of guest specific accounts of a property's subledger. */
    guestAccounts: definitions["SlimFinanceAccountModel"][];
    /** @description The predefined list of external accounts of a property's subledger. */
    externalAccounts: definitions["SlimFinanceAccountModel"][];
    /** @description The predefined list of booking accounts of a property's subledger. */
    bookingAccounts: definitions["SlimFinanceAccountModel"][];
  };
  CommercialInfoModel: {
    registerEntry: string;
    taxId: string;
    managingDirectors?: string;
  };
  CompanyInfoModel: {
    /** @description Name of the company */
    name: string;
    /** @description Tax or Vat ID of the company */
    taxId?: string;
    /** @description The additional tax ID of the company (e.g. SIRET in France, Codice Destinatario in Italy) */
    additionalTaxId?: string;
  };
  /**
   * @example {
   *   "reason": "Minibar is not paid by the company",
   *   "chargeIds": [
   *     "IDDQD-1-C-1",
   *     "IDDQD-1-C-5"
   *   ],
   *   "allowanceIds": [
   *     "IDDQD-1-A-1",
   *     "IDDQD-1-A-5"
   *   ],
   *   "transitoryChargeIds": [
   *     "IDDQD-1-TC-1",
   *     "IDDQD-1-TC-5"
   *   ]
   * }
   */
  CorrectFolioRequest: {
    /** @description Description of why the correction is performed */
    reason: string;
    /** @description The IDs of the charges that should be moved */
    chargeIds?: string[];
    /**
     * @description The IDs of the allowances that should be moved
     * Only moving global allowances is supported
     */
    allowanceIds?: string[];
    /** @description The IDs of the transitory charges that should be moved */
    transitoryChargeIds?: string[];
  };
  /**
   * @example {
   *   "count": 50
   * }
   */
  CountModel: {
    /** Format: int64 */
    count: number;
  };
  /**
   * @example {
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "paidCharges": [
   *     {
   *       "chargeId": "BLIPKWXP-1-1-1",
   *       "amount": 200.0
   *     }
   *   ]
   * }
   */
  CreateAccountPaymentRequest: {
    /** @description Account owner of the payment account, default is `Guest` */
    accountOwner?: "Guest" | "Booker";
    amount: definitions["MonetaryValueModel"];
    /** @description List of charges and amount being covered by this payment. */
    paidCharges?: definitions["PaymentPaidChargesRequest"][];
  };
  CreateAllowanceBulkItemModel: {
    /** @description The ID of the charge */
    chargeId: string;
    amount: definitions["MonetaryValueModel"];
  };
  /**
   * @example {
   *   "items": [
   *     {
   *       "chargeId": "IDDQD-1-1-TS-1",
   *       "amount": {
   *         "amount": 13.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "chargeId": "IDDQD-1-1-ES-2",
   *       "amount": {
   *         "amount": 37.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "reason": "discount"
   * }
   */
  CreateAllowanceBulkModel: {
    /** @description The list of actions to perform */
    items: definitions["CreateAllowanceBulkItemModel"][];
    /** @description Description of why allowances are added */
    reason: string;
    /**
     * Format: date
     * @description The business date of the allowance. Defaults to the current date.
     * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "reason": "Reason",
   *   "amount": {
   *     "amount": 1.0,
   *     "currency": "EUR"
   *   }
   * }
   */
  CreateAllowanceForChargeModel: {
    /** @description Reason why this allowance is posted */
    reason: string;
    amount: definitions["MonetaryValueModel"];
    /**
     * Format: date
     * @description The business date of the allowance. Defaults to the current date.
     * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "serviceType": "Other",
   *   "vatType": "Normal",
   *   "subAccountId": "MUC-REST",
   *   "reason": "Good guy discount",
   *   "amount": {
   *     "amount": 22.0,
   *     "currency": "EUR"
   *   }
   * }
   */
  CreateAllowanceForFolioModel: {
    /** @description The service type, used by accounting to determine the correct revenue account */
    serviceType:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CityTax"
      | "SecondCityTax";
    /** @description The VAT type, used by accounting to determine the correct vat amount and account */
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** @description ID of the custom sub-account to post the allowance to, used by accounting to determine the correct revenue account */
    subAccountId?: string;
    /** @description Reason why this allowance is posted */
    reason: string;
    amount: definitions["MonetaryValueModel"];
    /**
     * Format: date
     * @description The business date of the allowance. Defaults to the current date.
     * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "transactionReference": "564578124534890J",
   *   "amount": {
   *     "amount": 330.0,
   *     "currency": "EUR"
   *   },
   *   "paidCharges": [
   *     {
   *       "chargeId": "BLIPKWXP-1-1-1",
   *       "amount": 230.0
   *     }
   *   ]
   * }
   */
  CreateAuthorizationPaymentRequest: {
    /** @description Reference to the original authorization transaction */
    transactionReference: string;
    amount: definitions["MonetaryValueModel"];
    /** @description List of charges and amount being covered by this payment. */
    paidCharges?: definitions["PaymentPaidChargesRequest"][];
  };
  /**
   * @example {
   *   "serviceType": "FoodAndBeverages",
   *   "vatType": "Normal",
   *   "subAccountId": "MUC-BEER",
   *   "name": "Restaurant",
   *   "amount": {
   *     "amount": 23.0,
   *     "currency": "EUR"
   *   },
   *   "receipt": "R23412"
   * }
   */
  CreateChargeModel: {
    /** @description The service type, used by accounting to determine the correct revenue account */
    serviceType:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CityTax"
      | "SecondCityTax";
    /** @description The VAT type, used by accounting to determine the correct vat amount and account */
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** @description ID of the custom sub-account to post the charge to, used by accounting to determine the correct revenue account */
    subAccountId?: string;
    /** @description The name, article number, or other description of this charge */
    name: string;
    amount: definitions["MonetaryValueModel"];
    /** @description Receipt for this transaction */
    receipt?: string;
    /**
     * Format: int32
     * @description The count of services provided. Defaults to 1.
     * NOTE: this field will become required 07.05.2020.
     */
    quantity?: number;
    /**
     * Format: date
     * @description The business date of the charge. Defaults to the current date.
     * In some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "method": "Cash",
   *   "receipt": "BLIPKWXP-1",
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "paidCharges": [
   *     {
   *       "chargeId": "BLIPKWXP-1-1-1",
   *       "amount": 230.0
   *     }
   *   ]
   * }
   */
  CreateCustomPaymentRequest: {
    /**
     * @description The payment method. Use 'CreditCard', if none of the specific credit cards types matches. 'Booking.com' only makes sense, if
     * the property (hotel) configured Booking.com > Finance to be 'Payments by Booking.com'
     */
    method:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck";
    /**
     * @description The optional receipt you want to store for the payment. It defaults to the reservation or external folio id.
     * This field is required if you are adding payment to the house account
     */
    receipt?: string;
    /**
     * Format: date
     * @description The business date of the payment. Defaults to the current date.
     * In some cases you might want to post the payments to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
    amount: definitions["MonetaryValueModel"];
    /** @description List of charges and amount being covered by this payment. */
    paidCharges?: definitions["PaymentPaidChargesRequest"][];
  };
  /**
   * @example {
   *   "reservationId": "TS23XF",
   *   "debitor": {
   *     "title": "Dr",
   *     "firstName": "Jon",
   *     "name": "Doe",
   *     "address": {
   *       "addressLine1": "My Street 1",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     },
   *     "company": {
   *       "name": "Horns & Hooves Inc",
   *       "taxId": "TAX-12345",
   *       "additionalTaxId": "TAX2-12345"
   *     },
   *     "personalTaxId": "123456789",
   *     "reference": "SRC-1232"
   *   },
   *   "type": "Guest"
   * }
   */
  CreateFolioModel: {
    /** @description The ID of the reservation for which a guest folio should be created */
    reservationId?: string;
    /** @description The ID of the company for which a folio should be created */
    companyId?: string;
    debitor: definitions["FolioDebitorModel"];
    /**
     * @description The type of the folio to create. Default is the guest folio.
     * This field will become required 01.11.2019.
     */
    type?: "Guest" | "External";
    /** @description The ID of the property for which an external folio should be created. */
    propertyId?: string;
    /**
     * @description Optional code for external folios.
     * If present, the id of the folio will be propertyId-code (MUC-SOMETHING);
     * If no code is provided, the id of the folio will be propertyId-ext-number (MUC-EXT-282).
     */
    code?: string;
  };
  /**
   * @example {
   *   "method": "Cash",
   *   "amount": {
   *     "amount": 10.0,
   *     "currency": "EUR"
   *   },
   *   "receipt": "CSH-201824120003"
   * }
   */
  CreateFolioRefundRequest: {
    /** @description The payment method the refund will be accounted to */
    method:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck";
    amount: definitions["MonetaryValueModel"];
    /** @description The receipt for the refund */
    receipt?: string;
    /**
     * Format: date
     * @description The business date of the refund. Defaults to the current date.
     * In some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /** @description A warning about what would fail if you would try to create an invoice with the current folio. */
  CreateInvoiceWarningModel: {
    /** @description The general classification of the warning, why an invoice would not be created if you would try to create it for the current folio. */
    type:
      | "InvoiceAlreadyExists"
      | "NotAllChargesPosted"
      | "DebitorDetailsMissing"
      | "InvoiceHasPendingPayments"
      | "NoCompanyFound"
      | "CompanyCannotCheckOutOnAr"
      | "IsHouseFolio"
      | "CannotCreateCompanyInvoiceForExternal"
      | "CheckOutOnArIsNotAllowed"
      | "IsEmptyFolio";
    /** @description Optionally, additional information about the warning */
    message?: string;
  };
  /**
   * @example {
   *   "expiresAt": "2024-03-14T09:20:22.5984968Z",
   *   "countryCode": "de",
   *   "description": "Prepayment for the group booking apaleo Summer party",
   *   "payerEmail": "0chai@hemenal5.space",
   *   "amount": {
   *     "amount": 150.0,
   *     "currency": "EUR"
   *   },
   *   "paidCharges": [
   *     {
   *       "chargeId": "BLIPKWXP-1-1-1",
   *       "amount": 230.0
   *     }
   *   ]
   * }
   */
  CreatePaymentLinkRequest: {
    /**
     * Format: date-time
     * @description The date that the link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    expiresAt: string;
    /** @description The payer's country code. Used to provide suitable for the payer payment methods and use default country language */
    countryCode: string;
    /** @description Payment description. It will be shown on the payment form of the link */
    description?: string;
    /**
     * @description The email address of the payer or cardholder. It can be used to verify the identity of the payer and
     * allow to catch a fraudulent usage of the payment account if the email address does not match the one
     * on file at the bank
     */
    payerEmail?: string;
    amount: definitions["MonetaryValueModel"];
    /** @description List of charges and amount being covered by this payment. */
    paidCharges?: definitions["PaymentPaidChargesRequest"][];
  };
  /**
   * @example {
   *   "amount": {
   *     "amount": 10.0,
   *     "currency": "EUR"
   *   }
   * }
   */
  CreatePaymentRefundRequest: {
    amount: definitions["MonetaryValueModel"];
    /**
     * Format: date
     * @description The business date of the refund. Defaults to the current date.
     * In some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "terminalId": "V400m-324689704",
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "paidCharges": [
   *     {
   *       "chargeId": "BLIPKWXP-1-1-1",
   *       "amount": 230.0
   *     }
   *   ]
   * }
   */
  CreateTerminalPaymentRequest: {
    /** @description Terminal to be used for the payment */
    terminalId: string;
    amount: definitions["MonetaryValueModel"];
    /** @description List of charges and amount being covered by this payment. */
    paidCharges?: definitions["PaymentPaidChargesRequest"][];
  };
  /**
   * @example {
   *   "name": "Restaurant",
   *   "amount": {
   *     "amount": 23.0,
   *     "currency": "EUR"
   *   },
   *   "receipt": "R23412"
   * }
   */
  CreateTransitoryChargeModel: {
    /** @description The name, article number, or other description of this item */
    name: string;
    amount: definitions["MonetaryValueModel"];
    /** @description Receipt for this transaction */
    receipt?: string;
    /** @description Identifier used for grouping related charges together */
    groupId?: string;
    /** @description The service type. This is not used by accounting, but can be entered and stored on the charge. */
    serviceType?:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CityTax"
      | "SecondCityTax";
    /**
     * Format: int32
     * @description The count of services provided. Defaults to 1.
     * NOTE: this field will become required 07.05.2020.
     */
    quantity?: number;
    /**
     * Format: date
     * @description The business date of the charge. Defaults to the current date.
     * In some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "id": "XT347518-1-1"
   * }
   */
  CreatedSubResourceIdModel: {
    id: string;
  };
  /**
   * @example {
   *   "isoCurrencies": [
   *     "AED",
   *     "AUD",
   *     "EUR",
   *     "USD",
   *     "XCD"
   *   ]
   * }
   */
  CurrencyListModel: {
    /** @description List of ISO currencies. */
    isoCurrencies: string[];
  };
  EmbeddedCompanyModel: {
    /** @description The company ID */
    id: string;
    /** @description The code of the company */
    code?: string;
    /** @description The name of the company */
    name?: string;
    /** @description Whether or not the company can check out on AR */
    canCheckOutOnAr?: boolean;
  };
  EmbeddedFolioModel: {
    /** @description Folio ID */
    id: string;
    /** @description Name of the debitor - the one who will pay the bill */
    debitor?: string;
  };
  EmbeddedInvoiceModel: {
    /** @description Invoice id */
    id: string;
  };
  EmbeddedPropertyModel: {
    /** @description The property id */
    id: string;
    /** @description The code for the property that can be shown in reports and table views */
    code?: string;
    /** @description The name for the property */
    name?: string;
    /** @description The description for the property */
    description?: string;
  };
  EmbeddedReservationModel: {
    /** @description Reservation id */
    id: string;
    /** @description Booking id */
    bookingId: string;
  };
  ExportAccountModel: {
    /** @description The account name */
    name: string;
    /** @description The account number */
    number: string;
    /** @description The number of the parent account */
    parentNumber?: string;
    /** @description The account type */
    type:
      | "Revenues"
      | "Payments"
      | "Liabilities"
      | "Receivables"
      | "Vat"
      | "House"
      | "AccountsReceivable"
      | "CityTaxes"
      | "TransitoryItems"
      | "VatOnLiabilities"
      | "LossOfAccountsReceivable"
      | "SecondCityTax";
  };
  ExportGrossTransactionItemModel: {
    /**
     * Format: date-time
     * @description Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    timestamp: string;
    /**
     * Format: date
     * @description The business date when the booking was done
     * @example 2020-10-10
     */
    date: string;
    debitedAccount: definitions["ExportAccountModel"];
    creditedAccount: definitions["ExportAccountModel"];
    /** @description The type of business transaction which triggered the booking */
    command:
      | "PostCharge"
      | "PostPayment"
      | "MoveLineItem"
      | "PostPrepayment"
      | "PostToAccountsReceivables"
      | "PostPrepaymentVat"
      | "PostToLossOfAccountsReceivables"
      | "System";
    /** @description The currency of the transaction */
    currency: string;
    /**
     * Format: double
     * @description The gross amount being booked
     */
    grossAmount: number;
    /**
     * Format: double
     * @description The net amount being booked
     */
    netAmount: number;
    /** @description The taxes which make up the difference between net and gross amount */
    taxes?: definitions["TaxAmountModel"][];
    receipt: definitions["ReceiptModel"];
    /** @description The original raw transaction entry number which got converted to these one or 2 lines. */
    sourceEntryNumber: string;
    /** @description The reference for the transactions, reservation id for guest folios, booking id for booking folio, folio id for external folios, property code for the house folio */
    reference: string;
    /** @description Does this transaction belong to a reservation, a house or an external folio */
    referenceType: "House" | "Guest" | "External" | "Booking";
  };
  /**
   * @example {
   *   "transactions": [
   *     {
   *       "timestamp": "2024-03-12T09:20:23.1880627Z",
   *       "date": "2024-03-06",
   *       "debitedAccount": {
   *         "name": "Cash Payment",
   *         "number": "1600",
   *         "type": "Payments"
   *       },
   *       "creditedAccount": {
   *         "name": "Receivables for Reservation QPMZZTUK-1",
   *         "number": "QPMZZTUK-1_Receivables",
   *         "type": "Receivables"
   *       },
   *       "command": "PostCharge",
   *       "currency": "EUR",
   *       "grossAmount": 100.0,
   *       "netAmount": 100.0,
   *       "taxes": [],
   *       "receipt": {
   *         "type": "Reservation",
   *         "number": "QPMZZTUK-1-V3"
   *       },
   *       "sourceEntryNumber": "IHQNWLZL",
   *       "reference": "SRC-123",
   *       "referenceType": "Guest"
   *     },
   *     {
   *       "timestamp": "2024-03-12T09:20:23.1880696Z",
   *       "date": "2024-03-06",
   *       "debitedAccount": {
   *         "name": "Revenues Accommodation",
   *         "number": "5001",
   *         "type": "Payments"
   *       },
   *       "creditedAccount": {
   *         "name": "House Account",
   *         "number": "HOUSE_HCF",
   *         "type": "Receivables"
   *       },
   *       "command": "PostCharge",
   *       "currency": "EUR",
   *       "grossAmount": 214.0,
   *       "netAmount": 200.0,
   *       "taxes": [
   *         {
   *           "type": "Reduced",
   *           "percent": 7.0,
   *           "amount": 14.0
   *         }
   *       ],
   *       "receipt": {
   *         "type": "Reservation",
   *         "number": "QPMZZTUK-1-V3"
   *       },
   *       "sourceEntryNumber": "IHQNWLZL",
   *       "reference": "SRC-123",
   *       "referenceType": "Guest"
   *     }
   *   ]
   * }
   */
  ExportGrossTransactionListModel: {
    /** @description List of transactions with all details. */
    transactions: definitions["ExportGrossTransactionItemModel"][];
  };
  ExternalReference: {
    /** @description The merchant reference ('order number') */
    merchantReference: string;
    /** @description The globally unique identifier of this payment in the reports of the payment service */
    pspReference: string;
  };
  /**
   * @example {
   *   "accounts": [
   *     {
   *       "accountNumber": "1100",
   *       "name": "Credit Card Payment",
   *       "type": "Payments",
   *       "hasChildren": true,
   *       "isArchived": false
   *     },
   *     {
   *       "accountNumber": "1100",
   *       "name": "Bank Transfer",
   *       "type": "Payments",
   *       "hasChildren": false,
   *       "isArchived": true
   *     }
   *   ],
   *   "count": 0
   * }
   */
  FinanceAccountListModel: {
    /** @description List of accounts in a property, having one specific parent. */
    accounts: definitions["SlimFinanceAccountModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "accountNumber": "1000",
   *   "name": "Other Revenues",
   *   "type": "Revenues",
   *   "hasChildren": false,
   *   "parentNumber": "5000",
   *   "isArchived": false,
   *   "transactions": [
   *     {
   *       "timestamp": "2024-03-06T13:25:04.3329251+01:00",
   *       "date": "2024-03-06",
   *       "debitedAccount": {
   *         "name": "Cash Payment",
   *         "number": "1600",
   *         "type": "Payments"
   *       },
   *       "creditedAccount": {
   *         "name": "Revenues Accommodation",
   *         "number": "5001",
   *         "type": "Receivables"
   *       },
   *       "command": "PostCharge",
   *       "amount": {
   *         "amount": 180.0,
   *         "currency": "EUR"
   *       },
   *       "entryNumber": "2017122500000001",
   *       "reference": "SRC-123",
   *       "referenceType": "Guest",
   *       "entryGroupNumber": "2017122500000001"
   *     },
   *     {
   *       "timestamp": "2024-03-06T14:25:04.3329251+01:00",
   *       "date": "2024-03-06",
   *       "debitedAccount": {
   *         "name": "Cash Payment",
   *         "number": "1600",
   *         "type": "Payments"
   *       },
   *       "creditedAccount": {
   *         "name": "Revenues Accommodation",
   *         "number": "5001",
   *         "type": "Receivables"
   *       },
   *       "command": "PostCharge",
   *       "amount": {
   *         "amount": 210.0,
   *         "currency": "EUR"
   *       },
   *       "entryNumber": "2017122500000002",
   *       "reference": "SRC-123",
   *       "referenceType": "Guest",
   *       "entryGroupNumber": "2017122500000002"
   *     }
   *   ]
   * }
   */
  FinanceAccountModel: {
    /** @description The account number. Unique identifier within one property. */
    accountNumber: string;
    /** @description The name of the account. */
    name: string;
    /** @description The type of account. */
    type:
      | "Revenues"
      | "Payments"
      | "Liabilities"
      | "Receivables"
      | "Vat"
      | "House"
      | "AccountsReceivable"
      | "CityTaxes"
      | "TransitoryItems"
      | "VatOnLiabilities"
      | "LossOfAccountsReceivable"
      | "SecondCityTax";
    /**
     * @description Indicates whether this account has children / sub accounts or not. The children can be retrieved via GET /accounts and querying
     * by parent.
     */
    hasChildren: boolean;
    /** @description Parent account number. Null for top-level accounts. */
    parentNumber?: string;
    /** @description Indicates whether this account is archived ot not. */
    isArchived: boolean;
    /** @description All transactions / bookings involving this account. */
    transactions?: definitions["AccountingTransactionModel"][];
  };
  /**
   * @example {
   *   "id": "XKCD-17"
   * }
   */
  FolioCreatedModel: {
    /** @description The folio id */
    id: string;
  };
  FolioDebitorModel: {
    /**
     * @description Whether the debitor is the booker, the primary guest, an additional guest, or the company.
     * When the folio has a company, the only possible value is 'Company'. 'Property' is a reserved type for the house folio.
     */
    type?:
      | "Booker"
      | "PrimaryGuest"
      | "Company"
      | "AdditionalGuest"
      | "Property";
    /** @description Title */
    title?: "Mr" | "Ms" | "Dr" | "Prof" | "Mrs" | "Other";
    /** @description First name */
    firstName?: string;
    /** @description Last name */
    name?: string;
    address?: definitions["NonStrictAddressModel"];
    company?: definitions["CompanyInfoModel"];
    /** @description Debitor's Tax Id if debitor is a person */
    personalTaxId?: string;
    /** @description Any additional information about the debitor that should be present on the invoice */
    reference?: string;
    /** @description Debitor's email */
    email?: string;
  };
  FolioItemModel: {
    /** @description The id of the folio */
    id: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    updated: string;
    /** @description The folio type */
    type?: "House" | "Guest" | "External" | "Booking";
    debitor?: definitions["FolioDebitorModel"];
    /**
     * Format: date
     * @description The date when the folio has been closed
     * @example 2020-10-10
     */
    closingDate?: string;
    /** @description Set to `true` if this is the main folio for the reservation */
    isMainFolio?: boolean;
    /** @description Set to `true` if the folio has no unmoved [transitory] charges, unmoved payments, and allowances. */
    isEmpty?: boolean;
    reservation?: definitions["EmbeddedReservationModel"];
    /** @description The id of the booking linked to this folio */
    bookingId?: string;
    company?: definitions["EmbeddedCompanyModel"];
    balance: definitions["MonetaryValueModel"];
    /** @description Set to true, if the folio has been checked out on accounts receivable */
    checkedOutOnAccountsReceivable?: boolean;
    /**
     * @description Depending on the state of the folio, certain warnings are shown.
     * This list includes all folio warnings.
     */
    folioWarnings?: "IncompleteBillingAddress"[];
    /**
     * @description Depending on the state of the folio, certain actions are allowed or not.
     * This list includes all actions you can perform on this folio.
     */
    allowedActions?: (
      | "AddCharge"
      | "AddAllowance"
      | "AddCancellationFee"
      | "AddNoShowFee"
      | "AddPayment"
      | "AddRefund"
      | "CheckoutOnAr"
      | "Close"
      | "PostOpenCharges"
      | "CorrectFolio"
      | "ChangeAddress"
      | "ChangeAddressWithSimpleDebitor"
      | "Delete"
      | "Reopen"
      | "CreateInvoice"
      | "CreateAdvanceInvoice"
      | "CancelLastInvoice"
      | "CreateInvoiceWithSimpleDebitor"
      | "CreatePrepaymentNotice"
      | "CreateProFormaInvoice"
      | "CreateDepositReceipt"
    )[];
    /** @description All invoices that have been created for this folio. This is only set on folios of type 'guest' */
    relatedInvoices?: definitions["EmbeddedInvoiceModel"][];
    /** @description Status of the folio */
    status: "Open" | "Closed" | "ClosedWithInvoice";
    /** @description The list of charges */
    charges?: definitions["ChargeModel"][];
    /** @description The list of allowances */
    allowances?: definitions["AllowanceModel"][];
    /** @description The list of transitory charges */
    transitoryCharges?: definitions["TransitoryChargeModel"][];
    /** @description The list of payments */
    payments?: definitions["PaymentModel"][];
  };
  /**
   * @example {
   *   "folios": [
   *     {
   *       "id": "XKCD-17",
   *       "created": "0001-01-01T00:00:00Z",
   *       "updated": "0001-01-01T00:00:00Z",
   *       "type": "Guest",
   *       "debitor": {
   *         "title": "Mr",
   *         "name": "Fisher",
   *         "personalTaxId": "123456789"
   *       },
   *       "isMainFolio": true,
   *       "isEmpty": false,
   *       "reservation": {
   *         "id": "XKCD-17",
   *         "bookingId": "XKCD-17"
   *       },
   *       "balance": {
   *         "amount": 223.59,
   *         "currency": "EUR"
   *       },
   *       "checkedOutOnAccountsReceivable": false,
   *       "allowedActions": [
   *         "AddCharge",
   *         "AddPayment",
   *         "Close"
   *       ],
   *       "relatedInvoices": [
   *         {
   *           "id": "00010675"
   *         }
   *       ],
   *       "status": "Open"
   *     },
   *     {
   *       "id": "BRC-231",
   *       "created": "0001-01-01T00:00:00Z",
   *       "updated": "0001-01-01T00:00:00Z",
   *       "type": "House",
   *       "debitor": {
   *         "title": "Mr",
   *         "name": "Lee",
   *         "personalTaxId": "123456789"
   *       },
   *       "isMainFolio": true,
   *       "isEmpty": false,
   *       "reservation": {
   *         "id": "BRC-231",
   *         "bookingId": "BRC-231"
   *       },
   *       "balance": {
   *         "amount": 364.83,
   *         "currency": "EUR"
   *       },
   *       "checkedOutOnAccountsReceivable": false,
   *       "allowedActions": [
   *         "AddCharge",
   *         "AddPayment",
   *         "Close"
   *       ],
   *       "relatedInvoices": [
   *         {
   *           "id": "00010672"
   *         }
   *       ],
   *       "status": "Open"
   *     },
   *     {
   *       "id": "XKCD-5-1",
   *       "created": "0001-01-01T00:00:00Z",
   *       "updated": "0001-01-01T00:00:00Z",
   *       "type": "Guest",
   *       "debitor": {
   *         "title": "Ms",
   *         "name": "Ms Jackson"
   *       },
   *       "closingDate": "2024-02-05",
   *       "isMainFolio": false,
   *       "isEmpty": false,
   *       "reservation": {
   *         "id": "XKCD-5",
   *         "bookingId": "XKCD"
   *       },
   *       "balance": {
   *         "amount": 0.0,
   *         "currency": "EUR"
   *       },
   *       "checkedOutOnAccountsReceivable": true,
   *       "allowedActions": [
   *         "AddCharge",
   *         "AddPayment",
   *         "Close"
   *       ],
   *       "relatedInvoices": [
   *         {
   *           "id": "00010687"
   *         }
   *       ],
   *       "status": "Open"
   *     }
   *   ],
   *   "count": 3
   * }
   */
  FolioListModel: {
    /** @description List of folios. */
    folios: definitions["FolioItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "XKCD17-1",
   *   "created": "0001-01-01T00:00:00Z",
   *   "updated": "0001-01-01T00:00:00Z",
   *   "type": "Guest",
   *   "debitor": {
   *     "title": "Dr",
   *     "firstName": "Jon",
   *     "name": "Doe",
   *     "address": {
   *       "addressLine1": "My Street 1",
   *       "postalCode": "12453",
   *       "city": "MyCity",
   *       "countryCode": "GB"
   *     },
   *     "company": {
   *       "name": "Horns & Hooves Inc",
   *       "taxId": "TAX-12345",
   *       "additionalTaxId": "TAX2-12345"
   *     },
   *     "personalTaxId": "123456789",
   *     "reference": "SRC-1232"
   *   },
   *   "reservation": {
   *     "id": "XKCD17",
   *     "bookingId": "XKCD"
   *   },
   *   "property": {
   *     "id": "MUC"
   *   },
   *   "charges": [
   *     {
   *       "id": "RND123",
   *       "serviceType": "Accommodation",
   *       "name": "Charge",
   *       "isPosted": true,
   *       "serviceDate": "2018-05-08",
   *       "created": "0001-01-01T00:00:00Z",
   *       "movedFrom": {
   *         "id": "XKCD23-2"
   *       },
   *       "movedTo": {
   *         "id": "XKCD23-3"
   *       },
   *       "amount": {
   *         "grossAmount": 107.0,
   *         "netAmount": 100.0,
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "currency": "EUR"
   *       },
   *       "quantity": 0,
   *       "type": "TimeSlice"
   *     },
   *     {
   *       "id": "RND125",
   *       "serviceType": "Other",
   *       "name": "The Daily Planet, Newspaper",
   *       "isPosted": true,
   *       "serviceDate": "2018-05-07",
   *       "created": "0001-01-01T00:00:00Z",
   *       "amount": {
   *         "grossAmount": 2.14,
   *         "netAmount": 2.0,
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "currency": "EUR"
   *       },
   *       "quantity": 0,
   *       "type": "Direct"
   *     },
   *     {
   *       "id": "REST2018243",
   *       "serviceType": "Other",
   *       "name": "Restaurant",
   *       "isPosted": true,
   *       "serviceDate": "2018-05-07",
   *       "created": "0001-01-01T00:00:00Z",
   *       "amount": {
   *         "grossAmount": 59.0,
   *         "netAmount": 59.0,
   *         "vatType": "Without",
   *         "vatPercent": 0.0,
   *         "currency": "EUR"
   *       },
   *       "subAccountId": "MUC-REST",
   *       "quantity": 0,
   *       "type": "Direct"
   *     }
   *   ],
   *   "transitoryCharges": [
   *     {
   *       "id": "RND3221-1",
   *       "name": "Transitory charge",
   *       "amount": {
   *         "amount": 20.0,
   *         "currency": "EUR"
   *       },
   *       "serviceDate": "0001-01-01",
   *       "created": "0001-01-01T00:00:00Z",
   *       "quantity": 0
   *     }
   *   ],
   *   "payments": [
   *     {
   *       "id": "PAY-1",
   *       "method": "BankTransfer",
   *       "amount": {
   *         "amount": 50.0,
   *         "currency": "EUR"
   *       },
   *       "receipt": "CA-147-339",
   *       "paymentDate": "0001-01-01T00:00:00Z",
   *       "businessDate": "0001-01-01"
   *     },
   *     {
   *       "id": "PAY-2",
   *       "method": "Cash",
   *       "amount": {
   *         "amount": 2.14,
   *         "currency": "EUR"
   *       },
   *       "paymentDate": "0001-01-01T00:00:00Z",
   *       "businessDate": "0001-01-01"
   *     }
   *   ],
   *   "pendingPayments": [
   *     {
   *       "id": "IDDQD-1",
   *       "amount": {
   *         "amount": 50.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "id": "IDKFA-2",
   *       "amount": {
   *         "amount": 2.14,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "allowances": [
   *     {
   *       "id": "RND3221-1",
   *       "amount": {
   *         "grossAmount": 11.9,
   *         "netAmount": 10.0,
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "currency": "EUR"
   *       },
   *       "reason": "example",
   *       "serviceType": "Other",
   *       "serviceDate": "2018-05-10",
   *       "created": "0001-01-01T00:00:00Z",
   *       "movedFrom": {
   *         "id": "XKCD23-2"
   *       },
   *       "movedTo": {
   *         "id": "XKCD23-3"
   *       },
   *       "sourceChargeId": "REST2018243"
   *     }
   *   ],
   *   "balance": {
   *     "amount": 57.0,
   *     "currency": "EUR"
   *   },
   *   "checkedOutOnAccountsReceivable": false,
   *   "isMainFolio": true,
   *   "isEmpty": false,
   *   "allowedActions": [
   *     "AddCharge",
   *     "AddPayment",
   *     "Close"
   *   ],
   *   "allowedPayment": 45.1,
   *   "maximumAllowance": 20.0,
   *   "status": "Open"
   * }
   */
  FolioModel: {
    /** @description The id of the folio */
    id: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * Format: date-time
     * @description Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    updated: string;
    /** @description The folio type */
    type?: "House" | "Guest" | "External" | "Booking";
    debitor?: definitions["FolioDebitorModel"];
    /**
     * Format: date
     * @description The date when the folio has been closed
     * @example 2020-10-10
     */
    closingDate?: string;
    reservation?: definitions["EmbeddedReservationModel"];
    /** @description The id of the booking linked to this folio */
    bookingId?: string;
    company?: definitions["EmbeddedCompanyModel"];
    property: definitions["EmbeddedPropertyModel"];
    /** @description The list of charges */
    charges?: definitions["ChargeModel"][];
    /** @description The list of charges */
    transitoryCharges?: definitions["TransitoryChargeModel"][];
    /** @description The list of payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments or GET /finance/v1/folios/{folioId}/refunds instead.</b> */
    payments?: definitions["PaymentModel"][];
    /** @description The list of pending payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments instead.</b> */
    pendingPayments?: definitions["PendingPaymentModel"][];
    /** @description The list of allowances */
    allowances?: definitions["AllowanceModel"][];
    balance: definitions["MonetaryValueModel"];
    /**
     * @description Set to `true`, if the folio has been checked out on accounts receivable.
     * If you create an invoice from this folio, it will display the outstanding payments
     */
    checkedOutOnAccountsReceivable?: boolean;
    /** @description Set to `true` if this is a main folio for the reservation */
    isMainFolio?: boolean;
    /** @description Set to `true` if the folio has no unmoved [transitory] charges, unmoved payments, and allowances. */
    isEmpty?: boolean;
    /**
     * @description All folios that are related to this folio. Either because they belong to the same reservation/booking or
     * charges were moved/routed between them. It is only set on folios of type 'guest', 'booking', and 'external'.
     */
    relatedFolios?: definitions["EmbeddedFolioModel"][];
    /** @description All invoices that have been created for this folio. This is only set on folios of type 'guest' */
    relatedInvoices?: definitions["EmbeddedInvoiceModel"][];
    /**
     * @description Depending on the state of the folio, certain warnings are shown.
     * This list includes all folio warnings.
     */
    folioWarnings?: "IncompleteBillingAddress"[];
    /**
     * @description Depending on the state of the folio, certain actions are allowed or not.
     * This list includes all actions you can perform on this folio.
     */
    allowedActions?: (
      | "AddCharge"
      | "AddAllowance"
      | "AddCancellationFee"
      | "AddNoShowFee"
      | "AddPayment"
      | "AddRefund"
      | "CheckoutOnAr"
      | "Close"
      | "PostOpenCharges"
      | "CorrectFolio"
      | "ChangeAddress"
      | "ChangeAddressWithSimpleDebitor"
      | "Delete"
      | "Reopen"
      | "CreateInvoice"
      | "CreateAdvanceInvoice"
      | "CancelLastInvoice"
      | "CreateInvoiceWithSimpleDebitor"
      | "CreatePrepaymentNotice"
      | "CreateProFormaInvoice"
      | "CreateDepositReceipt"
    )[];
    /**
     * Format: double
     * @description The maximum payment that can be posted on this folio
     */
    allowedPayment?: number;
    /**
     * Format: double
     * @description The maximum allowance (gross) that can be posted on this folio
     */
    maximumAllowance?: number;
    /** @description Status of the folio */
    status: "Open" | "Closed" | "ClosedWithInvoice";
  };
  /**
   * @example {
   *   "id": "C3Q890XZ",
   *   "method": "Cash",
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "externalReference": {
   *     "merchantReference": "BLIPKWXP-1",
   *     "pspReference": "8535063621298633"
   *   },
   *   "paymentDate": "0001-01-01T00:00:00Z",
   *   "status": "Success",
   *   "type": "Custom",
   *   "businessDate": "1845-01-12"
   * }
   */
  FolioPaymentModel: {
    /** @description Id of the payment. This is unique within one folio */
    id: string;
    /** @description The payment method */
    method?:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Invoice"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck"
      | "PspCash"
      | "PspDebit"
      | "PspBanking"
      | "PspOpenInvoice"
      | "PspWallet";
    amount: definitions["MonetaryValueModel"];
    externalReference?: definitions["ExternalReference"];
    /** @description Receipt for the payment */
    receipt?: string;
    /**
     * Format: date-time
     * @description The date and time when the payment was created<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    paymentDate: string;
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why the move operation was performed */
    movedReason?: string;
    /** @description A link to the original payment in case of splitting payments */
    sourcePaymentId?: string;
    /** @description Status of the payment */
    status: "Pending" | "Success" | "Failure" | "Canceled";
    /** @description Human readable failure reason */
    failureReason?: string;
    /** @description Machine-readable failure code */
    failureCode?: "Failed" | "TimedOut";
    /** @description Type of the payment */
    type:
      | "Custom"
      | "Terminal"
      | "PaymentAccount"
      | "Authorization"
      | "PaymentLink";
    /**
     * Format: date-time
     * @description The date and time a payment link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    expiresAt?: string;
    /** @description Payment link description */
    description?: string;
    /** @description Payment link url */
    url?: string;
    /** @description The list of actions for this payment */
    actions?: definitions["ActionModel[PaymentAction,NotAllowedPaymentActionReason]"][];
    /**
     * Format: date
     * @description The business date of the payment
     * @example 2020-10-10
     */
    businessDate: string;
  };
  IncludedLineItemModel: {
    /** @description The description of the item or service */
    description?: string;
    price: definitions["MonetaryValueModel"];
    /** @description The applied VAT type. */
    vatType?:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /**
     * Format: double
     * @description The applied VAT percent
     */
    vatPercent?: number;
  };
  /**
   * @example {
   *   "id": "MUC_201705070000012"
   * }
   */
  InvoiceCreatedModel: {
    /** @description The invoice id */
    id: string;
  };
  InvoiceItemModel: {
    /** @description Invoice identifier */
    id: string;
    /** @description Invoice number */
    number: string;
    /** @description Invoice type */
    type:
      | "Initial"
      | "Cancellation"
      | "Correction"
      | "Advance"
      | "AdvanceCancellation"
      | "AdvanceCorrection"
      | "Proforma";
    /** @description Language which was used to create the invoice */
    languageCode: string;
    /** @description The folio for this invoice */
    folioId: string;
    /** @description The reservation for this invoice */
    reservationId?: string;
    /** @description The booking for this invoice */
    bookingId?: string;
    /** @description The ID of the property */
    propertyId: string;
    /**
     * @description If the invoice is related to another invoice, this field contains related invoice number
     * For example, if the invoice has Cancellation type,
     * this field contains the number of invoice which is being cancelled
     */
    relatedInvoiceNumber?: string;
    /** @description If the invoice was written-off, this field contains the reason why it was written-off */
    writeOffReason?: string;
    subTotal: definitions["MonetaryValueModel"];
    outstandingPayment?: definitions["MonetaryValueModel"];
    /** @description True, if this invoice had no outstanding payments or was settled. */
    paymentSettled: boolean;
    /** @description Status of the invoice */
    status: "FullyPaid" | "Unpaid" | "WrittenOff";
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description Name of the guest */
    guestName?: string;
    /** @description Company the guest specified */
    guestCompany?: string;
    /**
     * @description Depending on the state of the invoice, certain actions are allowed or not.
     * This list includes all actions you can perform on this invoice.
     */
    allowedActions?: (
      | "CorrectAddress"
      | "CorrectCharges"
      | "MarkAsPaid"
      | "Cancel"
      | "WriteOff"
    )[];
    company?: definitions["EmbeddedCompanyModel"];
  };
  InvoiceLineItemModel: {
    /**
     * Format: date
     * @description The date on which this item or service is delivered
     * @example 2020-10-10
     */
    date: string;
    /** @description The description of the item or service */
    description: string;
    price: definitions["MonetaryValueModel"];
    /** @description The applied VAT type. */
    vatType?:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /**
     * Format: double
     * @description The applied VAT percent
     */
    vatPercent?: number;
    /** @description Whether this line item represents a no-show fee */
    isNoShowFee: boolean;
    /** @description Items which are included in the package, if there are any */
    includedLineItems?: definitions["IncludedLineItemModel"][];
    /** @description Guest who the service has been provided to. Is defined only when the invoice has charges from multiple folios with different guests. */
    guest?: string;
    /**
     * Format: int32
     * @description The count of services provided
     */
    quantity?: number;
  };
  InvoiceLineItemsModel: {
    lineItems?: definitions["InvoiceLineItemModel"][];
    subTotal: definitions["MonetaryValueModel"];
  };
  /**
   * @example {
   *   "invoices": [
   *     {
   *       "id": "MUC-20171200000002",
   *       "number": "20171200000002",
   *       "type": "Initial",
   *       "languageCode": "de",
   *       "folioId": "DHNSHFK-1-1",
   *       "reservationId": "DHNSHFK-1",
   *       "bookingId": "DHNSHFK",
   *       "propertyId": "MUC",
   *       "subTotal": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "paymentSettled": true,
   *       "status": "FullyPaid",
   *       "created": "2024-03-05T15:25:04.3329251+01:00",
   *       "guestName": "Alan Turing",
   *       "guestCompany": "GCHQ",
   *       "company": {
   *         "id": "MUC-ACME",
   *         "code": "ACME",
   *         "name": "ACME Inc."
   *       }
   *     },
   *     {
   *       "id": "MUC-20181200000002",
   *       "number": "20181200000002",
   *       "type": "Initial",
   *       "languageCode": "de",
   *       "folioId": "HGZGDNAK-1-1",
   *       "reservationId": "HGZGDNAK-1",
   *       "bookingId": "HGZGDNAK",
   *       "propertyId": "MUC",
   *       "subTotal": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "outstandingPayment": {
   *         "amount": 95.0,
   *         "currency": "EUR"
   *       },
   *       "paymentSettled": false,
   *       "status": "Unpaid",
   *       "created": "2024-03-05T15:25:04.3329251+01:00",
   *       "guestName": "Bertrand Russell",
   *       "allowedActions": [
   *         "CorrectAddress",
   *         "CorrectCharges"
   *       ]
   *     },
   *     {
   *       "id": "MUC-20171200000018",
   *       "number": "20171200000018",
   *       "type": "Cancellation",
   *       "languageCode": "de",
   *       "folioId": "DHNSHFK-1-2",
   *       "reservationId": "DHNSHFK-1",
   *       "bookingId": "DHNSHFK",
   *       "propertyId": "MUC",
   *       "relatedInvoiceNumber": "20171200000002",
   *       "subTotal": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "paymentSettled": true,
   *       "status": "FullyPaid",
   *       "created": "2024-03-06T13:25:04.3329251+01:00",
   *       "guestName": "Ludwig Wittgenstein"
   *     },
   *     {
   *       "id": "MUC-20171200000022",
   *       "number": "20171200000022",
   *       "type": "Correction",
   *       "languageCode": "de",
   *       "folioId": "DHNSHFK-1-3",
   *       "reservationId": "DHNSHFK-1",
   *       "bookingId": "DHNSHFK",
   *       "propertyId": "MUC",
   *       "subTotal": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "paymentSettled": true,
   *       "status": "FullyPaid",
   *       "created": "2024-03-06T13:25:04.3329251+01:00",
   *       "guestName": "Rudolf Carnap",
   *       "allowedActions": [
   *         "CorrectAddress",
   *         "CorrectCharges"
   *       ]
   *     },
   *     {
   *       "id": "MUC-20171200000023",
   *       "number": "20171200000023",
   *       "type": "Initial",
   *       "languageCode": "de",
   *       "folioId": "DHNSHFL-1-5",
   *       "reservationId": "DHNSHFL-1",
   *       "bookingId": "DHNSHFL",
   *       "propertyId": "MUC",
   *       "writeOffReason": "Some weighty reason",
   *       "subTotal": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "paymentSettled": false,
   *       "status": "WrittenOff",
   *       "created": "2024-03-06T12:25:04.3329251+01:00",
   *       "guestName": "Yury Vlasov"
   *     }
   *   ],
   *   "count": 5
   * }
   */
  InvoiceListModel: {
    /** @description List of invoices. */
    invoices: definitions["InvoiceItemModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "INVOICE-SGZLTBJC-1",
   *   "number": "MUC_20190328000000228",
   *   "type": "Initial",
   *   "to": {
   *     "name": "John D. Doe",
   *     "address": {
   *       "addressLine1": "Baker Street 7",
   *       "postalCode": "10005",
   *       "city": "London",
   *       "countryCode": "GB"
   *     },
   *     "companyName": "Investigators Inc.",
   *     "companyTaxId": "GB-3358791",
   *     "reference": "REF-111",
   *     "personalTaxId": "123-321"
   *   },
   *   "paymentSettled": true,
   *   "status": "FullyPaid",
   *   "created": "0001-01-01T00:00:00Z",
   *   "writeOffReason": "Weighty reason",
   *   "allowedActions": [
   *     "CorrectAddress",
   *     "CorrectCharges"
   *   ],
   *   "invoiceDate": "2024-03-06",
   *   "folioId": "SGZLTBJC-1",
   *   "from": {
   *     "name": "The Bay Hotel",
   *     "address": {
   *       "addressLine1": "Ocean Drive 44",
   *       "postalCode": "55511",
   *       "city": "Santa Cruz",
   *       "countryCode": "US"
   *     }
   *   },
   *   "commercialInformation": {
   *     "registerEntry": "200417510087, California",
   *     "taxId": "775-43-2106"
   *   },
   *   "bankAccount": {
   *     "iban": "DE44 5001 0517 5407 3249 31",
   *     "bic": "SSKMDEMMXXX",
   *     "bank": "Stadtsparkasse München"
   *   },
   *   "paymentTerms": "Pay within 7 days",
   *   "lineItems": {
   *     "lineItems": [
   *       {
   *         "date": "2024-03-06",
   *         "description": "Double Room",
   *         "price": {
   *           "amount": 130.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "isNoShowFee": false,
   *         "guest": "John Doe"
   *       },
   *       {
   *         "date": "2024-03-06",
   *         "description": "Service Package",
   *         "price": {
   *           "amount": 20.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "isNoShowFee": false,
   *         "guest": "Jane Air"
   *       },
   *       {
   *         "date": "2024-03-06",
   *         "description": "Business Lounge Access",
   *         "price": {
   *           "amount": 40.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "isNoShowFee": false,
   *         "guest": "John Doe"
   *       }
   *     ],
   *     "subTotal": {
   *       "amount": 190.0,
   *       "currency": "EUR"
   *     }
   *   },
   *   "payments": [
   *     {
   *       "id": "PAY-1",
   *       "method": "BankTransfer",
   *       "methodName": "Banküberweisung",
   *       "amount": {
   *         "amount": 130.0,
   *         "currency": "EUR"
   *       },
   *       "paymentDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "businessDate": "0001-01-01"
   *     },
   *     {
   *       "id": "PAY-2",
   *       "method": "Cash",
   *       "methodName": "Bar",
   *       "amount": {
   *         "amount": 30.0,
   *         "currency": "EUR"
   *       },
   *       "paymentDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "businessDate": "0001-01-01"
   *     }
   *   ],
   *   "taxDetails": [
   *     {
   *       "vatType": "Reduced",
   *       "vatPercent": 7.0,
   *       "net": {
   *         "amount": 120.0,
   *         "currency": "EUR"
   *       },
   *       "tax": {
   *         "amount": 10.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "vatType": "Normal",
   *       "vatPercent": 19.0,
   *       "net": {
   *         "amount": 49.0,
   *         "currency": "EUR"
   *       },
   *       "tax": {
   *         "amount": 11.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "total": {
   *     "amount": -30.0,
   *     "currency": "EUR"
   *   },
   *   "stayInfo": {
   *     "guestName": "John Doe",
   *     "arrivalDate": "2024-03-09",
   *     "departureDate": "2024-03-12",
   *     "reservationId": "ASTUBXVZ-1"
   *   },
   *   "propertyId": "MUC",
   *   "propertyCountryCode": "DE",
   *   "languageCode": "EN",
   *   "company": {
   *     "id": "MUC-ACME",
   *     "code": "ACME",
   *     "name": "ACME Inc."
   *   }
   * }
   */
  InvoiceModel: {
    /** @description Invoice identifier */
    id: string;
    /** @description Invoice number */
    number: string;
    /** @description Invoice type */
    type:
      | "Initial"
      | "Cancellation"
      | "Correction"
      | "Advance"
      | "AdvanceCancellation"
      | "AdvanceCorrection"
      | "Proforma";
    to: definitions["InvoiceRecipientModel"];
    /** @description True, if this invoice had no outstanding payments or was settled. */
    paymentSettled: boolean;
    /** @description Status of the invoice */
    status: "FullyPaid" | "Unpaid" | "WrittenOff";
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /**
     * @description If the invoice is related to another invoice, this field contains related invoice number
     * For example, if the invoice has Cancellation type,
     * this field contains the number of invoice which is being cancelled
     */
    relatedInvoiceNumber?: string;
    /** @description If the invoice was written-off, this field contains the reason why it was written-off */
    writeOffReason?: string;
    /**
     * @description Depending on the state of the invoice, certain actions are allowed or not.
     * This list includes all actions you can perform on this invoice.
     */
    allowedActions?: (
      | "CorrectAddress"
      | "CorrectCharges"
      | "MarkAsPaid"
      | "Cancel"
      | "WriteOff"
    )[];
    /**
     * Format: date
     * @description Date the invoice has been created
     * @example 2020-10-10
     */
    invoiceDate: string;
    /** @description The folio this invoice was requested for */
    folioId: string;
    from: definitions["InvoiceSenderModel"];
    commercialInformation: definitions["CommercialInfoModel"];
    bankAccount?: definitions["BankAccountModel"];
    /** @description Specification of the payment terms, as defined in the property */
    paymentTerms?: string;
    lineItems: definitions["InvoiceLineItemsModel"];
    /** @description A list of all payments */
    payments?: definitions["InvoicePaymentModel"][];
    outstandingPayment?: definitions["MonetaryValueModel"];
    /** @description The subtotal, displaying net and tax amount for each VAT type */
    taxDetails?: definitions["TaxDetailModel"][];
    total: definitions["MonetaryValueModel"];
    stayInfo?: definitions["StayInfoModel"];
    /** @description The ID of the property */
    propertyId: string;
    /** @description The country code of the property */
    propertyCountryCode: string;
    /** @description Language which was used to create the invoice */
    languageCode: string;
    company?: definitions["EmbeddedCompanyModel"];
  };
  /**
   * @example {
   *   "id": "C3Q890XZ",
   *   "method": "BankTransfer",
   *   "methodName": "Banküberweisung",
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "paymentDate": "2024-03-06T14:25:04.3329251+01:00",
   *   "businessDate": "1984-06-07"
   * }
   */
  InvoicePaymentModel: {
    /** @description Id of the payment. This is unique within one folio. */
    id: string;
    /** @description The Payment Method type. */
    method:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Invoice"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck"
      | "PspCash"
      | "PspDebit"
      | "PspBanking"
      | "PspOpenInvoice"
      | "PspWallet";
    /** @description The Payment Method name translated in the requested language of the invoice */
    methodName: string;
    amount: definitions["MonetaryValueModel"];
    /**
     * Format: date-time
     * @description The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    paymentDate?: string;
    /**
     * Format: date
     * @description The business date of the payment, can be different from the payment date for some payments posted after midnight and before 6AM.
     * @example 2020-10-10
     */
    businessDate?: string;
  };
  /**
   * @example {
   *   "languageCode": "en",
   *   "folioId": "HBCXQZ-1"
   * }
   */
  InvoicePreviewPdfRequest: {
    /** @description The language in which the invoice should be produced. */
    languageCode: string;
    /** @description The ID of the folio for which the invoice should be created. */
    folioId: string;
  };
  InvoiceRecipientModel: {
    name?: string;
    address?: definitions["NonStrictAddressModel"];
    companyName?: string;
    companyTaxId?: string;
    reference?: string;
    personalTaxId?: string;
  };
  InvoiceSenderModel: {
    name: string;
    address?: definitions["AddressModel"];
  };
  MessageItemCollection: {
    messages?: string[];
  };
  MonetaryValueModel: {
    /** Format: double */
    amount: number;
    currency: string;
  };
  /**
   * @example {
   *   "targetFolioId": "KFCSQUID-1",
   *   "reason": "Test"
   * }
   */
  MoveAllChargesRequest: {
    /** @description ID of the target folio */
    targetFolioId: string;
    /** @description Description of why the move is performed */
    reason: string;
  };
  /**
   * @example {
   *   "targetFolioId": "KFCSQUID-1",
   *   "reason": "Test",
   *   "chargeIds": [
   *     "KFCSQUID-1-C-1",
   *     "KFCSQUID-1-C-5"
   *   ],
   *   "allowanceIds": [
   *     "KFCSQUID-1-A-1",
   *     "KFCSQUID-1-A-2"
   *   ],
   *   "transitoryChargeIds": [
   *     "KFCSQUID-1-TC-1",
   *     "KFCSQUID-1-TC-2"
   *   ]
   * }
   */
  MoveChargesRequest: {
    /** @description ID of the target folio */
    targetFolioId: string;
    /** @description Description of why the move is performed */
    reason: string;
    /** @description The IDs of the charges that should be moved */
    chargeIds?: string[];
    /**
     * @description The IDs of the allowances that should be moved.
     * Only moving global allowances is supported
     */
    allowanceIds?: string[];
    /** @description The IDs of the transitory charges that should be moved */
    transitoryChargeIds?: string[];
  };
  /**
   * @example {
   *   "targetFolioId": "KFCSQUID-1",
   *   "reason": "Test",
   *   "paymentIds": [
   *     "KFCSQUID-1-C-1",
   *     "KFCSQUID-1-C-5"
   *   ]
   * }
   */
  MovePaymentsRequest: {
    /** @description ID of the target folio */
    targetFolioId: string;
    /** @description Description of why the move is performed */
    reason: string;
    /** @description The IDs of the payments that should be moved */
    paymentIds: string[];
  };
  NonStrictAddressModel: {
    addressLine1?: string;
    addressLine2?: string;
    postalCode?: string;
    city?: string;
    regionCode?: string;
    countryCode?: string;
  };
  Operation: {
    value?: unknown;
    path?: string;
    op?: string;
    from?: string;
  };
  /**
   * @example {
   *   "paymentMethod": "BankTransfer",
   *   "receipt": "BANK-123456"
   * }
   */
  PayInvoiceRequest: {
    /** @description The payment method used for paying the invoice. Used for accounting. */
    paymentMethod:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck";
    /** @description The receipt for the payment. Each transaction in accounting has a receipt set. */
    receipt: string;
  };
  PaymentCreatedModel: {
    id: string;
  };
  /**
   * @example {
   *   "payments": [
   *     {
   *       "id": "PAY-1",
   *       "method": "BankTransfer",
   *       "amount": {
   *         "amount": 50.0,
   *         "currency": "EUR"
   *       },
   *       "receipt": "CA-147-339",
   *       "paymentDate": "0001-01-01T00:00:00Z",
   *       "status": "Success",
   *       "type": "Custom",
   *       "businessDate": "0001-01-01"
   *     },
   *     {
   *       "id": "PAY-2",
   *       "amount": {
   *         "amount": 2.14,
   *         "currency": "EUR"
   *       },
   *       "receipt": "HSKJCNDR-1",
   *       "paymentDate": "0001-01-01T00:00:00Z",
   *       "status": "Pending",
   *       "type": "Custom",
   *       "businessDate": "0001-01-01"
   *     }
   *   ],
   *   "count": 2
   * }
   */
  PaymentListModel: {
    /** @description List of payments */
    payments: definitions["FolioPaymentModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "paymentMethods": [
   *     "Cash",
   *     "BankTransfer",
   *     "CreditCard",
   *     "Amex",
   *     "VisaCredit",
   *     "VisaDebit",
   *     "MasterCard",
   *     "MasterCardDebit",
   *     "Maestro",
   *     "GiroCard",
   *     "DiscoverCard",
   *     "Diners",
   *     "Jcb",
   *     "BookingCom",
   *     "VPay",
   *     "PayPal",
   *     "Postcard",
   *     "Reka",
   *     "Twint",
   *     "Lunchcheck",
   *     "Voucher",
   *     "ChinaUnionPay",
   *     "Other",
   *     "Cheque",
   *     "Airbnb",
   *     "HolidayCheck"
   *   ]
   * }
   */
  PaymentMethodListModel: {
    /** @description List of supported payment methods. */
    paymentMethods: (
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck"
    )[];
  };
  /**
   * @example {
   *   "id": "C3Q890XZ",
   *   "method": "Cash",
   *   "amount": {
   *     "amount": 230.0,
   *     "currency": "EUR"
   *   },
   *   "externalReference": {
   *     "merchantReference": "BLIPKWXP-1",
   *     "pspReference": "8535063621298633"
   *   },
   *   "paymentDate": "0001-01-01T00:00:00Z",
   *   "businessDate": "2021-05-22"
   * }
   */
  PaymentModel: {
    /** @description Id of the payment. This is unique within one folio. */
    id: string;
    /** @description The Payment Method. */
    method:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Invoice"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck"
      | "PspCash"
      | "PspDebit"
      | "PspBanking"
      | "PspOpenInvoice"
      | "PspWallet";
    amount: definitions["MonetaryValueModel"];
    externalReference?: definitions["ExternalReference"];
    /** @description Receipt for the payment. For payments done by the payment service provider integration, this is the same as the pspReference. */
    receipt?: string;
    /**
     * Format: date-time
     * @description The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    paymentDate?: string;
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why move operation was performed */
    movedReason?: string;
    /** @description A link to the original payment in case of splitting payments */
    sourcePaymentId?: string;
    /**
     * Format: date
     * @description The business date of the payment
     * @example 2020-10-10
     */
    businessDate: string;
  };
  PaymentPaidChargesRequest: {
    /** @description The ID of the charge being paid */
    chargeId: string;
    /**
     * Format: double
     * @description The amount being covered with the payment. If not provided it is assumed that the payment is covering the full amount of the charge
     */
    amount: number;
  };
  /**
   * @example {
   *   "id": "HESOYAM",
   *   "amount": {
   *     "amount": 228.0,
   *     "currency": "EUR"
   *   },
   *   "terminalId": "T400"
   * }
   */
  PendingPaymentModel: {
    /** @description Id of the payment task. */
    id: string;
    amount: definitions["MonetaryValueModel"];
    /** @description The terminal used for the payment. */
    terminalId?: string;
  };
  /** @description Use this model in all accounting reports */
  PreciseMonetaryValueModel: {
    /** Format: double */
    amount: number;
    currency: string;
  };
  /**
   * @example {
   *   "to": {
   *     "name": "John D. Doe",
   *     "address": {
   *       "addressLine1": "Baker Street 7",
   *       "postalCode": "10005",
   *       "city": "London",
   *       "countryCode": "GB"
   *     },
   *     "companyName": "Investigators Inc.",
   *     "companyTaxId": "GB-3358791",
   *     "reference": "REF-11",
   *     "personalTaxId": "123-321"
   *   },
   *   "createInvoiceAction": "CreatesInvoice",
   *   "invoiceDate": "2024-03-06",
   *   "folioId": "SGZLTBJC-1",
   *   "from": {
   *     "name": "The Bay Hotel",
   *     "address": {
   *       "addressLine1": "Ocean Drive 44",
   *       "postalCode": "55511",
   *       "city": "Santa Cruz",
   *       "countryCode": "US"
   *     }
   *   },
   *   "commercialInformation": {
   *     "registerEntry": "200417510087, California",
   *     "taxId": "775-43-2106"
   *   },
   *   "bankAccount": {
   *     "iban": "DE44 5001 0517 5407 3249 31",
   *     "bic": "SSKMDEMMXXX",
   *     "bank": "Stadtsparkasse München"
   *   },
   *   "paymentTerms": "Pay within 7 days",
   *   "lineItems": {
   *     "lineItems": [
   *       {
   *         "date": "2024-03-06",
   *         "description": "Double Room",
   *         "price": {
   *           "amount": 130.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Reduced",
   *         "vatPercent": 7.0,
   *         "isNoShowFee": false
   *       },
   *       {
   *         "date": "2024-03-06",
   *         "description": "Service Package",
   *         "price": {
   *           "amount": 20.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "isNoShowFee": false
   *       },
   *       {
   *         "date": "2024-03-06",
   *         "description": "Business Lounge Access",
   *         "price": {
   *           "amount": 40.0,
   *           "currency": "EUR"
   *         },
   *         "vatType": "Normal",
   *         "vatPercent": 19.0,
   *         "isNoShowFee": false
   *       }
   *     ],
   *     "subTotal": {
   *       "amount": 190.0,
   *       "currency": "EUR"
   *     }
   *   },
   *   "payments": [
   *     {
   *       "id": "PAY-1",
   *       "method": "BankTransfer",
   *       "methodName": "Banküberweisung",
   *       "amount": {
   *         "amount": 130.0,
   *         "currency": "EUR"
   *       },
   *       "paymentDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "businessDate": "0001-01-01"
   *     },
   *     {
   *       "id": "PAY-2",
   *       "method": "Cash",
   *       "methodName": "Bar",
   *       "amount": {
   *         "amount": 30.0,
   *         "currency": "EUR"
   *       },
   *       "paymentDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "businessDate": "0001-01-01"
   *     }
   *   ],
   *   "taxDetails": [
   *     {
   *       "vatType": "Reduced",
   *       "vatPercent": 7.0,
   *       "net": {
   *         "amount": 120.0,
   *         "currency": "EUR"
   *       },
   *       "tax": {
   *         "amount": 10.0,
   *         "currency": "EUR"
   *       }
   *     },
   *     {
   *       "vatType": "Normal",
   *       "vatPercent": 19.0,
   *       "net": {
   *         "amount": 49.0,
   *         "currency": "EUR"
   *       },
   *       "tax": {
   *         "amount": 11.0,
   *         "currency": "EUR"
   *       }
   *     }
   *   ],
   *   "total": {
   *     "amount": -30.0,
   *     "currency": "EUR"
   *   },
   *   "stayInfo": {
   *     "guestName": "John Doe",
   *     "arrivalDate": "2024-03-09",
   *     "departureDate": "2024-03-12",
   *     "reservationId": "ASTUBXVZ-1"
   *   },
   *   "propertyId": "ID",
   *   "propertyCountryCode": "BY",
   *   "languageCode": "en"
   * }
   */
  PreviewInvoiceModel: {
    to?: definitions["InvoiceRecipientModel"];
    /** @description Describes what will happen, when you try to create an invoice with the folio in the state it is in now. */
    createInvoiceAction:
      | "CannotCreateInvoice"
      | "CreatesInvoice"
      | "CreatesInvoiceAndClosesFolio"
      | "CreatesArInvoiceAndClosesFolio";
    createInvoiceWarning?: definitions["CreateInvoiceWarningModel"];
    /**
     * Format: date
     * @description Date the invoice has been created
     * @example 2020-10-10
     */
    invoiceDate: string;
    /** @description The folio this invoice was requested for */
    folioId: string;
    from: definitions["InvoiceSenderModel"];
    commercialInformation: definitions["CommercialInfoModel"];
    bankAccount?: definitions["BankAccountModel"];
    /** @description Specification of the payment terms, as defined in the property */
    paymentTerms?: string;
    lineItems: definitions["InvoiceLineItemsModel"];
    /** @description A list of all payments */
    payments?: definitions["InvoicePaymentModel"][];
    outstandingPayment?: definitions["MonetaryValueModel"];
    /** @description The subtotal, displaying net and tax amount for each VAT type */
    taxDetails?: definitions["TaxDetailModel"][];
    total: definitions["MonetaryValueModel"];
    stayInfo?: definitions["StayInfoModel"];
    /** @description The ID of the property */
    propertyId: string;
    /** @description The country code of the property */
    propertyCountryCode: string;
    /** @description Language which was used to create the invoice */
    languageCode: string;
    company?: definitions["EmbeddedCompanyModel"];
  };
  ReceiptModel: {
    /** @description The type of receipt. */
    type?: "Custom" | "Reservation" | "Invoice" | "PspReference";
    /** @description The receipt number. */
    number: string;
  };
  RefundCreatedModel: {
    id: string;
  };
  /**
   * @example {
   *   "refunds": [
   *     {
   *       "id": "MUC-12454",
   *       "method": "Cash",
   *       "amount": {
   *         "amount": 100.0,
   *         "currency": "EUR"
   *       },
   *       "refundDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "sourcePaymentId": "MUC-KSJHDF",
   *       "status": "Failure",
   *       "failureReason": "Can't refund more than original payment.",
   *       "failureCode": "Failed",
   *       "businessDate": "2024-03-06"
   *     },
   *     {
   *       "id": "BER-12454",
   *       "method": "CreditCard",
   *       "amount": {
   *         "amount": 220.0,
   *         "currency": "EUR"
   *       },
   *       "refundDate": "2024-03-06T15:25:04.3329251+01:00",
   *       "sourcePaymentId": "BER-UWNWFD",
   *       "status": "Pending",
   *       "businessDate": "2024-03-06"
   *     }
   *   ],
   *   "count": 2
   * }
   */
  RefundListModel: {
    /** @description List of refunds */
    refunds: definitions["RefundModel"][];
    /**
     * Format: int64
     * @description Total count of items
     */
    count: number;
  };
  /**
   * @example {
   *   "id": "KDSF86SF",
   *   "method": "CreditCard",
   *   "amount": {
   *     "amount": 150.0,
   *     "currency": "EUR"
   *   },
   *   "externalReference": {
   *     "merchantReference": "JDKLKDS-1",
   *     "pspReference": "091283918312"
   *   },
   *   "refundDate": "2024-03-06T15:25:04.3329251+01:00",
   *   "status": "Pending",
   *   "businessDate": "2024-03-06"
   * }
   */
  RefundModel: {
    /** @description Id of the refund */
    id: string;
    /** @description The payment method */
    method:
      | "Cash"
      | "BankTransfer"
      | "CreditCard"
      | "Invoice"
      | "Amex"
      | "VisaCredit"
      | "VisaDebit"
      | "MasterCard"
      | "MasterCardDebit"
      | "Maestro"
      | "GiroCard"
      | "DiscoverCard"
      | "Diners"
      | "Jcb"
      | "BookingCom"
      | "VPay"
      | "PayPal"
      | "Postcard"
      | "Reka"
      | "Twint"
      | "Lunchcheck"
      | "Voucher"
      | "ChinaUnionPay"
      | "Other"
      | "Cheque"
      | "Airbnb"
      | "HolidayCheck"
      | "PspCash"
      | "PspDebit"
      | "PspBanking"
      | "PspOpenInvoice"
      | "PspWallet";
    amount: definitions["MonetaryValueModel"];
    externalReference?: definitions["ExternalReference"];
    /** @description Receipt for the payment. For payments run through the apaleo payment services it is set to the pspReference */
    receipt?: string;
    /**
     * Format: date-time
     * @description The date when the refund was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    refundDate: string;
    /** @description A link to the payment that the refund was done for */
    sourcePaymentId?: string;
    /** @description Status of the refund */
    status: "Pending" | "Success" | "Failure" | "Canceled";
    failureReason?: string;
    failureCode?: "Failed" | "TimedOut";
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why the move operation was performed */
    movedReason?: string;
    /**
     * Format: date
     * @description The business date of the refund
     * @example 2020-10-10
     */
    businessDate: string;
  };
  /**
   * @example {
   *   "serviceTypes": [
   *     "Other",
   *     "Accommodation",
   *     "FoodAndBeverages",
   *     "CancellationFees",
   *     "NoShow",
   *     "CityTax",
   *     "SecondCityTax"
   *   ]
   * }
   */
  ServiceTypeListModel: {
    /** @description List of supported payment methods. */
    serviceTypes: (
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CancellationFees"
      | "NoShow"
      | "CityTax"
      | "SecondCityTax"
    )[];
  };
  /**
   * @example {
   *   "accountNumber": "1000",
   *   "name": "Other Revenues",
   *   "type": "Revenues",
   *   "parentNumber": "5000",
   *   "hasChildren": true,
   *   "isArchived": false,
   *   "subAccounts": [
   *     {
   *       "accountNumber": "1000",
   *       "name": "Other Revenues (7%)",
   *       "type": "Revenues",
   *       "parentNumber": "RevenueOther",
   *       "hasChildren": false,
   *       "isArchived": true
   *     }
   *   ]
   * }
   */
  SlimFinanceAccountModel: {
    /** @description The account number. Unique identifier within one property. */
    accountNumber: string;
    /** @description The name of the account. */
    name: string;
    /** @description The type of account. */
    type:
      | "Revenues"
      | "Payments"
      | "Liabilities"
      | "Receivables"
      | "Vat"
      | "House"
      | "AccountsReceivable"
      | "CityTaxes"
      | "TransitoryItems"
      | "VatOnLiabilities"
      | "LossOfAccountsReceivable"
      | "SecondCityTax";
    /** @description Parent account number. Null for top-level accounts. */
    parentNumber?: string;
    /** @description Indicates whether this account has children / sub accounts or not. */
    hasChildren: boolean;
    /** @description Indicates whether this account is archived ot not. */
    isArchived: boolean;
    vat?: definitions["VatItemModel"];
    /** @description Sub accounts for this accounts. */
    subAccounts?: definitions["SlimFinanceAccountModel"][];
  };
  /**
   * @example {
   *   "percent": 51.0,
   *   "type": "ByPercent"
   * }
   */
  SplitChargeRequest: {
    /**
     * Format: double
     * @description The percent to split charge (between 0 and 100)
     */
    percent?: number;
    amount?: definitions["MonetaryValueModel"];
    /** @description How to split the charge: by percent value, or by absolute amount */
    type: "ByPercent" | "ByAmount";
  };
  /**
   * @example {
   *   "allowanceId": "ABCDEF-1-1",
   *   "firstChargeId": "ABCDEF-1-2",
   *   "secondChargeId": "ABCDEF-1-2"
   * }
   */
  SplitChargeResult: {
    allowanceId?: string;
    firstChargeId?: string;
    secondChargeId?: string;
  };
  /**
   * @example {
   *   "percent": 51.0,
   *   "type": "ByPercent"
   * }
   */
  SplitPaymentRequest: {
    /**
     * Format: double
     * @description The percent to split payment (between 0 and 100)
     */
    percent?: number;
    amount?: definitions["MonetaryValueModel"];
    /** @description How to split the payment: by percent value, or by absolute amount */
    type: "ByPercent" | "ByAmount";
  };
  /**
   * @example {
   *   "refundId": "ABCDEF-1-1",
   *   "firstPaymentId": "ABCDEF-1-2",
   *   "secondPaymentId": "ABCDEF-1-3"
   * }
   */
  SplitPaymentResult: {
    refundId?: string;
    firstPaymentId?: string;
    secondPaymentId?: string;
  };
  StayInfoModel: {
    /** @description Name of the primary guest */
    guestName: string;
    /**
     * Format: date
     * @description The arrival date
     * @example 2020-10-10
     */
    arrivalDate: string;
    /**
     * Format: date
     * @description The departure date
     * @example 2020-10-10
     */
    departureDate: string;
    /** @description ID of the reservation this invoice is for, if any. */
    reservationId: string;
    /** @description The last room number */
    roomNumber?: string;
  };
  TaxAmountModel: {
    /** @description The VAT type */
    type:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /**
     * Format: double
     * @description The currently valid percent to calculate the VAT
     */
    percent: number;
    /**
     * Format: double
     * @description The tax amount
     */
    amount: number;
  };
  TaxDetailModel: {
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** Format: double */
    vatPercent: number;
    net: definitions["MonetaryValueModel"];
    tax: definitions["MonetaryValueModel"];
  };
  TransitoryChargeModel: {
    /** @description ID for transitory charge. This is unique within one folio. */
    id: string;
    /** @description The name, article number, or other description of this item */
    name: string;
    amount: definitions["MonetaryValueModel"];
    /** @description The service type of this transitory charge. As revenue and VAT of transitory charges are not recorded for the hotel, this is just FYI. */
    serviceType?:
      | "Other"
      | "Accommodation"
      | "FoodAndBeverages"
      | "CancellationFees"
      | "NoShow"
      | "CityTax"
      | "SecondCityTax";
    /**
     * Format: date
     * @description The date when this charge was added.
     * @example 2020-10-10
     */
    serviceDate: string;
    /**
     * Format: date-time
     * @description Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
     */
    created: string;
    /** @description Receipt for this transaction */
    receipt?: string;
    movedFrom?: definitions["EmbeddedFolioModel"];
    movedTo?: definitions["EmbeddedFolioModel"];
    /** @description A reason why move operation was performed */
    movedReason?: string;
    /**
     * Format: int32
     * @description The count of services provided
     */
    quantity: number;
  };
  VatItemModel: {
    /** @description The VAT type */
    type:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /**
     * Format: double
     * @description The currently valid percent to calculate the VAT
     */
    percent: number;
  };
  /**
   * @example {
   *   "vatTypes": [
   *     {
   *       "type": "Null",
   *       "percent": 0.0
   *     },
   *     {
   *       "type": "Reduced",
   *       "percent": 7.0
   *     },
   *     {
   *       "type": "Normal",
   *       "percent": 19.0
   *     }
   *   ]
   * }
   */
  VatListModel: {
    vatTypes?: definitions["VatItemModel"][];
  };
}

export interface operations {
  /** Allowed actions are only returned, when the list is filtered by reservation ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosGet: {
    parameters: {
      query: {
        /** Filter folio list by property IDs */
        propertyIds?: string[];
        /** Filter folio list by company IDs */
        companyIds?: string[];
        /** Filter folio list by reservation IDs */
        reservationIds?: string[];
        /** Filter folio list by booking IDs */
        bookingIds?: string[];
        /**
         * If set to `true`, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).
         * If set to `false`, only return non-empty folios
         */
        isEmpty?: boolean;
        /**
         * If set to `true`, only return folios that have been checked out on accounts receivables
         * Otherwise, returns all.
         */
        checkedOutOnAccountsReceivable?: boolean;
        /** If set to `true`, closed folios are filtered out from the result collection */
        excludeClosed?: boolean;
        /** If set to `true`, only return folios that been invoices */
        hasInvoices?: boolean;
        /** The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        createdFrom?: string;
        /** The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        createdTo?: string;
        /** The inclusive start time of the date of the last update. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        updatedFrom?: string;
        /** The exclusive end time of the date of the last update. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        updatedTo?: string;
        /** If set to `true`, only main folios are returned, otherwise all. */
        onlyMain?: boolean;
        /** The type of the folio */
        type?: "House" | "Guest" | "External" | "Booking";
        /**
         * Allows filtering external folios by code.
         * Useful when you use external folios with custom codes.
         * Specifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to "External" instead.
         */
        externalFolioCode?: string;
        /**
         * This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,
         * folio id. The search is case insensitive.
         */
        textSearch?: string;
        /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        balanceFilter?: string[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: charges, allowances, transitoryCharges, payments, allowedActions, company, warnings. All other values will be silently ignored. */
        expand?: (
          | "charges"
          | "allowances"
          | "transitoryCharges"
          | "payments"
          | "allowedActions"
          | "company"
          | "warnings"
        )[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FolioListModel"];
      };
      /** No folios found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Use this call to create a new folio.<br>You must have at least one of these scopes: 'reservations.create, reservations.manage, folios.manage'. */
  FinanceFoliosPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the folio. */
        body: definitions["CreateFolioModel"];
      };
    };
    responses: {
      /** Success */
      201: {
        headers: {};
        schema: definitions["FolioCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns number of folios matching the filter criteria.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFolios$countGet: {
    parameters: {
      query: {
        /** Filter folio list by property IDs */
        propertyIds?: string[];
        /** Filter folio list by company IDs */
        companyIds?: string[];
        /** Filter folio list by reservation IDs */
        reservationIds?: string[];
        /** Filter folio list by booking IDs */
        bookingIds?: string[];
        /**
         * If set to `true`, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).
         * If set to `false`, only return non-empty folios
         */
        isEmpty?: boolean;
        /**
         * If set to `true`, only return folios that have been checked out on accounts receivables
         * Otherwise, returns all.
         */
        checkedOutOnAccountsReceivable?: boolean;
        /** If set to `true`, closed folios are filtered out from the result collection */
        excludeClosed?: boolean;
        /** If set to `true`, only return folios that been invoices */
        hasInvoices?: boolean;
        /** The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        createdFrom?: string;
        /** The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        createdTo?: string;
        /** The inclusive start time of the date of the last update. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        updatedFrom?: string;
        /** The exclusive end time of the date of the last update. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
        updatedTo?: string;
        /** If set to `true`, only main folios are returned, otherwise all. */
        onlyMain?: boolean;
        /** The type of the folio */
        type?: "House" | "Guest" | "External" | "Booking";
        /**
         * Allows filtering external folios by code.
         * Useful when you use external folios with custom codes.
         * Specifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to "External" instead.
         */
        externalFolioCode?: string;
        /**
         * This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,
         * folio id. The search is case insensitive.
         */
        textSearch?: string;
        /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        balanceFilter?: string[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["CountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a folio by ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByIdGet: {
    parameters: {
      path: {
        /** The ID of the folio. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: folios. All other values will be silently ignored. */
        expand?: "folios"[];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["FolioModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Deletes a folio. This cannot be undone.
   * You can delete a folio only if it's not a main folio,
   * and the folio is empty (it has no charges, allowance, payments or pending payments).
   * <br />
   * Requires 'allowed action': Delete.<br>You must have this scope: 'folios.manage'.
   */
  FinanceFoliosByIdDelete: {
    parameters: {
      path: {
        /** The folio ID. */
        id: string;
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Check if the folio exists.<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByIdHead: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** The folio exists. */
      200: unknown;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Here is the list of operations that are currently allowed:
   * - Replace debitor (for guest folios only)
   * - Add a company (not for house folios)
   * - Replace/remove a company (not for house folios)<br>You must have this scope: 'folios.manage'.
   */
  FinanceFoliosByIdPatch: {
    parameters: {
      path: {
        /** The folio ID. */
        id: string;
      };
      body: {
        /**
         * Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.
         *             See the FolioDebitorModel in GET for values that can be changed.
         */
        body: definitions["Operation"][];
      };
    };
    responses: {
      /** The folio was successfully modified. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Adds a charge for any good or service, and directly posts it. Can be used to charge items that are not part of the reservation,
   * but should appear on the invoice.
   * <br />
   * Requires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdChargesPost": {
    parameters: {
      path: {
        /** The folio ID */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The charge to be added */
        body: definitions["CreateChargeModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AddedChargeModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Adds a transitory item for any good or service, and directly posts it. To be used for sales that are not revenue of the property,
   * but should appear on te guest's invoice.
   * <br />
   * Requires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdTransitory-chargesPost": {
    parameters: {
      path: {
        /** The folio ID */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The transitory charge to be added */
        body: definitions["CreateTransitoryChargeModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["CreatedSubResourceIdModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Adds a cancellation fee, and directly posts it. Cancellation fees can only be posted on guest folios.
   * <br />
   * Requires 'allowed action': AddCancellationFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdCancellation-feePost": {
    parameters: {
      path: {
        /** The folio ID */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The cancellation fee to be added */
        body: definitions["MonetaryValueModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AddedChargeModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Adds a no-show fee, and directly posts it. No-show fees can only be posted on guest folios.
   * <br />
   * Requires 'allowed action': AddNoShowFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdNo-show-feePost": {
    parameters: {
      path: {
        /** The folio ID */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The no-show fee to be added */
        body: definitions["MonetaryValueModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AddedChargeModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Mark a folio as closed to prevent adding charges and payments. This action cannot be undone,
   * and is only possible if the balance is 0.
   * <br />
   * Requires 'allowed action': Close.<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdClosePut": {
    parameters: {
      path: {
        /** The folio ID. */
        folioId: string;
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Reopens a closed folio.
   * You can only reopen a folio if no invoice has been created for the folio.
   * Otherwise, use `invoice-actions/{invoiceId}/cancel` endpoint to cancel an invoice and reopen the folio.
   * <br />
   * Requires 'allowed action': Reopen.<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdReopenPut": {
    parameters: {
      path: {
        /** The folio ID. */
        folioId: string;
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * If one of the folios is closed, this action cannot be performed.<br /><br />
   * If any of the specified charges does not exist, this action cannot be performed.<br /><br />
   * Moving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdMove-chargesPut": {
    parameters: {
      path: {
        /** The ID of the source folio from where the charges should be moved away. */
        folioId: string;
      };
      body: {
        /** See class. */
        body: definitions["MoveChargesRequest"];
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * If one of the folios is closed, this action cannot be performed.<br /><br />
   * If any of the specified charges does not exist, this action cannot be performed.<br /><br />
   * Moving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFolio-actionsBulk-movePut": {
    parameters: {
      body: {
        /** See class. */
        body: definitions["BulkMoveRequest"];
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * If one of the folios is closed, this action cannot be performed.<br /><br />
   * Only charges that can be moved will be moved.<br /><br /><br>You must have at least one of these scopes: 'charges.move, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdMove-all-chargesPut": {
    parameters: {
      path: {
        /** The ID of the source folio from where the charges should be moved away. */
        folioId: string;
      };
      body: {
        /** See class. */
        body: definitions["MoveAllChargesRequest"];
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Allowance value posted must not exceed source charge minus allowances posted for this charge<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
  "FinanceFolio-actionsByFolioIdChargesByChargeIdAllowancesPost": {
    parameters: {
      path: {
        /** The ID of the folio. */
        folioId: string;
        /** The ID of the charge allowance posted for */
        chargeId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** Allowance data */
        body: definitions["CreateAllowanceForChargeModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["CreatedSubResourceIdModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
  "FinanceFolio-actionsByFolioIdAllowancesPost": {
    parameters: {
      path: {
        /** The ID of the folio. */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** Allowance amount and post reason */
        body: definitions["CreateAllowanceForFolioModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["CreatedSubResourceIdModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'. */
  "FinanceFolio-actionsByFolioIdBulk-allowancesPost": {
    parameters: {
      path: {
        /** The ID of the folio. */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** Allowance amount and post reason */
        body: definitions["CreateAllowanceBulkModel"];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["BulkAllowanceCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Use this call for cases when the folio should be closed early. For example, when a guest wants to get the invoice right after the check-in
   * As posting charges before the service is delivered is potentially risky, this operation will fail if there are any unposted charges
   * further in the future than 7 days.
   * Posting open charges is only possible for fully prepaid folios.
   * <br />
   * Requires 'allowed action': PostOpenCharges.<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdPost-chargesPut": {
    parameters: {
      path: {
        /** The ID of the folio. */
        folioId: string;
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Move payments from one guest/booking folio to another - moving between different bookings is not supported,
   * and will lead to an error. If one of the folios is closed, this action cannot be performed.<br />
   * The PSP reference, if present, will be removed when moving and only be persisted on the original payment.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.
   */
  "FinanceFolio-actionsByFolioIdMove-paymentsPut": {
    parameters: {
      path: {
        /** The ID of the source folio from where the payments should be moved away. */
        folioId: string;
      };
      body: {
        /** See class. */
        body: definitions["MovePaymentsRequest"];
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have this scope: 'folios.manage'. */
  "FinanceFolio-actionsByFolioIdCorrectPost": {
    parameters: {
      path: {
        /** The ID of the folio. */
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** Array of chargeIds to move and reason */
        body: definitions["CorrectFolioRequest"];
      };
    };
    responses: {
      /** Folio correction was successful. Correction folio created. */
      201: {
        headers: {};
        schema: definitions["FolioCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'allowances.post, charges.create, folios.manage'. */
  "FinanceFolio-actionsByFolioIdChargesByChargeIdSplitPost": {
    parameters: {
      path: {
        /** The ID of the folio */
        folioId: string;
        /** The ID of the charge */
        chargeId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** See class */
        body: definitions["SplitChargeRequest"];
      };
    };
    responses: {
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'payments.create, refunds.create, folios.manage'. */
  "FinanceFolio-actionsByFolioIdPaymentsByPaymentIdSplitPost": {
    parameters: {
      path: {
        /** The ID of the folio */
        folioId: string;
        /** The ID of the payment */
        paymentId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** See class */
        body: definitions["SplitPaymentRequest"];
      };
    };
    responses: {
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all payments for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByFolioIdPaymentsGet: {
    parameters: {
      path: {
        folioId: string;
      };
      query: {
        /** Filter payments by one or more status. */
        statusCodes?: ("Pending" | "Success" | "Failure" | "Canceled")[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
        expand?: "actions"[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["PaymentListModel"];
      };
      /** No payments could be found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * A custom payment will not involve any automatic processing. This is best to be used for cash, cheque or voucher payments or payments that have
   * been processed by an external system and it should just be recorded in apaleo for accounting purposes.<br>You must have this scope: 'folios.manage'.
   */
  FinanceFoliosByFolioIdPaymentsPost: {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the payment. */
        body: definitions["CreateCustomPaymentRequest"];
      };
    };
    responses: {
      /** Payment was created and accounting was performed. */
      201: {
        headers: {};
        schema: definitions["PaymentCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a payment by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByFolioIdPaymentsByPaymentIdGet: {
    parameters: {
      path: {
        folioId: string;
        /** The payment ID. */
        paymentId: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
        expand?: "actions"[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FolioPaymentModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Trigger a terminal payment for the folio. The payment will be processed asynchronously. Use the location header to poll for the status of the payment.
   * As long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFoliosByFolioIdPaymentsBy-terminalPost": {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the payment. */
        body: definitions["CreateTerminalPaymentRequest"];
      };
    };
    responses: {
      /** Payment was created and will be processed via the specified terminal. */
      201: {
        headers: {};
        schema: definitions["PaymentCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Captures a specific amount from a pre-authorization and posts it to the folio. For the pre-authorization please ensure to set the respective metadata in the original payment
   * transaction. The flow type has to be set to <i>CaptureOnly</i>. For more information please refer to the documentation of <a href="https://apaleo.dev/guides/business-cases/ibe/get-the-money" target="_blank">how to do a pre-authorization on a booking engine</a>.
   * The payment will be processed asynchronously. Use the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount of allowed
   * payments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFoliosByFolioIdPaymentsBy-authorizationPost": {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the payment. */
        body: definitions["CreateAuthorizationPaymentRequest"];
      };
    };
    responses: {
      /** Payment was created and will be processed. */
      201: {
        headers: {};
        schema: definitions["PaymentCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Trigger a payment for the folio using the payment account stored on the reservation. The payment will be processed asynchronously. Use the location header to poll
   * for the status of the payment. As long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes
   * automatically<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFoliosByFolioIdPaymentsBy-payment-accountPost": {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the payment. */
        body: definitions["CreateAccountPaymentRequest"];
      };
    };
    responses: {
      /** Payment was created and will be processed. */
      201: {
        headers: {};
        schema: definitions["PaymentCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Creates a link to a payment form where guests can pay. To enable open invoice payment methods you need to provide at
   * least the paid charges with the request. For some open invoice payment methods you also need to ensure that the full
   * billing address of the folio is set, before you create the payment link. The payment will be processed asynchronously.
   * Use the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount
   * of allowed payments for the folio.<br>You must have this scope: 'folios.manage'.
   */
  "FinanceFoliosByFolioIdPaymentsBy-linkPost": {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the payment link. */
        body: definitions["CreatePaymentLinkRequest"];
      };
    };
    responses: {
      /** Payment was created and will be processed. */
      201: {
        headers: {};
        schema: definitions["PaymentCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Sets a payment to cancelled and triggers the cancellation.<br>You must have this scope: 'folios.manage'. */
  FinanceFoliosByFolioIdPaymentsByPaymentIdCancelPut: {
    parameters: {
      path: {
        folioId: string;
        /** The id of the payment. */
        paymentId: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all refunds for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByFolioIdRefundsGet: {
    parameters: {
      path: {
        folioId: string;
      };
      query: {
        /** Filter refunds by one or more status */
        statusCodes?: ("Pending" | "Success" | "Failure" | "Canceled")[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["RefundListModel"];
      };
      /** No refunds could be found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Trigger a generic refund for the folio. The refund will be processed asynchronously. Use the location header to poll for the status of the refund.
   * As long as a refund is pending it reduces the amount of allowed refunds for the folio. The refund times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.
   */
  FinanceFoliosByFolioIdRefundsPost: {
    parameters: {
      path: {
        folioId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the refund. */
        body: definitions["CreateFolioRefundRequest"];
      };
    };
    responses: {
      /** Refund was created and will be processed. */
      201: {
        headers: {};
        schema: definitions["RefundCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Get a refund by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'. */
  FinanceFoliosByFolioIdRefundsByRefundIdGet: {
    parameters: {
      path: {
        folioId: string;
        /** The refund ID. */
        refundId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["RefundModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Trigger a refund for a specific payment on this folio. The refund will be processed asynchronously. Use the location header to poll for
   * the status of the refund. As long as a refund is pending the allowed refund amount for this payment will be reduced by the amount. The refund
   * times out after 10 minutes automatically<br>You must have this scope: 'folios.manage'.
   */
  FinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPost: {
    parameters: {
      path: {
        folioId: string;
        /** The payment Id. */
        paymentId: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The definition of the refund. */
        body: definitions["CreatePaymentRefundRequest"];
      };
    };
    responses: {
      /** Refund was created and will be processed. */
      201: {
        headers: {};
        schema: definitions["RefundCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Gets a preview invoice PDF for one specific folio.<br>You must have this scope: 'invoices.read'. */
  "FinanceInvoicesPreview-pdfGet": {
    parameters: {
      query: {
        /** The language in which the invoice should be produced. */
        languageCode: string;
        /** The ID of the folio for which the invoice should be created. */
        folioId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: unknown;
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** To see if the invoice creation would be successful, check the warnings.<br>You must have this scope: 'invoices.read'. */
  FinanceInvoicesPreviewGet: {
    parameters: {
      query: {
        /** The ID of the folio for which the invoice should be created. */
        folioId: string;
        /** List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored. */
        expand?: "company"[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["PreviewInvoiceModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Gets the list of all invoices (the metadata only, not the files).<br>You must have this scope: 'invoices.read'. */
  FinanceInvoicesGet: {
    parameters: {
      query: {
        /** The invoice number */
        number?: string;
        /** Filter by invoice status */
        status?: "FullyPaid" | "Unpaid" | "WrittenOff";
        /**
         * If set to `true`, only return invoices with an open balance (AR)
         * Otherwise, returns all.
         */
        checkedOutOnAccountsReceivable?: boolean;
        /** Filter for the outstanding balance for invoices<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        outstandingPaymentFilter?: string[];
        /** Filter by invoice date<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        dateFilter?: string[];
        /** Filter by property IDs */
        propertyIds?: string[];
        /** Filter by reservation IDs */
        reservationIds?: string[];
        /** Filter by booking IDs */
        bookingIds?: string[];
        /** Filter by folio IDs */
        folioIds?: string[];
        /** Find invoices for a recipient name or company. Provide at least three characters. */
        nameSearch?: string;
        /**
         * If set to `true`, returns only invoices having no outstanding payments or marked as settled.
         * If set to `false`, returns only invoices with outstanding payment and not marked as settled.
         * If not set, returns all invoices. - <b>DEPRECATED: This field will be removed at 25.06.2022. Use filtering by `Status` instead</b>
         */
        paymentSettled?: boolean;
        /** Filter by company IDs */
        companyIds?: string[];
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
        /** List of all embedded resources that should be expanded in the response. Possible values are: allowedActions, company. All other values will be silently ignored. */
        expand?: ("allowedActions" | "company")[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["InvoiceListModel"];
      };
      /** No invoices found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Creates an invoice for one specific folio. The invoice can only be created once.
   * The debitor needs to have name, city, postal code and country code, as these are required for invoices.
   * If the folio is not fully paid, this will check out the reservation on AR and create an invoice with outstanding payments.<br>You must have at least one of these scopes: 'invoices.create, invoices.manage'.
   */
  FinanceInvoicesPost: {
    parameters: {
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
      body: {
        /** The folio ID to create the invoice for. */
        body: definitions["InvoicePreviewPdfRequest"];
      };
    };
    responses: {
      /** The invoice was created successfully. */
      201: {
        headers: {};
        schema: definitions["InvoiceCreatedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Gets an invoice PDF file by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'. */
  FinanceInvoicesByIdPdfGet: {
    parameters: {
      path: {
        /** The invoice ID. */
        id: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: unknown;
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Gets invoice data by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'. */
  FinanceInvoicesByIdGet: {
    parameters: {
      path: {
        /** The invoice ID. */
        id: string;
      };
      query: {
        /** List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored. */
        expand?: "company"[];
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["InvoiceModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Settles the invoice, if the invoice has an amount to be paid (total != 0).<br>You must have this scope: 'invoices.manage'. */
  "FinanceInvoice-actionsByIdPayPut": {
    parameters: {
      path: {
        /** The invoice ID */
        id: string;
      };
      body: {
        /** see class */
        body: definitions["PayInvoiceRequest"];
      };
    };
    responses: {
      /** Invoice marked as paid. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * For regular invoices and AR invoices that haven't been paid yet, creates a new cancellation invoice and opens the folio again.
   * For advance invoices, creates a new cancellation invoice.<br>You must have this scope: 'invoices.manage'.
   */
  "FinanceInvoice-actionsByIdCancelPut": {
    parameters: {
      path: {
        /** The invoice ID */
        id: string;
      };
    };
    responses: {
      /** Invoice canceled. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns total amount credited from one account to another<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  "FinanceAccountsAggregate-pairs-dailyPost": {
    parameters: {
      query: {
        /** Specifies the property transactions will be aggregated for. */
        propertyId: string;
        /** The inclusive start date of the interval */
        from: string;
        /** The exclusive end date of the interval */
        to: string;
        /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
        reference?: string;
        /** Filter transactions by account number */
        accountNumber?: string;
        /** Filter transactions by type */
        accountType?:
          | "Revenues"
          | "Payments"
          | "Liabilities"
          | "Receivables"
          | "Vat"
          | "House"
          | "AccountsReceivable"
          | "CityTaxes"
          | "TransitoryItems"
          | "VatOnLiabilities"
          | "LossOfAccountsReceivable"
          | "SecondCityTax";
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report (2-letter ISO code) */
        languageCode?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AccountingTransactionPairListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns credited and debited amounts aggregated by transactions' date (business day) for all accounts and a given period.
   * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.
   */
  "FinanceAccountsAggregate-dailyPost": {
    parameters: {
      query: {
        /** Specifies the property transactions will be aggregated for. */
        propertyId: string;
        /** The inclusive start date of the interval */
        from: string;
        /** The exclusive end date of the interval */
        to: string;
        /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
        reference?: string;
        /** Filter transactions by account number */
        accountNumber?: string;
        /** Filter transactions by type */
        accountType?:
          | "Revenues"
          | "Payments"
          | "Liabilities"
          | "Receivables"
          | "Vat"
          | "House"
          | "AccountsReceivable"
          | "CityTaxes"
          | "TransitoryItems"
          | "VatOnLiabilities"
          | "LossOfAccountsReceivable"
          | "SecondCityTax";
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report (2-letter ISO code) */
        languageCode?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AggregateTransactionListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns credited and debited amounts aggregated by transactions' timestamp for all accounts and a given period.
   * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.
   */
  FinanceAccountsAggregatePost: {
    parameters: {
      query: {
        /** Specifies the property for which transactions will be exported */
        propertyId: string;
        /**
         * The inclusive start time of the posting date.
         * Either posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from: string;
        /**
         * The exclusive end time of the posting date.
         * Either posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to: string;
        /** Filter transactions by account number */
        accountNumber?: string;
        /** Filter transactions by type */
        accountType?:
          | "Revenues"
          | "Payments"
          | "Liabilities"
          | "Receivables"
          | "Vat"
          | "House"
          | "AccountsReceivable"
          | "CityTaxes"
          | "TransitoryItems"
          | "VatOnLiabilities"
          | "LossOfAccountsReceivable"
          | "SecondCityTax";
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report */
        languageCode?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AggregateTransactionListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns the raw transaction data for a given property and time period.
   * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
   */
  FinanceAccountsExportPost: {
    parameters: {
      query: {
        /** Specifies the property for which transactions will be exported */
        propertyId: string;
        /**
         * The inclusive start time of the posting date.
         * Either posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        from: string;
        /**
         * The exclusive end time of the posting date.
         * Either posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
         */
        to: string;
        /** Filter transactions by account number */
        accountNumber?: string;
        /** Filter transactions by type */
        accountType?:
          | "Revenues"
          | "Payments"
          | "Liabilities"
          | "Receivables"
          | "Vat"
          | "House"
          | "AccountsReceivable"
          | "CityTaxes"
          | "TransitoryItems"
          | "VatOnLiabilities"
          | "LossOfAccountsReceivable"
          | "SecondCityTax";
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report */
        languageCode?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AccountingTransactionListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns the raw transaction data for a given property and time period.
   * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
   */
  "FinanceAccountsExport-dailyPost": {
    parameters: {
      query: {
        /** Specifies the property transactions will be aggregated for. */
        propertyId: string;
        /** The inclusive start date of the interval */
        from: string;
        /** The exclusive end date of the interval */
        to: string;
        /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
        reference?: string;
        /** Filter transactions by account number */
        accountNumber?: string;
        /** Filter transactions by type */
        accountType?:
          | "Revenues"
          | "Payments"
          | "Liabilities"
          | "Receivables"
          | "Vat"
          | "House"
          | "AccountsReceivable"
          | "CityTaxes"
          | "TransitoryItems"
          | "VatOnLiabilities"
          | "LossOfAccountsReceivable"
          | "SecondCityTax";
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report (2-letter ISO code) */
        languageCode?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["AccountingTransactionListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns the raw transaction data for a given property and time period.
   * Stores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.
   */
  "FinanceAccountsExport-gross-dailyPost": {
    parameters: {
      query: {
        /** Specifies the property transactions will be aggregated for. */
        propertyId: string;
        /** The inclusive start date of the interval */
        from: string;
        /** The exclusive end date of the interval */
        to: string;
        /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
        reference?: string;
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ExportGrossTransactionListModel"];
      };
      /** No transactions found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns the schema of subledger, split into global and guest ledger.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  FinanceAccountsSchemaGet: {
    parameters: {
      query: {
        /** Filter account list by property ID */
        propertyId: string;
        /** How many hierarchy levels to include (between 1 and 4, default is 1). */
        depth?: number;
        /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
        includeArchived?: boolean;
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report. If not specified, language code from "Accept-Language" will be used. */
        languageCode?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ChartOfAccountsModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of accounts in one property, having the same global account as parent.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  "FinanceGlobal-accountsGet": {
    parameters: {
      query: {
        /** Filter account list by property ID */
        propertyId: string;
        /** Filter account list by the parent account's number. */
        parent: string;
        /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
        includeArchived?: boolean;
        /** Allows to override the default accounting schema */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report */
        languageCode?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FinanceAccountListModel"];
      };
      /** No accounts found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of accounts in one property for a reservation.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  "FinanceGuest-accountsGet": {
    parameters: {
      query: {
        /** Filter account list by property id */
        propertyId: string;
        /** Filter account list by reservation id */
        reservationId: string;
        /** Filter account list by the parent account's number. */
        parent?: string;
        /** The language for the the report */
        languageCode?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FinanceAccountListModel"];
      };
      /** No accounts found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of accounts in one property for a folio.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  "FinanceExternal-accountsGet": {
    parameters: {
      query: {
        /** Filter account list by property id */
        propertyId: string;
        /** Filter account list by folio id */
        folioId: string;
        /** Filter account list by the parent account's number. */
        parent?: string;
        /** The language for the the report */
        languageCode?: string;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FinanceAccountListModel"];
      };
      /** No accounts found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns one account, as specified by its number and the property.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  FinanceAccountsByNumberGet: {
    parameters: {
      path: {
        /** The account number */
        number: string;
      };
      query: {
        /** Specifies the property the account is in. */
        propertyId: string;
        /** Limit how many transactions should be included in the view (between 0 and 50, defaults to 0). */
        transactionLimit?: number;
        /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
        includeArchived?: boolean;
        /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
        accountingSchema?: "Simple" | "Extended";
        /** The language for the the report */
        languageCode?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FinanceAccountModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have at least one of these scopes: 'subledger.read, accounting.read'. */
  "FinanceAccountsChild-accountsGet": {
    parameters: {
      query: {
        /** Filter account list by property id */
        propertyId: string;
        /** Filter account list by the parent account's number. */
        parent: string;
        /** The language for the the report */
        languageCode?: string;
        /** Allows to override the default accounting schema */
        accountingSchema?: "Simple" | "Extended";
        /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
        includeArchived?: boolean;
        /** Page number, 1-based. Default value is 1 (if this is not set or not positive). Results in 204 if there are no items on that page. */
        pageNumber?: number;
        /** Page size. If this is not set or not positive, the pageNumber is ignored and all items are returned. */
        pageSize?: number;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["FinanceAccountListModel"];
      };
      /** No accounts found. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all currencies. */
  FinanceTypesCurrenciesGet: {
    responses: {
      /** Success. */
      200: {
        schema: definitions["CurrencyListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all supported payment methods. */
  "FinanceTypesPayment-methodsGet": {
    responses: {
      /** Success. */
      200: {
        schema: definitions["PaymentMethodListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all supported service types. */
  "FinanceTypesService-typesGet": {
    responses: {
      /** Success. */
      200: {
        schema: definitions["ServiceTypeListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns a list of all VAT types and percents for a country. Supported:<br />
   * - Albania (AL)<br />
   * - Austria (AT)<br />
   * - Azerbaijan (AZ)<br />
   * - Belgium (BE)<br />
   * - Bulgaria (BG)<br />
   * - Cape Verde (CV)<br />
   * - Croatia (HR)<br />
   * - Czech Republic (CZ)<br />
   * - Denmark (DK)<br />
   * - Finland (FI)<br />
   * - France (FR) - without the super-reduced 2.1% VAT<br />
   * - French Polynesia (PF)<br />
   * - Germany (DE)<br />
   * - Greece (GR)<br />
   * - Hungary (HU)<br />
   * - Indonesia (ID)<br />
   * - Ireland (IE)<br />
   * - Italy (IT)<br />
   * - Iceland (IS)<br />
   * - Japan (JP)<br />
   * - Malaysia (MY)<br />
   * - Mexico (MX)<br />
   * - Netherlands (NL)<br />
   * - New Zealand (NZ)<br />
   * - Norway (NO) - without the VAT for raw fish supplies<br />
   * - Portugal (PT)<br />
   * - Reunion (RE)<br />
   * - Saudi Arabia (SA)<br />
   * - Slovenia (SI)<br />
   * - South Africa (ZA)<br />
   * - Spain (ES)<br />
   * - Sweden (SE)<br />
   * - Switzerland (CH)<br />
   * - Taiwan (TW)<br />
   * - United Kingdom (GB)
   */
  FinanceTypesVatGet: {
    parameters: {
      query: {
        /** The 2-letter ISO country code */
        isoCountryCode: string;
        /**
         * If specified, returns the VAT types that are effective for this specific date.
         * If nothing specified, returns the VAT types that are effective for the current date in UTC timezone.
         */
        atDate?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["VatListModel"];
      };
      /** No VAT setup for the specified country. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
}

export interface external {}
